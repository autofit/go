// Code generated by protoc-gen-go. DO NOT EDIT.
// source: deviceshadow.proto

/*
Package deviceshadow is a generated protocol buffer package.

It is generated from these files:
	deviceshadow.proto

It has these top-level messages:
	DeviceregReq
	DeviceregResp
	BaseCmd
	GateData
	CmdSetList
	CmdDef
	DeviceList
	GeneralList
	GeneralState
	MultimediaList
	DataParm
	MultimediaState
	VolumeState
	OutputState
	ChannelValue
	AlarmList
	FarmState
	FarmList
	LightList
	LightExtra
	LightState
	AirConditioningList
	AirConditioningState
	DevicedisconnReq
*/
package deviceshadow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DigitalCtl int32

const (
	DigitalCtl_GeneralCtl         DigitalCtl = 0
	DigitalCtl_LightCtl           DigitalCtl = 1
	DigitalCtl_AirConditioningCtl DigitalCtl = 2
	DigitalCtl_FarmCtl            DigitalCtl = 3
	DigitalCtl_MultimediaCtl      DigitalCtl = 4
)

var DigitalCtl_name = map[int32]string{
	0: "GeneralCtl",
	1: "LightCtl",
	2: "AirConditioningCtl",
	3: "FarmCtl",
	4: "MultimediaCtl",
}
var DigitalCtl_value = map[string]int32{
	"GeneralCtl":         0,
	"LightCtl":           1,
	"AirConditioningCtl": 2,
	"FarmCtl":            3,
	"MultimediaCtl":      4,
}

func (x DigitalCtl) String() string {
	return proto.EnumName(DigitalCtl_name, int32(x))
}
func (DigitalCtl) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DeviceregReq struct {
	DeviceType    string `protobuf:"bytes,1,opt,name=DeviceType" json:"DeviceType,omitempty"`
	DeviceRegCode string `protobuf:"bytes,2,opt,name=DeviceRegCode" json:"DeviceRegCode,omitempty"`
	DeviceId      string `protobuf:"bytes,3,opt,name=DeviceId" json:"DeviceId,omitempty"`
	MsgSeq        string `protobuf:"bytes,4,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
	TempId        string `protobuf:"bytes,5,opt,name=TempId" json:"TempId,omitempty"`
}

func (m *DeviceregReq) Reset()                    { *m = DeviceregReq{} }
func (m *DeviceregReq) String() string            { return proto.CompactTextString(m) }
func (*DeviceregReq) ProtoMessage()               {}
func (*DeviceregReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DeviceregReq) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *DeviceregReq) GetDeviceRegCode() string {
	if m != nil {
		return m.DeviceRegCode
	}
	return ""
}

func (m *DeviceregReq) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DeviceregReq) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func (m *DeviceregReq) GetTempId() string {
	if m != nil {
		return m.TempId
	}
	return ""
}

type DeviceregResp struct {
	DeviceType      string `protobuf:"bytes,1,opt,name=DeviceType" json:"DeviceType,omitempty"`
	DeviceId        string `protobuf:"bytes,2,opt,name=DeviceId" json:"DeviceId,omitempty"`
	BrokerAddr      string `protobuf:"bytes,3,opt,name=BrokerAddr" json:"BrokerAddr,omitempty"`
	MsgSeq          string `protobuf:"bytes,4,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
	ServerPublicKey string `protobuf:"bytes,5,opt,name=ServerPublicKey" json:"ServerPublicKey,omitempty"`
	PrivateKey      string `protobuf:"bytes,6,opt,name=PrivateKey" json:"PrivateKey,omitempty"`
	Error           string `protobuf:"bytes,7,opt,name=Error" json:"Error,omitempty"`
}

func (m *DeviceregResp) Reset()                    { *m = DeviceregResp{} }
func (m *DeviceregResp) String() string            { return proto.CompactTextString(m) }
func (*DeviceregResp) ProtoMessage()               {}
func (*DeviceregResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DeviceregResp) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *DeviceregResp) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DeviceregResp) GetBrokerAddr() string {
	if m != nil {
		return m.BrokerAddr
	}
	return ""
}

func (m *DeviceregResp) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func (m *DeviceregResp) GetServerPublicKey() string {
	if m != nil {
		return m.ServerPublicKey
	}
	return ""
}

func (m *DeviceregResp) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *DeviceregResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type BaseCmd struct {
	DeviceType string `protobuf:"bytes,1,opt,name=DeviceType" json:"DeviceType,omitempty"`
	DeviceId   string `protobuf:"bytes,2,opt,name=DeviceId" json:"DeviceId,omitempty"`
	Ip         string `protobuf:"bytes,3,opt,name=Ip" json:"Ip,omitempty"`
	MsgSeq     string `protobuf:"bytes,4,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
	Mark       string `protobuf:"bytes,5,opt,name=Mark" json:"Mark,omitempty"`
	Cmd        string `protobuf:"bytes,6,opt,name=Cmd" json:"Cmd,omitempty"`
	DeviceList string `protobuf:"bytes,7,opt,name=DeviceList" json:"DeviceList,omitempty"`
	Data       string `protobuf:"bytes,8,opt,name=Data" json:"Data,omitempty"`
	ServerId   string `protobuf:"bytes,9,opt,name=ServerId" json:"ServerId,omitempty"`
	UserName   string `protobuf:"bytes,10,opt,name=UserName" json:"UserName,omitempty"`
	Error      string `protobuf:"bytes,11,opt,name=Error" json:"Error,omitempty"`
	BrokerAddr string `protobuf:"bytes,12,opt,name=BrokerAddr" json:"BrokerAddr,omitempty"`
	GateId     string `protobuf:"bytes,13,opt,name=GateId" json:"GateId,omitempty"`
	Token      string `protobuf:"bytes,14,opt,name=Token" json:"Token,omitempty"`
}

func (m *BaseCmd) Reset()                    { *m = BaseCmd{} }
func (m *BaseCmd) String() string            { return proto.CompactTextString(m) }
func (*BaseCmd) ProtoMessage()               {}
func (*BaseCmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BaseCmd) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *BaseCmd) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *BaseCmd) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *BaseCmd) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func (m *BaseCmd) GetMark() string {
	if m != nil {
		return m.Mark
	}
	return ""
}

func (m *BaseCmd) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *BaseCmd) GetDeviceList() string {
	if m != nil {
		return m.DeviceList
	}
	return ""
}

func (m *BaseCmd) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *BaseCmd) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *BaseCmd) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *BaseCmd) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *BaseCmd) GetBrokerAddr() string {
	if m != nil {
		return m.BrokerAddr
	}
	return ""
}

func (m *BaseCmd) GetGateId() string {
	if m != nil {
		return m.GateId
	}
	return ""
}

func (m *BaseCmd) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type GateData struct {
	GateId    string        `protobuf:"bytes,1,opt,name=GateId" json:"GateId,omitempty"`
	Token     string        `protobuf:"bytes,2,opt,name=Token" json:"Token,omitempty"`
	Server    string        `protobuf:"bytes,3,opt,name=Server" json:"Server,omitempty"`
	BakServer string        `protobuf:"bytes,4,opt,name=BakServer" json:"BakServer,omitempty"`
	MsgSeq    string        `protobuf:"bytes,5,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
	CmdSet    []*CmdSetList `protobuf:"bytes,6,rep,name=CmdSet" json:"CmdSet,omitempty"`
	Device    []*DeviceList `protobuf:"bytes,7,rep,name=Device" json:"Device,omitempty"`
}

func (m *GateData) Reset()                    { *m = GateData{} }
func (m *GateData) String() string            { return proto.CompactTextString(m) }
func (*GateData) ProtoMessage()               {}
func (*GateData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GateData) GetGateId() string {
	if m != nil {
		return m.GateId
	}
	return ""
}

func (m *GateData) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GateData) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *GateData) GetBakServer() string {
	if m != nil {
		return m.BakServer
	}
	return ""
}

func (m *GateData) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func (m *GateData) GetCmdSet() []*CmdSetList {
	if m != nil {
		return m.CmdSet
	}
	return nil
}

func (m *GateData) GetDevice() []*DeviceList {
	if m != nil {
		return m.Device
	}
	return nil
}

type CmdSetList struct {
	Cmd    string        `protobuf:"bytes,1,opt,name=Cmd" json:"Cmd,omitempty"`
	Device []*DeviceList `protobuf:"bytes,2,rep,name=Device" json:"Device,omitempty"`
}

func (m *CmdSetList) Reset()                    { *m = CmdSetList{} }
func (m *CmdSetList) String() string            { return proto.CompactTextString(m) }
func (*CmdSetList) ProtoMessage()               {}
func (*CmdSetList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CmdSetList) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *CmdSetList) GetDevice() []*DeviceList {
	if m != nil {
		return m.Device
	}
	return nil
}

type CmdDef struct {
	CmdName        string `protobuf:"bytes,1,opt,name=CmdName" json:"CmdName,omitempty"`
	UserDefCmdName string `protobuf:"bytes,2,opt,name=UserDefCmdName" json:"UserDefCmdName,omitempty"`
	Value          string `protobuf:"bytes,3,opt,name=Value" json:"Value,omitempty"`
	EnumValue      string `protobuf:"bytes,4,opt,name=EnumValue" json:"EnumValue,omitempty"`
	Range          string `protobuf:"bytes,5,opt,name=Range" json:"Range,omitempty"`
}

func (m *CmdDef) Reset()                    { *m = CmdDef{} }
func (m *CmdDef) String() string            { return proto.CompactTextString(m) }
func (*CmdDef) ProtoMessage()               {}
func (*CmdDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CmdDef) GetCmdName() string {
	if m != nil {
		return m.CmdName
	}
	return ""
}

func (m *CmdDef) GetUserDefCmdName() string {
	if m != nil {
		return m.UserDefCmdName
	}
	return ""
}

func (m *CmdDef) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *CmdDef) GetEnumValue() string {
	if m != nil {
		return m.EnumValue
	}
	return ""
}

func (m *CmdDef) GetRange() string {
	if m != nil {
		return m.Range
	}
	return ""
}

type DeviceList struct {
	DeviceId             string                `protobuf:"bytes,1,opt,name=DeviceId" json:"DeviceId,omitempty"`
	Name                 string                `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Category             string                `protobuf:"bytes,3,opt,name=Category" json:"Category,omitempty"`
	Sleep                string                `protobuf:"bytes,4,opt,name=Sleep" json:"Sleep,omitempty"`
	Touch                string                `protobuf:"bytes,5,opt,name=Touch" json:"Touch,omitempty"`
	MsgSeq               string                `protobuf:"bytes,6,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
	DigitalCtl           DigitalCtl            `protobuf:"varint,7,opt,name=DigitalCtl,enum=deviceshadow.DigitalCtl" json:"DigitalCtl,omitempty"`
	GeneralCtl           *GeneralList          `protobuf:"bytes,8,opt,name=GeneralCtl" json:"GeneralCtl,omitempty"`
	GeneralState         *GeneralState         `protobuf:"bytes,9,opt,name=GeneralState" json:"GeneralState,omitempty"`
	LightCtl             *LightList            `protobuf:"bytes,10,opt,name=LightCtl" json:"LightCtl,omitempty"`
	LightState           *LightState           `protobuf:"bytes,11,opt,name=LightState" json:"LightState,omitempty"`
	AirConditioningCtl   *AirConditioningList  `protobuf:"bytes,12,opt,name=AirConditioningCtl" json:"AirConditioningCtl,omitempty"`
	AirConditioningState *AirConditioningState `protobuf:"bytes,13,opt,name=AirConditioningState" json:"AirConditioningState,omitempty"`
	FarmCtl              *FarmList             `protobuf:"bytes,14,opt,name=FarmCtl" json:"FarmCtl,omitempty"`
	FarmState            *FarmState            `protobuf:"bytes,15,opt,name=FarmState" json:"FarmState,omitempty"`
	MultimediaCtl        *MultimediaList       `protobuf:"bytes,16,opt,name=MultimediaCtl" json:"MultimediaCtl,omitempty"`
	MultimediaState      *MultimediaState      `protobuf:"bytes,17,opt,name=MultimediaState" json:"MultimediaState,omitempty"`
}

func (m *DeviceList) Reset()                    { *m = DeviceList{} }
func (m *DeviceList) String() string            { return proto.CompactTextString(m) }
func (*DeviceList) ProtoMessage()               {}
func (*DeviceList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeviceList) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DeviceList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceList) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *DeviceList) GetSleep() string {
	if m != nil {
		return m.Sleep
	}
	return ""
}

func (m *DeviceList) GetTouch() string {
	if m != nil {
		return m.Touch
	}
	return ""
}

func (m *DeviceList) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func (m *DeviceList) GetDigitalCtl() DigitalCtl {
	if m != nil {
		return m.DigitalCtl
	}
	return DigitalCtl_GeneralCtl
}

func (m *DeviceList) GetGeneralCtl() *GeneralList {
	if m != nil {
		return m.GeneralCtl
	}
	return nil
}

func (m *DeviceList) GetGeneralState() *GeneralState {
	if m != nil {
		return m.GeneralState
	}
	return nil
}

func (m *DeviceList) GetLightCtl() *LightList {
	if m != nil {
		return m.LightCtl
	}
	return nil
}

func (m *DeviceList) GetLightState() *LightState {
	if m != nil {
		return m.LightState
	}
	return nil
}

func (m *DeviceList) GetAirConditioningCtl() *AirConditioningList {
	if m != nil {
		return m.AirConditioningCtl
	}
	return nil
}

func (m *DeviceList) GetAirConditioningState() *AirConditioningState {
	if m != nil {
		return m.AirConditioningState
	}
	return nil
}

func (m *DeviceList) GetFarmCtl() *FarmList {
	if m != nil {
		return m.FarmCtl
	}
	return nil
}

func (m *DeviceList) GetFarmState() *FarmState {
	if m != nil {
		return m.FarmState
	}
	return nil
}

func (m *DeviceList) GetMultimediaCtl() *MultimediaList {
	if m != nil {
		return m.MultimediaCtl
	}
	return nil
}

func (m *DeviceList) GetMultimediaState() *MultimediaState {
	if m != nil {
		return m.MultimediaState
	}
	return nil
}

type GeneralList struct {
	Temperature   *CmdDef `protobuf:"bytes,1,opt,name=Temperature" json:"Temperature,omitempty"`
	Volume        *CmdDef `protobuf:"bytes,2,opt,name=Volume" json:"Volume,omitempty"`
	Poslition     *CmdDef `protobuf:"bytes,3,opt,name=Poslition" json:"Poslition,omitempty"`
	Close         *CmdDef `protobuf:"bytes,4,opt,name=Close" json:"Close,omitempty"`
	Open          *CmdDef `protobuf:"bytes,5,opt,name=Open" json:"Open,omitempty"`
	OnlyOpen      *CmdDef `protobuf:"bytes,7,opt,name=OnlyOpen" json:"OnlyOpen,omitempty"`
	Query         *CmdDef `protobuf:"bytes,8,opt,name=Query" json:"Query,omitempty"`
	Pulse         *CmdDef `protobuf:"bytes,9,opt,name=Pulse" json:"Pulse,omitempty"`
	Switch        *CmdDef `protobuf:"bytes,10,opt,name=Switch" json:"Switch,omitempty"`
	WindDirection *CmdDef `protobuf:"bytes,11,opt,name=WindDirection" json:"WindDirection,omitempty"`
	Mode          *CmdDef `protobuf:"bytes,12,opt,name=Mode" json:"Mode,omitempty"`
	Sensitivity   *CmdDef `protobuf:"bytes,13,opt,name=Sensitivity" json:"Sensitivity,omitempty"`
}

func (m *GeneralList) Reset()                    { *m = GeneralList{} }
func (m *GeneralList) String() string            { return proto.CompactTextString(m) }
func (*GeneralList) ProtoMessage()               {}
func (*GeneralList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GeneralList) GetTemperature() *CmdDef {
	if m != nil {
		return m.Temperature
	}
	return nil
}

func (m *GeneralList) GetVolume() *CmdDef {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *GeneralList) GetPoslition() *CmdDef {
	if m != nil {
		return m.Poslition
	}
	return nil
}

func (m *GeneralList) GetClose() *CmdDef {
	if m != nil {
		return m.Close
	}
	return nil
}

func (m *GeneralList) GetOpen() *CmdDef {
	if m != nil {
		return m.Open
	}
	return nil
}

func (m *GeneralList) GetOnlyOpen() *CmdDef {
	if m != nil {
		return m.OnlyOpen
	}
	return nil
}

func (m *GeneralList) GetQuery() *CmdDef {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *GeneralList) GetPulse() *CmdDef {
	if m != nil {
		return m.Pulse
	}
	return nil
}

func (m *GeneralList) GetSwitch() *CmdDef {
	if m != nil {
		return m.Switch
	}
	return nil
}

func (m *GeneralList) GetWindDirection() *CmdDef {
	if m != nil {
		return m.WindDirection
	}
	return nil
}

func (m *GeneralList) GetMode() *CmdDef {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (m *GeneralList) GetSensitivity() *CmdDef {
	if m != nil {
		return m.Sensitivity
	}
	return nil
}

type GeneralState struct {
	Switch         string     `protobuf:"bytes,1,opt,name=Switch" json:"Switch,omitempty"`
	Temperature    string     `protobuf:"bytes,2,opt,name=Temperature" json:"Temperature,omitempty"`
	Volume         string     `protobuf:"bytes,3,opt,name=Volume" json:"Volume,omitempty"`
	Poslition      string     `protobuf:"bytes,4,opt,name=Poslition" json:"Poslition,omitempty"`
	O2             string     `protobuf:"bytes,5,opt,name=O2" json:"O2,omitempty"`
	CO2            string     `protobuf:"bytes,6,opt,name=CO2" json:"CO2,omitempty"`
	CO             string     `protobuf:"bytes,7,opt,name=CO" json:"CO,omitempty"`
	WindDirection  string     `protobuf:"bytes,8,opt,name=WindDirection" json:"WindDirection,omitempty"`
	Mode           string     `protobuf:"bytes,9,opt,name=Mode" json:"Mode,omitempty"`
	Sensitivity    string     `protobuf:"bytes,10,opt,name=Sensitivity" json:"Sensitivity,omitempty"`
	LockState      string     `protobuf:"bytes,11,opt,name=LockState" json:"LockState,omitempty"`
	Beatingofheart string     `protobuf:"bytes,12,opt,name=Beatingofheart" json:"Beatingofheart,omitempty"`
	Brigness       string     `protobuf:"bytes,13,opt,name=Brigness" json:"Brigness,omitempty"`
	Alarm          *AlarmList `protobuf:"bytes,14,opt,name=Alarm" json:"Alarm,omitempty"`
}

func (m *GeneralState) Reset()                    { *m = GeneralState{} }
func (m *GeneralState) String() string            { return proto.CompactTextString(m) }
func (*GeneralState) ProtoMessage()               {}
func (*GeneralState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GeneralState) GetSwitch() string {
	if m != nil {
		return m.Switch
	}
	return ""
}

func (m *GeneralState) GetTemperature() string {
	if m != nil {
		return m.Temperature
	}
	return ""
}

func (m *GeneralState) GetVolume() string {
	if m != nil {
		return m.Volume
	}
	return ""
}

func (m *GeneralState) GetPoslition() string {
	if m != nil {
		return m.Poslition
	}
	return ""
}

func (m *GeneralState) GetO2() string {
	if m != nil {
		return m.O2
	}
	return ""
}

func (m *GeneralState) GetCO2() string {
	if m != nil {
		return m.CO2
	}
	return ""
}

func (m *GeneralState) GetCO() string {
	if m != nil {
		return m.CO
	}
	return ""
}

func (m *GeneralState) GetWindDirection() string {
	if m != nil {
		return m.WindDirection
	}
	return ""
}

func (m *GeneralState) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *GeneralState) GetSensitivity() string {
	if m != nil {
		return m.Sensitivity
	}
	return ""
}

func (m *GeneralState) GetLockState() string {
	if m != nil {
		return m.LockState
	}
	return ""
}

func (m *GeneralState) GetBeatingofheart() string {
	if m != nil {
		return m.Beatingofheart
	}
	return ""
}

func (m *GeneralState) GetBrigness() string {
	if m != nil {
		return m.Brigness
	}
	return ""
}

func (m *GeneralState) GetAlarm() *AlarmList {
	if m != nil {
		return m.Alarm
	}
	return nil
}

type MultimediaList struct {
	Path         *CmdDef   `protobuf:"bytes,1,opt,name=Path" json:"Path,omitempty"`
	Press        *CmdDef   `protobuf:"bytes,2,opt,name=Press" json:"Press,omitempty"`
	Switch       *CmdDef   `protobuf:"bytes,3,opt,name=Switch" json:"Switch,omitempty"`
	Sort         *CmdDef   `protobuf:"bytes,4,opt,name=Sort" json:"Sort,omitempty"`
	Scenario     *CmdDef   `protobuf:"bytes,5,opt,name=Scenario" json:"Scenario,omitempty"`
	Channel      *CmdDef   `protobuf:"bytes,6,opt,name=Channel" json:"Channel,omitempty"`
	StartChannel *CmdDef   `protobuf:"bytes,7,opt,name=StartChannel" json:"StartChannel,omitempty"`
	EndChannel   *CmdDef   `protobuf:"bytes,8,opt,name=EndChannel" json:"EndChannel,omitempty"`
	Volume       *CmdDef   `protobuf:"bytes,9,opt,name=Volume" json:"Volume,omitempty"`
	Mute         *CmdDef   `protobuf:"bytes,10,opt,name=Mute" json:"Mute,omitempty"`
	Mode         *CmdDef   `protobuf:"bytes,11,opt,name=Mode" json:"Mode,omitempty"`
	MeetingName  *CmdDef   `protobuf:"bytes,12,opt,name=MeetingName" json:"MeetingName,omitempty"`
	State        *CmdDef   `protobuf:"bytes,13,opt,name=State" json:"State,omitempty"`
	Data         *DataParm `protobuf:"bytes,14,opt,name=Data" json:"Data,omitempty"`
}

func (m *MultimediaList) Reset()                    { *m = MultimediaList{} }
func (m *MultimediaList) String() string            { return proto.CompactTextString(m) }
func (*MultimediaList) ProtoMessage()               {}
func (*MultimediaList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MultimediaList) GetPath() *CmdDef {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *MultimediaList) GetPress() *CmdDef {
	if m != nil {
		return m.Press
	}
	return nil
}

func (m *MultimediaList) GetSwitch() *CmdDef {
	if m != nil {
		return m.Switch
	}
	return nil
}

func (m *MultimediaList) GetSort() *CmdDef {
	if m != nil {
		return m.Sort
	}
	return nil
}

func (m *MultimediaList) GetScenario() *CmdDef {
	if m != nil {
		return m.Scenario
	}
	return nil
}

func (m *MultimediaList) GetChannel() *CmdDef {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *MultimediaList) GetStartChannel() *CmdDef {
	if m != nil {
		return m.StartChannel
	}
	return nil
}

func (m *MultimediaList) GetEndChannel() *CmdDef {
	if m != nil {
		return m.EndChannel
	}
	return nil
}

func (m *MultimediaList) GetVolume() *CmdDef {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *MultimediaList) GetMute() *CmdDef {
	if m != nil {
		return m.Mute
	}
	return nil
}

func (m *MultimediaList) GetMode() *CmdDef {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (m *MultimediaList) GetMeetingName() *CmdDef {
	if m != nil {
		return m.MeetingName
	}
	return nil
}

func (m *MultimediaList) GetState() *CmdDef {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *MultimediaList) GetData() *DataParm {
	if m != nil {
		return m.Data
	}
	return nil
}

type DataParm struct {
	DevType     string `protobuf:"bytes,1,opt,name=DevType" json:"DevType,omitempty"`
	DevIp       string `protobuf:"bytes,2,opt,name=DevIp" json:"DevIp,omitempty"`
	DevPort     string `protobuf:"bytes,3,opt,name=DevPort" json:"DevPort,omitempty"`
	DevUsername string `protobuf:"bytes,4,opt,name=DevUsername" json:"DevUsername,omitempty"`
	DevPassword string `protobuf:"bytes,5,opt,name=DevPassword" json:"DevPassword,omitempty"`
}

func (m *DataParm) Reset()                    { *m = DataParm{} }
func (m *DataParm) String() string            { return proto.CompactTextString(m) }
func (*DataParm) ProtoMessage()               {}
func (*DataParm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DataParm) GetDevType() string {
	if m != nil {
		return m.DevType
	}
	return ""
}

func (m *DataParm) GetDevIp() string {
	if m != nil {
		return m.DevIp
	}
	return ""
}

func (m *DataParm) GetDevPort() string {
	if m != nil {
		return m.DevPort
	}
	return ""
}

func (m *DataParm) GetDevUsername() string {
	if m != nil {
		return m.DevUsername
	}
	return ""
}

func (m *DataParm) GetDevPassword() string {
	if m != nil {
		return m.DevPassword
	}
	return ""
}

type MultimediaState struct {
	Volume *VolumeState `protobuf:"bytes,1,opt,name=Volume" json:"Volume,omitempty"`
	Data   *DataParm    `protobuf:"bytes,2,opt,name=Data" json:"Data,omitempty"`
}

func (m *MultimediaState) Reset()                    { *m = MultimediaState{} }
func (m *MultimediaState) String() string            { return proto.CompactTextString(m) }
func (*MultimediaState) ProtoMessage()               {}
func (*MultimediaState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *MultimediaState) GetVolume() *VolumeState {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *MultimediaState) GetData() *DataParm {
	if m != nil {
		return m.Data
	}
	return nil
}

type VolumeState struct {
	Output *OutputState `protobuf:"bytes,1,opt,name=Output" json:"Output,omitempty"`
	Input  *OutputState `protobuf:"bytes,2,opt,name=Input" json:"Input,omitempty"`
}

func (m *VolumeState) Reset()                    { *m = VolumeState{} }
func (m *VolumeState) String() string            { return proto.CompactTextString(m) }
func (*VolumeState) ProtoMessage()               {}
func (*VolumeState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *VolumeState) GetOutput() *OutputState {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *VolumeState) GetInput() *OutputState {
	if m != nil {
		return m.Input
	}
	return nil
}

type OutputState struct {
	ChannelValue []*ChannelValue `protobuf:"bytes,1,rep,name=ChannelValue" json:"ChannelValue,omitempty"`
}

func (m *OutputState) Reset()                    { *m = OutputState{} }
func (m *OutputState) String() string            { return proto.CompactTextString(m) }
func (*OutputState) ProtoMessage()               {}
func (*OutputState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *OutputState) GetChannelValue() []*ChannelValue {
	if m != nil {
		return m.ChannelValue
	}
	return nil
}

type ChannelValue struct {
	Channel string `protobuf:"bytes,1,opt,name=Channel" json:"Channel,omitempty"`
	Value   string `protobuf:"bytes,2,opt,name=Value" json:"Value,omitempty"`
}

func (m *ChannelValue) Reset()                    { *m = ChannelValue{} }
func (m *ChannelValue) String() string            { return proto.CompactTextString(m) }
func (*ChannelValue) ProtoMessage()               {}
func (*ChannelValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ChannelValue) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *ChannelValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type AlarmList struct {
	GasAlarm            *CmdDef `protobuf:"bytes,1,opt,name=GasAlarm" json:"GasAlarm,omitempty"`
	SmokeAlarm          *CmdDef `protobuf:"bytes,2,opt,name=SmokeAlarm" json:"SmokeAlarm,omitempty"`
	ShockAlarm          *CmdDef `protobuf:"bytes,3,opt,name=ShockAlarm" json:"ShockAlarm,omitempty"`
	LeakAlarm           *CmdDef `protobuf:"bytes,4,opt,name=LeakAlarm" json:"LeakAlarm,omitempty"`
	FallAlarm           *CmdDef `protobuf:"bytes,5,opt,name=FallAlarm" json:"FallAlarm,omitempty"`
	HeartAlarm          *CmdDef `protobuf:"bytes,6,opt,name=HeartAlarm" json:"HeartAlarm,omitempty"`
	PoslitionAlarm      *CmdDef `protobuf:"bytes,7,opt,name=PoslitionAlarm" json:"PoslitionAlarm,omitempty"`
	LowTemperatureAlarm *CmdDef `protobuf:"bytes,8,opt,name=LowTemperatureAlarm" json:"LowTemperatureAlarm,omitempty"`
	CoAlarm             *CmdDef `protobuf:"bytes,9,opt,name=CoAlarm" json:"CoAlarm,omitempty"`
	EarmarkAlarm        *CmdDef `protobuf:"bytes,10,opt,name=EarmarkAlarm" json:"EarmarkAlarm,omitempty"`
	CollarAlarm         *CmdDef `protobuf:"bytes,11,opt,name=CollarAlarm" json:"CollarAlarm,omitempty"`
}

func (m *AlarmList) Reset()                    { *m = AlarmList{} }
func (m *AlarmList) String() string            { return proto.CompactTextString(m) }
func (*AlarmList) ProtoMessage()               {}
func (*AlarmList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *AlarmList) GetGasAlarm() *CmdDef {
	if m != nil {
		return m.GasAlarm
	}
	return nil
}

func (m *AlarmList) GetSmokeAlarm() *CmdDef {
	if m != nil {
		return m.SmokeAlarm
	}
	return nil
}

func (m *AlarmList) GetShockAlarm() *CmdDef {
	if m != nil {
		return m.ShockAlarm
	}
	return nil
}

func (m *AlarmList) GetLeakAlarm() *CmdDef {
	if m != nil {
		return m.LeakAlarm
	}
	return nil
}

func (m *AlarmList) GetFallAlarm() *CmdDef {
	if m != nil {
		return m.FallAlarm
	}
	return nil
}

func (m *AlarmList) GetHeartAlarm() *CmdDef {
	if m != nil {
		return m.HeartAlarm
	}
	return nil
}

func (m *AlarmList) GetPoslitionAlarm() *CmdDef {
	if m != nil {
		return m.PoslitionAlarm
	}
	return nil
}

func (m *AlarmList) GetLowTemperatureAlarm() *CmdDef {
	if m != nil {
		return m.LowTemperatureAlarm
	}
	return nil
}

func (m *AlarmList) GetCoAlarm() *CmdDef {
	if m != nil {
		return m.CoAlarm
	}
	return nil
}

func (m *AlarmList) GetEarmarkAlarm() *CmdDef {
	if m != nil {
		return m.EarmarkAlarm
	}
	return nil
}

func (m *AlarmList) GetCollarAlarm() *CmdDef {
	if m != nil {
		return m.CollarAlarm
	}
	return nil
}

type FarmState struct {
	N                  string `protobuf:"bytes,1,opt,name=N" json:"N,omitempty"`
	P                  string `protobuf:"bytes,2,opt,name=P" json:"P,omitempty"`
	K                  string `protobuf:"bytes,3,opt,name=K" json:"K,omitempty"`
	O2                 string `protobuf:"bytes,4,opt,name=O2" json:"O2,omitempty"`
	CO2                string `protobuf:"bytes,5,opt,name=CO2" json:"CO2,omitempty"`
	CO                 string `protobuf:"bytes,6,opt,name=CO" json:"CO,omitempty"`
	Illumination       string `protobuf:"bytes,7,opt,name=Illumination" json:"Illumination,omitempty"`
	WindDirection      string `protobuf:"bytes,8,opt,name=WindDirection" json:"WindDirection,omitempty"`
	PH                 string `protobuf:"bytes,9,opt,name=PH" json:"PH,omitempty"`
	AirPressure        string `protobuf:"bytes,10,opt,name=AirPressure" json:"AirPressure,omitempty"`
	Flow               string `protobuf:"bytes,11,opt,name=Flow" json:"Flow,omitempty"`
	Temperature        string `protobuf:"bytes,12,opt,name=Temperature" json:"Temperature,omitempty"`
	EarmarkTemperature string `protobuf:"bytes,13,opt,name=EarmarkTemperature" json:"EarmarkTemperature,omitempty"`
	Poslition          string `protobuf:"bytes,14,opt,name=Poslition" json:"Poslition,omitempty"`
	CollarPoslition    string `protobuf:"bytes,15,opt,name=CollarPoslition" json:"CollarPoslition,omitempty"`
	ValveSwitch        string `protobuf:"bytes,16,opt,name=ValveSwitch" json:"ValveSwitch,omitempty"`
	FlowSwitch         string `protobuf:"bytes,17,opt,name=FlowSwitch" json:"FlowSwitch,omitempty"`
	WarmUpSwitch       string `protobuf:"bytes,18,opt,name=WarmUpSwitch" json:"WarmUpSwitch,omitempty"`
	ShadeTheSunSwitch  string `protobuf:"bytes,19,opt,name=ShadeTheSunSwitch" json:"ShadeTheSunSwitch,omitempty"`
	RainSwitch         string `protobuf:"bytes,20,opt,name=rainSwitch" json:"rainSwitch,omitempty"`
}

func (m *FarmState) Reset()                    { *m = FarmState{} }
func (m *FarmState) String() string            { return proto.CompactTextString(m) }
func (*FarmState) ProtoMessage()               {}
func (*FarmState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *FarmState) GetN() string {
	if m != nil {
		return m.N
	}
	return ""
}

func (m *FarmState) GetP() string {
	if m != nil {
		return m.P
	}
	return ""
}

func (m *FarmState) GetK() string {
	if m != nil {
		return m.K
	}
	return ""
}

func (m *FarmState) GetO2() string {
	if m != nil {
		return m.O2
	}
	return ""
}

func (m *FarmState) GetCO2() string {
	if m != nil {
		return m.CO2
	}
	return ""
}

func (m *FarmState) GetCO() string {
	if m != nil {
		return m.CO
	}
	return ""
}

func (m *FarmState) GetIllumination() string {
	if m != nil {
		return m.Illumination
	}
	return ""
}

func (m *FarmState) GetWindDirection() string {
	if m != nil {
		return m.WindDirection
	}
	return ""
}

func (m *FarmState) GetPH() string {
	if m != nil {
		return m.PH
	}
	return ""
}

func (m *FarmState) GetAirPressure() string {
	if m != nil {
		return m.AirPressure
	}
	return ""
}

func (m *FarmState) GetFlow() string {
	if m != nil {
		return m.Flow
	}
	return ""
}

func (m *FarmState) GetTemperature() string {
	if m != nil {
		return m.Temperature
	}
	return ""
}

func (m *FarmState) GetEarmarkTemperature() string {
	if m != nil {
		return m.EarmarkTemperature
	}
	return ""
}

func (m *FarmState) GetPoslition() string {
	if m != nil {
		return m.Poslition
	}
	return ""
}

func (m *FarmState) GetCollarPoslition() string {
	if m != nil {
		return m.CollarPoslition
	}
	return ""
}

func (m *FarmState) GetValveSwitch() string {
	if m != nil {
		return m.ValveSwitch
	}
	return ""
}

func (m *FarmState) GetFlowSwitch() string {
	if m != nil {
		return m.FlowSwitch
	}
	return ""
}

func (m *FarmState) GetWarmUpSwitch() string {
	if m != nil {
		return m.WarmUpSwitch
	}
	return ""
}

func (m *FarmState) GetShadeTheSunSwitch() string {
	if m != nil {
		return m.ShadeTheSunSwitch
	}
	return ""
}

func (m *FarmState) GetRainSwitch() string {
	if m != nil {
		return m.RainSwitch
	}
	return ""
}

type FarmList struct {
	ValveSwitch       *CmdDef `protobuf:"bytes,1,opt,name=ValveSwitch" json:"ValveSwitch,omitempty"`
	FlowSwitch        *CmdDef `protobuf:"bytes,2,opt,name=FlowSwitch" json:"FlowSwitch,omitempty"`
	WarmUpSwitch      *CmdDef `protobuf:"bytes,3,opt,name=WarmUpSwitch" json:"WarmUpSwitch,omitempty"`
	ShadeTheSunSwitch *CmdDef `protobuf:"bytes,4,opt,name=ShadeTheSunSwitch" json:"ShadeTheSunSwitch,omitempty"`
	RainSwitch        *CmdDef `protobuf:"bytes,5,opt,name=rainSwitch" json:"rainSwitch,omitempty"`
}

func (m *FarmList) Reset()                    { *m = FarmList{} }
func (m *FarmList) String() string            { return proto.CompactTextString(m) }
func (*FarmList) ProtoMessage()               {}
func (*FarmList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *FarmList) GetValveSwitch() *CmdDef {
	if m != nil {
		return m.ValveSwitch
	}
	return nil
}

func (m *FarmList) GetFlowSwitch() *CmdDef {
	if m != nil {
		return m.FlowSwitch
	}
	return nil
}

func (m *FarmList) GetWarmUpSwitch() *CmdDef {
	if m != nil {
		return m.WarmUpSwitch
	}
	return nil
}

func (m *FarmList) GetShadeTheSunSwitch() *CmdDef {
	if m != nil {
		return m.ShadeTheSunSwitch
	}
	return nil
}

func (m *FarmList) GetRainSwitch() *CmdDef {
	if m != nil {
		return m.RainSwitch
	}
	return nil
}

type LightList struct {
	Switch       *CmdDef     `protobuf:"bytes,1,opt,name=Switch" json:"Switch,omitempty"`
	WorkMode     *CmdDef     `protobuf:"bytes,2,opt,name=WorkMode" json:"WorkMode,omitempty"`
	Bright       *CmdDef     `protobuf:"bytes,3,opt,name=Bright" json:"Bright,omitempty"`
	Temp         *CmdDef     `protobuf:"bytes,4,opt,name=Temp" json:"Temp,omitempty"`
	Colour       *CmdDef     `protobuf:"bytes,5,opt,name=Colour" json:"Colour,omitempty"`
	Scene        *CmdDef     `protobuf:"bytes,6,opt,name=Scene" json:"Scene,omitempty"`
	SceneData    *CmdDef     `protobuf:"bytes,7,opt,name=SceneData" json:"SceneData,omitempty"`
	ControlData  *CmdDef     `protobuf:"bytes,8,opt,name=ControlData" json:"ControlData,omitempty"`
	CountClose   *CmdDef     `protobuf:"bytes,9,opt,name=CountClose" json:"CountClose,omitempty"`
	CountOpen    *CmdDef     `protobuf:"bytes,10,opt,name=CountOpen" json:"CountOpen,omitempty"`
	Control      *CmdDef     `protobuf:"bytes,11,opt,name=Control" json:"Control,omitempty"`
	Sleep        *CmdDef     `protobuf:"bytes,12,opt,name=Sleep" json:"Sleep,omitempty"`
	WakeUp       *CmdDef     `protobuf:"bytes,13,opt,name=WakeUp" json:"WakeUp,omitempty"`
	PowerMemory  *CmdDef     `protobuf:"bytes,14,opt,name=PowerMemory" json:"PowerMemory,omitempty"`
	DoNotdisturb *CmdDef     `protobuf:"bytes,15,opt,name=DoNotdisturb" json:"DoNotdisturb,omitempty"`
	MicMusic     *CmdDef     `protobuf:"bytes,16,opt,name=MicMusic" json:"MicMusic,omitempty"`
	Music        *CmdDef     `protobuf:"bytes,17,opt,name=Music" json:"Music,omitempty"`
	MusicData    *CmdDef     `protobuf:"bytes,18,opt,name=MusicData" json:"MusicData,omitempty"`
	LightExtra   *LightExtra `protobuf:"bytes,19,opt,name=LightExtra" json:"LightExtra,omitempty"`
}

func (m *LightList) Reset()                    { *m = LightList{} }
func (m *LightList) String() string            { return proto.CompactTextString(m) }
func (*LightList) ProtoMessage()               {}
func (*LightList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *LightList) GetSwitch() *CmdDef {
	if m != nil {
		return m.Switch
	}
	return nil
}

func (m *LightList) GetWorkMode() *CmdDef {
	if m != nil {
		return m.WorkMode
	}
	return nil
}

func (m *LightList) GetBright() *CmdDef {
	if m != nil {
		return m.Bright
	}
	return nil
}

func (m *LightList) GetTemp() *CmdDef {
	if m != nil {
		return m.Temp
	}
	return nil
}

func (m *LightList) GetColour() *CmdDef {
	if m != nil {
		return m.Colour
	}
	return nil
}

func (m *LightList) GetScene() *CmdDef {
	if m != nil {
		return m.Scene
	}
	return nil
}

func (m *LightList) GetSceneData() *CmdDef {
	if m != nil {
		return m.SceneData
	}
	return nil
}

func (m *LightList) GetControlData() *CmdDef {
	if m != nil {
		return m.ControlData
	}
	return nil
}

func (m *LightList) GetCountClose() *CmdDef {
	if m != nil {
		return m.CountClose
	}
	return nil
}

func (m *LightList) GetCountOpen() *CmdDef {
	if m != nil {
		return m.CountOpen
	}
	return nil
}

func (m *LightList) GetControl() *CmdDef {
	if m != nil {
		return m.Control
	}
	return nil
}

func (m *LightList) GetSleep() *CmdDef {
	if m != nil {
		return m.Sleep
	}
	return nil
}

func (m *LightList) GetWakeUp() *CmdDef {
	if m != nil {
		return m.WakeUp
	}
	return nil
}

func (m *LightList) GetPowerMemory() *CmdDef {
	if m != nil {
		return m.PowerMemory
	}
	return nil
}

func (m *LightList) GetDoNotdisturb() *CmdDef {
	if m != nil {
		return m.DoNotdisturb
	}
	return nil
}

func (m *LightList) GetMicMusic() *CmdDef {
	if m != nil {
		return m.MicMusic
	}
	return nil
}

func (m *LightList) GetMusic() *CmdDef {
	if m != nil {
		return m.Music
	}
	return nil
}

func (m *LightList) GetMusicData() *CmdDef {
	if m != nil {
		return m.MusicData
	}
	return nil
}

func (m *LightList) GetLightExtra() *LightExtra {
	if m != nil {
		return m.LightExtra
	}
	return nil
}

type LightExtra struct {
	SwitchGradint    *CmdDef `protobuf:"bytes,1,opt,name=SwitchGradint" json:"SwitchGradint,omitempty"`
	MixLightScene    *CmdDef `protobuf:"bytes,2,opt,name=MixLightScene" json:"MixLightScene,omitempty"`
	MixRgbcw         *CmdDef `protobuf:"bytes,3,opt,name=MixRgbcw" json:"MixRgbcw,omitempty"`
	SegmentDimming   *CmdDef `protobuf:"bytes,4,opt,name=SegmentDimming" json:"SegmentDimming,omitempty"`
	SwitchNightLight *CmdDef `protobuf:"bytes,5,opt,name=SwitchNightLight" json:"SwitchNightLight,omitempty"`
	CycleTiming      *CmdDef `protobuf:"bytes,6,opt,name=CycleTiming" json:"CycleTiming,omitempty"`
	RandomTiming     *CmdDef `protobuf:"bytes,7,opt,name=RandomTiming" json:"RandomTiming,omitempty"`
	CountDown        *CmdDef `protobuf:"bytes,8,opt,name=CountDown" json:"CountDown,omitempty"`
}

func (m *LightExtra) Reset()                    { *m = LightExtra{} }
func (m *LightExtra) String() string            { return proto.CompactTextString(m) }
func (*LightExtra) ProtoMessage()               {}
func (*LightExtra) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *LightExtra) GetSwitchGradint() *CmdDef {
	if m != nil {
		return m.SwitchGradint
	}
	return nil
}

func (m *LightExtra) GetMixLightScene() *CmdDef {
	if m != nil {
		return m.MixLightScene
	}
	return nil
}

func (m *LightExtra) GetMixRgbcw() *CmdDef {
	if m != nil {
		return m.MixRgbcw
	}
	return nil
}

func (m *LightExtra) GetSegmentDimming() *CmdDef {
	if m != nil {
		return m.SegmentDimming
	}
	return nil
}

func (m *LightExtra) GetSwitchNightLight() *CmdDef {
	if m != nil {
		return m.SwitchNightLight
	}
	return nil
}

func (m *LightExtra) GetCycleTiming() *CmdDef {
	if m != nil {
		return m.CycleTiming
	}
	return nil
}

func (m *LightExtra) GetRandomTiming() *CmdDef {
	if m != nil {
		return m.RandomTiming
	}
	return nil
}

func (m *LightExtra) GetCountDown() *CmdDef {
	if m != nil {
		return m.CountDown
	}
	return nil
}

type LightState struct {
	Sleep            string `protobuf:"bytes,1,opt,name=Sleep" json:"Sleep,omitempty"`
	WakeUp           string `protobuf:"bytes,2,opt,name=WakeUp" json:"WakeUp,omitempty"`
	PowerMemory      string `protobuf:"bytes,3,opt,name=PowerMemory" json:"PowerMemory,omitempty"`
	DoNotdisturb     string `protobuf:"bytes,4,opt,name=DoNotdisturb" json:"DoNotdisturb,omitempty"`
	SceneData        string `protobuf:"bytes,5,opt,name=SceneData" json:"SceneData,omitempty"`
	Switch           string `protobuf:"bytes,6,opt,name=Switch" json:"Switch,omitempty"`
	WorkMode         string `protobuf:"bytes,7,opt,name=WorkMode" json:"WorkMode,omitempty"`
	Bright           string `protobuf:"bytes,8,opt,name=Bright" json:"Bright,omitempty"`
	Temp             string `protobuf:"bytes,9,opt,name=Temp" json:"Temp,omitempty"`
	Colour           string `protobuf:"bytes,10,opt,name=Colour" json:"Colour,omitempty"`
	MicMusic         string `protobuf:"bytes,11,opt,name=MicMusic" json:"MicMusic,omitempty"`
	SwitchGradint    string `protobuf:"bytes,12,opt,name=SwitchGradint" json:"SwitchGradint,omitempty"`
	MixLightScene    string `protobuf:"bytes,13,opt,name=MixLightScene" json:"MixLightScene,omitempty"`
	MixRgbcw         string `protobuf:"bytes,14,opt,name=MixRgbcw" json:"MixRgbcw,omitempty"`
	SegmentDimming   string `protobuf:"bytes,15,opt,name=SegmentDimming" json:"SegmentDimming,omitempty"`
	SwitchNightLight string `protobuf:"bytes,16,opt,name=SwitchNightLight" json:"SwitchNightLight,omitempty"`
	CycleTiming      string `protobuf:"bytes,17,opt,name=CycleTiming" json:"CycleTiming,omitempty"`
	RandomTiming     string `protobuf:"bytes,18,opt,name=RandomTiming" json:"RandomTiming,omitempty"`
	CountDown        string `protobuf:"bytes,19,opt,name=CountDown" json:"CountDown,omitempty"`
}

func (m *LightState) Reset()                    { *m = LightState{} }
func (m *LightState) String() string            { return proto.CompactTextString(m) }
func (*LightState) ProtoMessage()               {}
func (*LightState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *LightState) GetSleep() string {
	if m != nil {
		return m.Sleep
	}
	return ""
}

func (m *LightState) GetWakeUp() string {
	if m != nil {
		return m.WakeUp
	}
	return ""
}

func (m *LightState) GetPowerMemory() string {
	if m != nil {
		return m.PowerMemory
	}
	return ""
}

func (m *LightState) GetDoNotdisturb() string {
	if m != nil {
		return m.DoNotdisturb
	}
	return ""
}

func (m *LightState) GetSceneData() string {
	if m != nil {
		return m.SceneData
	}
	return ""
}

func (m *LightState) GetSwitch() string {
	if m != nil {
		return m.Switch
	}
	return ""
}

func (m *LightState) GetWorkMode() string {
	if m != nil {
		return m.WorkMode
	}
	return ""
}

func (m *LightState) GetBright() string {
	if m != nil {
		return m.Bright
	}
	return ""
}

func (m *LightState) GetTemp() string {
	if m != nil {
		return m.Temp
	}
	return ""
}

func (m *LightState) GetColour() string {
	if m != nil {
		return m.Colour
	}
	return ""
}

func (m *LightState) GetMicMusic() string {
	if m != nil {
		return m.MicMusic
	}
	return ""
}

func (m *LightState) GetSwitchGradint() string {
	if m != nil {
		return m.SwitchGradint
	}
	return ""
}

func (m *LightState) GetMixLightScene() string {
	if m != nil {
		return m.MixLightScene
	}
	return ""
}

func (m *LightState) GetMixRgbcw() string {
	if m != nil {
		return m.MixRgbcw
	}
	return ""
}

func (m *LightState) GetSegmentDimming() string {
	if m != nil {
		return m.SegmentDimming
	}
	return ""
}

func (m *LightState) GetSwitchNightLight() string {
	if m != nil {
		return m.SwitchNightLight
	}
	return ""
}

func (m *LightState) GetCycleTiming() string {
	if m != nil {
		return m.CycleTiming
	}
	return ""
}

func (m *LightState) GetRandomTiming() string {
	if m != nil {
		return m.RandomTiming
	}
	return ""
}

func (m *LightState) GetCountDown() string {
	if m != nil {
		return m.CountDown
	}
	return ""
}

type AirConditioningList struct {
	Switch                   *CmdDef `protobuf:"bytes,1,opt,name=Switch" json:"Switch,omitempty"`
	AirConditioningMode      *CmdDef `protobuf:"bytes,2,opt,name=AirConditioningMode" json:"AirConditioningMode,omitempty"`
	AirConditioningFlowSpeed *CmdDef `protobuf:"bytes,3,opt,name=AirConditioningFlowSpeed" json:"AirConditioningFlowSpeed,omitempty"`
	Anion                    *CmdDef `protobuf:"bytes,4,opt,name=Anion" json:"Anion,omitempty"`
	ChildLock                *CmdDef `protobuf:"bytes,5,opt,name=ChildLock" json:"ChildLock,omitempty"`
	Light                    *CmdDef `protobuf:"bytes,6,opt,name=Light" json:"Light,omitempty"`
	Uv                       *CmdDef `protobuf:"bytes,7,opt,name=Uv" json:"Uv,omitempty"`
	Wet                      *CmdDef `protobuf:"bytes,8,opt,name=Wet" json:"Wet,omitempty"`
	FliterReset              *CmdDef `protobuf:"bytes,9,opt,name=FliterReset" json:"FliterReset,omitempty"`
	SetTemp                  *CmdDef `protobuf:"bytes,10,opt,name=SetTemp" json:"SetTemp,omitempty"`
	SetHumi                  *CmdDef `protobuf:"bytes,11,opt,name=SetHumi" json:"SetHumi,omitempty"`
	SleepMode                *CmdDef `protobuf:"bytes,12,opt,name=SleepMode" json:"SleepMode,omitempty"`
	ConstantTemp             *CmdDef `protobuf:"bytes,13,opt,name=ConstantTemp" json:"ConstantTemp,omitempty"`
	ConstantHume             *CmdDef `protobuf:"bytes,14,opt,name=ConstantHume" json:"ConstantHume,omitempty"`
	ConstantFresh            *CmdDef `protobuf:"bytes,15,opt,name=ConstantFresh" json:"ConstantFresh,omitempty"`
	FreshFanSpeed            *CmdDef `protobuf:"bytes,16,opt,name=FreshFanSpeed" json:"FreshFanSpeed,omitempty"`
}

func (m *AirConditioningList) Reset()                    { *m = AirConditioningList{} }
func (m *AirConditioningList) String() string            { return proto.CompactTextString(m) }
func (*AirConditioningList) ProtoMessage()               {}
func (*AirConditioningList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *AirConditioningList) GetSwitch() *CmdDef {
	if m != nil {
		return m.Switch
	}
	return nil
}

func (m *AirConditioningList) GetAirConditioningMode() *CmdDef {
	if m != nil {
		return m.AirConditioningMode
	}
	return nil
}

func (m *AirConditioningList) GetAirConditioningFlowSpeed() *CmdDef {
	if m != nil {
		return m.AirConditioningFlowSpeed
	}
	return nil
}

func (m *AirConditioningList) GetAnion() *CmdDef {
	if m != nil {
		return m.Anion
	}
	return nil
}

func (m *AirConditioningList) GetChildLock() *CmdDef {
	if m != nil {
		return m.ChildLock
	}
	return nil
}

func (m *AirConditioningList) GetLight() *CmdDef {
	if m != nil {
		return m.Light
	}
	return nil
}

func (m *AirConditioningList) GetUv() *CmdDef {
	if m != nil {
		return m.Uv
	}
	return nil
}

func (m *AirConditioningList) GetWet() *CmdDef {
	if m != nil {
		return m.Wet
	}
	return nil
}

func (m *AirConditioningList) GetFliterReset() *CmdDef {
	if m != nil {
		return m.FliterReset
	}
	return nil
}

func (m *AirConditioningList) GetSetTemp() *CmdDef {
	if m != nil {
		return m.SetTemp
	}
	return nil
}

func (m *AirConditioningList) GetSetHumi() *CmdDef {
	if m != nil {
		return m.SetHumi
	}
	return nil
}

func (m *AirConditioningList) GetSleepMode() *CmdDef {
	if m != nil {
		return m.SleepMode
	}
	return nil
}

func (m *AirConditioningList) GetConstantTemp() *CmdDef {
	if m != nil {
		return m.ConstantTemp
	}
	return nil
}

func (m *AirConditioningList) GetConstantHume() *CmdDef {
	if m != nil {
		return m.ConstantHume
	}
	return nil
}

func (m *AirConditioningList) GetConstantFresh() *CmdDef {
	if m != nil {
		return m.ConstantFresh
	}
	return nil
}

func (m *AirConditioningList) GetFreshFanSpeed() *CmdDef {
	if m != nil {
		return m.FreshFanSpeed
	}
	return nil
}

type AirConditioningState struct {
	Switch                   string `protobuf:"bytes,1,opt,name=Switch" json:"Switch,omitempty"`
	PM25                     string `protobuf:"bytes,2,opt,name=PM25" json:"PM25,omitempty"`
	AirConditioningMode      string `protobuf:"bytes,3,opt,name=AirConditioningMode" json:"AirConditioningMode,omitempty"`
	AirConditioningFlowSpeed string `protobuf:"bytes,4,opt,name=AirConditioningFlowSpeed" json:"AirConditioningFlowSpeed,omitempty"`
	FilterLife               string `protobuf:"bytes,5,opt,name=FilterLife" json:"FilterLife,omitempty"`
	Anion                    string `protobuf:"bytes,6,opt,name=Anion" json:"Anion,omitempty"`
	ChildLock                string `protobuf:"bytes,7,opt,name=ChildLock" json:"ChildLock,omitempty"`
	Light                    string `protobuf:"bytes,8,opt,name=Light" json:"Light,omitempty"`
	Uv                       string `protobuf:"bytes,9,opt,name=Uv" json:"Uv,omitempty"`
	Wet                      string `protobuf:"bytes,10,opt,name=Wet" json:"Wet,omitempty"`
	FliterReset              string `protobuf:"bytes,11,opt,name=FliterReset" json:"FliterReset,omitempty"`
	IndoorTemp               string `protobuf:"bytes,12,opt,name=IndoorTemp" json:"IndoorTemp,omitempty"`
	OutdoorTemp              string `protobuf:"bytes,13,opt,name=OutdoorTemp" json:"OutdoorTemp,omitempty"`
	IndoorHumidity           string `protobuf:"bytes,14,opt,name=IndoorHumidity" json:"IndoorHumidity,omitempty"`
	OutdoorHumidity          string `protobuf:"bytes,15,opt,name=OutdoorHumidity" json:"OutdoorHumidity,omitempty"`
	CO2                      string `protobuf:"bytes,16,opt,name=CO2" json:"CO2,omitempty"`
	Ch2OValue                string `protobuf:"bytes,17,opt,name=Ch2oValue" json:"Ch2oValue,omitempty"`
	Fault                    string `protobuf:"bytes,18,opt,name=Fault" json:"Fault,omitempty"`
}

func (m *AirConditioningState) Reset()                    { *m = AirConditioningState{} }
func (m *AirConditioningState) String() string            { return proto.CompactTextString(m) }
func (*AirConditioningState) ProtoMessage()               {}
func (*AirConditioningState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *AirConditioningState) GetSwitch() string {
	if m != nil {
		return m.Switch
	}
	return ""
}

func (m *AirConditioningState) GetPM25() string {
	if m != nil {
		return m.PM25
	}
	return ""
}

func (m *AirConditioningState) GetAirConditioningMode() string {
	if m != nil {
		return m.AirConditioningMode
	}
	return ""
}

func (m *AirConditioningState) GetAirConditioningFlowSpeed() string {
	if m != nil {
		return m.AirConditioningFlowSpeed
	}
	return ""
}

func (m *AirConditioningState) GetFilterLife() string {
	if m != nil {
		return m.FilterLife
	}
	return ""
}

func (m *AirConditioningState) GetAnion() string {
	if m != nil {
		return m.Anion
	}
	return ""
}

func (m *AirConditioningState) GetChildLock() string {
	if m != nil {
		return m.ChildLock
	}
	return ""
}

func (m *AirConditioningState) GetLight() string {
	if m != nil {
		return m.Light
	}
	return ""
}

func (m *AirConditioningState) GetUv() string {
	if m != nil {
		return m.Uv
	}
	return ""
}

func (m *AirConditioningState) GetWet() string {
	if m != nil {
		return m.Wet
	}
	return ""
}

func (m *AirConditioningState) GetFliterReset() string {
	if m != nil {
		return m.FliterReset
	}
	return ""
}

func (m *AirConditioningState) GetIndoorTemp() string {
	if m != nil {
		return m.IndoorTemp
	}
	return ""
}

func (m *AirConditioningState) GetOutdoorTemp() string {
	if m != nil {
		return m.OutdoorTemp
	}
	return ""
}

func (m *AirConditioningState) GetIndoorHumidity() string {
	if m != nil {
		return m.IndoorHumidity
	}
	return ""
}

func (m *AirConditioningState) GetOutdoorHumidity() string {
	if m != nil {
		return m.OutdoorHumidity
	}
	return ""
}

func (m *AirConditioningState) GetCO2() string {
	if m != nil {
		return m.CO2
	}
	return ""
}

func (m *AirConditioningState) GetCh2OValue() string {
	if m != nil {
		return m.Ch2OValue
	}
	return ""
}

func (m *AirConditioningState) GetFault() string {
	if m != nil {
		return m.Fault
	}
	return ""
}

type DevicedisconnReq struct {
	DeviceType string `protobuf:"bytes,1,opt,name=DeviceType" json:"DeviceType,omitempty"`
	DeviceId   string `protobuf:"bytes,2,opt,name=DeviceId" json:"DeviceId,omitempty"`
	MsgSeq     string `protobuf:"bytes,3,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
}

func (m *DevicedisconnReq) Reset()                    { *m = DevicedisconnReq{} }
func (m *DevicedisconnReq) String() string            { return proto.CompactTextString(m) }
func (*DevicedisconnReq) ProtoMessage()               {}
func (*DevicedisconnReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *DevicedisconnReq) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *DevicedisconnReq) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DevicedisconnReq) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func init() {
	proto.RegisterType((*DeviceregReq)(nil), "deviceshadow.DeviceregReq")
	proto.RegisterType((*DeviceregResp)(nil), "deviceshadow.DeviceregResp")
	proto.RegisterType((*BaseCmd)(nil), "deviceshadow.BaseCmd")
	proto.RegisterType((*GateData)(nil), "deviceshadow.GateData")
	proto.RegisterType((*CmdSetList)(nil), "deviceshadow.cmdSetList")
	proto.RegisterType((*CmdDef)(nil), "deviceshadow.CmdDef")
	proto.RegisterType((*DeviceList)(nil), "deviceshadow.deviceList")
	proto.RegisterType((*GeneralList)(nil), "deviceshadow.generalList")
	proto.RegisterType((*GeneralState)(nil), "deviceshadow.generalState")
	proto.RegisterType((*MultimediaList)(nil), "deviceshadow.multimediaList")
	proto.RegisterType((*DataParm)(nil), "deviceshadow.dataParm")
	proto.RegisterType((*MultimediaState)(nil), "deviceshadow.multimediaState")
	proto.RegisterType((*VolumeState)(nil), "deviceshadow.volumeState")
	proto.RegisterType((*OutputState)(nil), "deviceshadow.outputState")
	proto.RegisterType((*ChannelValue)(nil), "deviceshadow.channelValue")
	proto.RegisterType((*AlarmList)(nil), "deviceshadow.alarmList")
	proto.RegisterType((*FarmState)(nil), "deviceshadow.farmState")
	proto.RegisterType((*FarmList)(nil), "deviceshadow.farmList")
	proto.RegisterType((*LightList)(nil), "deviceshadow.lightList")
	proto.RegisterType((*LightExtra)(nil), "deviceshadow.lightExtra")
	proto.RegisterType((*LightState)(nil), "deviceshadow.lightState")
	proto.RegisterType((*AirConditioningList)(nil), "deviceshadow.airConditioningList")
	proto.RegisterType((*AirConditioningState)(nil), "deviceshadow.airConditioningState")
	proto.RegisterType((*DevicedisconnReq)(nil), "deviceshadow.DevicedisconnReq")
	proto.RegisterEnum("deviceshadow.DigitalCtl", DigitalCtl_name, DigitalCtl_value)
}

func init() { proto.RegisterFile("deviceshadow.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2726 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x5a, 0xcf, 0x6e, 0x1b, 0xc9,
	0xf1, 0xfe, 0xf1, 0x8f, 0x28, 0xb1, 0x48, 0x51, 0x52, 0x5b, 0xd0, 0x8f, 0x31, 0x14, 0x43, 0x19,
	0x18, 0x0b, 0xc1, 0xd8, 0x38, 0x0e, 0x77, 0x37, 0xd8, 0x2c, 0x82, 0x45, 0x2c, 0xd2, 0xb2, 0x85,
	0x15, 0x2d, 0x2e, 0x69, 0xd9, 0xe7, 0x36, 0xa7, 0x45, 0x0e, 0x34, 0x7f, 0xe8, 0xe6, 0x90, 0xb2,
	0xde, 0x23, 0x87, 0x5c, 0x02, 0x04, 0x39, 0xe7, 0x01, 0x02, 0xe4, 0x9c, 0x17, 0x48, 0xae, 0xb9,
	0x04, 0x7b, 0xcb, 0x65, 0x5f, 0x21, 0xa8, 0xae, 0x9e, 0x99, 0x9e, 0x11, 0xd9, 0x56, 0x90, 0x1b,
	0xbb, 0xe6, 0xab, 0xee, 0x9e, 0xea, 0xaa, 0xaf, 0xbf, 0xee, 0x21, 0x30, 0x57, 0x2c, 0xbd, 0xb1,
	0x98, 0x4f, 0xb9, 0x1b, 0xdd, 0x3c, 0x9d, 0xc9, 0x28, 0x8e, 0x58, 0xd3, 0xb4, 0x39, 0x7f, 0x2c,
	0x41, 0xb3, 0xa7, 0x0c, 0x52, 0x4c, 0x86, 0xe2, 0x03, 0x7b, 0x04, 0x40, 0xed, 0x37, 0xb7, 0x33,
	0xd1, 0x2e, 0x1d, 0x95, 0x8e, 0xeb, 0x43, 0xc3, 0xc2, 0x1e, 0xc3, 0x36, 0xb5, 0x86, 0x62, 0xd2,
	0x8d, 0x5c, 0xd1, 0x2e, 0x2b, 0x48, 0xde, 0xc8, 0x1e, 0xc2, 0x16, 0x19, 0xce, 0xdc, 0x76, 0x45,
	0x01, 0xd2, 0x36, 0x3b, 0x80, 0x5a, 0x7f, 0x3e, 0x19, 0x89, 0x0f, 0xed, 0xaa, 0x7a, 0xa2, 0x5b,
	0x68, 0x7f, 0x23, 0x82, 0xd9, 0x99, 0xdb, 0xde, 0x20, 0x3b, 0xb5, 0x9c, 0x1f, 0x4a, 0xc9, 0x90,
	0x6a, 0x8a, 0xf3, 0xd9, 0x27, 0xe7, 0x68, 0x8e, 0x5e, 0x2e, 0x8c, 0xfe, 0x08, 0xe0, 0x44, 0x46,
	0xd7, 0x42, 0x3e, 0x77, 0x5d, 0xa9, 0xe7, 0x66, 0x58, 0xd6, 0xce, 0xee, 0x18, 0x76, 0x46, 0x42,
	0x2e, 0x85, 0x1c, 0x2c, 0xde, 0xfb, 0xde, 0xf8, 0x3b, 0x71, 0xab, 0xa7, 0x59, 0x34, 0xe3, 0x08,
	0x03, 0xe9, 0x2d, 0x79, 0x2c, 0x10, 0x54, 0xa3, 0x11, 0x32, 0x0b, 0xdb, 0x87, 0x8d, 0x17, 0x52,
	0x46, 0xb2, 0xbd, 0xa9, 0x1e, 0x51, 0xc3, 0xf9, 0xa1, 0x0c, 0x9b, 0x27, 0x7c, 0x2e, 0xba, 0x81,
	0xfb, 0x3f, 0xbd, 0x5f, 0x0b, 0xca, 0x67, 0x33, 0xfd, 0x5e, 0xe5, 0xb3, 0xd9, 0xda, 0xf7, 0x61,
	0x50, 0xed, 0x73, 0x79, 0xad, 0x5f, 0x42, 0xfd, 0x66, 0xbb, 0x50, 0xe9, 0x06, 0xae, 0x9e, 0x72,
	0x25, 0x37, 0x93, 0x73, 0x6f, 0x1e, 0xeb, 0x09, 0x1b, 0x16, 0xec, 0xa5, 0xc7, 0x63, 0xde, 0xde,
	0xa2, 0x5e, 0xf0, 0x37, 0xce, 0x8e, 0x42, 0x72, 0xe6, 0xb6, 0xeb, 0x34, 0xbb, 0xa4, 0x8d, 0xcf,
	0x2e, 0xe7, 0x42, 0xbe, 0xe6, 0x81, 0x68, 0x03, 0x3d, 0x4b, 0xda, 0x59, 0x5c, 0x1a, 0x46, 0x5c,
	0x0a, 0xeb, 0xd5, 0x5c, 0xb5, 0x5e, 0x2f, 0x79, 0x8c, 0x91, 0xd8, 0xa6, 0xf7, 0xa3, 0x16, 0xf6,
	0xf6, 0x26, 0xba, 0x16, 0x61, 0xbb, 0x45, 0xbd, 0xa9, 0x86, 0xf3, 0xef, 0x12, 0x6c, 0x21, 0x40,
	0x4d, 0x34, 0x73, 0x2d, 0xad, 0x76, 0x2d, 0x1b, 0xae, 0x88, 0xa6, 0xd7, 0xd0, 0xc1, 0xd5, 0x2d,
	0x76, 0x08, 0xf5, 0x13, 0x7e, 0xad, 0x1f, 0x51, 0x8c, 0x33, 0x83, 0x11, 0xfe, 0x8d, 0x5c, 0xf8,
	0x9f, 0x41, 0xad, 0x1b, 0xb8, 0x23, 0x11, 0xb7, 0x6b, 0x47, 0x95, 0xe3, 0x46, 0xa7, 0xfd, 0x34,
	0x57, 0xaa, 0x63, 0xf5, 0x0c, 0x43, 0x3c, 0xd4, 0x38, 0xf4, 0xa0, 0xc0, 0xb7, 0x37, 0x57, 0x79,
	0xb8, 0xe9, 0xa2, 0x0c, 0x35, 0xce, 0x19, 0x00, 0x64, 0xfd, 0x24, 0x8b, 0x5b, 0xca, 0x16, 0x37,
	0xeb, 0xb1, 0x7c, 0xcf, 0x1e, 0x7f, 0x57, 0x52, 0xd3, 0xee, 0x89, 0x2b, 0xd6, 0x86, 0xcd, 0x6e,
	0xe0, 0xaa, 0x85, 0xa4, 0x2e, 0x93, 0x26, 0xfb, 0x0c, 0x5a, 0xb8, 0xa6, 0x3d, 0x71, 0x95, 0x00,
	0x28, 0x8e, 0x05, 0x2b, 0x86, 0xf9, 0x2d, 0xf7, 0x17, 0x42, 0xc7, 0x93, 0x1a, 0x18, 0xce, 0x17,
	0xe1, 0x22, 0xa0, 0x27, 0x3a, 0x9c, 0xa9, 0x01, 0x7d, 0x86, 0x3c, 0x9c, 0x08, 0x1d, 0x4d, 0x6a,
	0x38, 0xff, 0xaa, 0x01, 0x64, 0xb3, 0xcd, 0x95, 0x47, 0xa9, 0x50, 0x1e, 0x0c, 0xaa, 0xc6, 0x94,
	0xd4, 0x6f, 0xc4, 0x77, 0x79, 0x2c, 0x26, 0x91, 0xbc, 0x4d, 0xc8, 0x2a, 0x69, 0xe3, 0x80, 0x23,
	0x5f, 0x88, 0x99, 0x9e, 0x0a, 0x35, 0x28, 0x43, 0x16, 0xe3, 0x69, 0x32, 0x0d, 0xd5, 0x30, 0xd6,
	0xba, 0x96, 0x5b, 0xeb, 0xaf, 0x01, 0x7a, 0xde, 0xc4, 0x8b, 0xb9, 0xdf, 0x8d, 0x7d, 0x55, 0x44,
	0xad, 0x3b, 0xb1, 0x4e, 0x9f, 0x0f, 0x0d, 0x2c, 0xfb, 0x35, 0xc0, 0x4b, 0x11, 0x0a, 0x49, 0x9e,
	0x58, 0x64, 0x8d, 0xce, 0x4f, 0xf2, 0x9e, 0x13, 0x7a, 0xae, 0x96, 0xc9, 0x00, 0xb3, 0x6f, 0xa1,
	0xa9, 0x5b, 0xa3, 0x98, 0xc7, 0x42, 0x55, 0x62, 0xa3, 0xf3, 0x70, 0xa5, 0xb3, 0x42, 0x0c, 0x73,
	0x78, 0xf6, 0x05, 0x6c, 0x9d, 0x7b, 0x93, 0x69, 0x8c, 0x03, 0x83, 0xf2, 0xfd, 0xff, 0xbc, 0xaf,
	0x8f, 0x4f, 0xd5, 0xb0, 0x29, 0x10, 0xdf, 0x54, 0xfd, 0xa6, 0x21, 0x1b, 0xca, 0xad, 0xbd, 0xc2,
	0x8d, 0x06, 0x34, 0xb0, 0xec, 0x7b, 0x60, 0xcf, 0x3d, 0xd9, 0x8d, 0x42, 0xd7, 0x8b, 0xbd, 0x28,
	0xf4, 0xc2, 0x09, 0x0e, 0xdc, 0x54, 0x3d, 0xfc, 0x2c, 0xdf, 0x03, 0xcf, 0xe3, 0xd4, 0x14, 0x56,
	0x38, 0xb3, 0xb7, 0xb0, 0x5f, 0xb0, 0xd2, 0xb4, 0xb6, 0x55, 0xa7, 0x8e, 0xb5, 0x53, 0x9a, 0xe0,
	0x4a, 0x7f, 0xf6, 0x0c, 0x36, 0x4f, 0xb9, 0x0c, 0x70, 0x7e, 0x2d, 0xd5, 0xd5, 0x41, 0xbe, 0xab,
	0x2b, 0x2e, 0x03, 0x35, 0xa9, 0x04, 0xc6, 0xbe, 0x82, 0x3a, 0xfe, 0xa4, 0xe1, 0x77, 0x56, 0x05,
	0xf3, 0x2a, 0x79, 0x3c, 0xcc, 0x90, 0xec, 0x04, 0xb6, 0xfb, 0x0b, 0x3f, 0xf6, 0x02, 0xe1, 0x7a,
	0x1c, 0x87, 0xdb, 0x55, 0xae, 0x87, 0x79, 0xd7, 0x20, 0x85, 0xa8, 0x41, 0xf3, 0x2e, 0xec, 0x25,
	0xec, 0x64, 0x06, 0x9a, 0xc0, 0x9e, 0xea, 0xe5, 0xa7, 0xeb, 0x7a, 0xa1, 0x69, 0x14, 0xbd, 0x9c,
	0x7f, 0x54, 0xa1, 0x61, 0xe4, 0x1a, 0xfb, 0x15, 0x34, 0x70, 0x7f, 0x16, 0x92, 0xc7, 0x0b, 0x49,
	0x1c, 0xd0, 0xe8, 0xec, 0xe7, 0x3b, 0x25, 0xaa, 0x18, 0x9a, 0x40, 0xf6, 0x39, 0xd4, 0xde, 0x46,
	0xfe, 0x42, 0x97, 0xe0, 0x3a, 0x17, 0x8d, 0x61, 0x1d, 0xa8, 0x0f, 0xa2, 0xb9, 0xaf, 0x16, 0x40,
	0xd5, 0xe6, 0x3a, 0x87, 0x0c, 0xc6, 0x9e, 0xc0, 0x46, 0xd7, 0x8f, 0xe6, 0xc4, 0x1e, 0xeb, 0xf0,
	0x04, 0x61, 0xc7, 0x50, 0xbd, 0x98, 0x89, 0x50, 0xd5, 0xf1, 0x3a, 0xa8, 0x42, 0xb0, 0x67, 0xb0,
	0x75, 0x11, 0xfa, 0xb7, 0x0a, 0xbd, 0x69, 0x41, 0xa7, 0x28, 0x9c, 0xc7, 0xf7, 0x0b, 0x21, 0x6f,
	0x75, 0xdd, 0xae, 0x99, 0x87, 0x82, 0x20, 0x76, 0xb0, 0xf0, 0xe7, 0x49, 0x99, 0xae, 0xc1, 0x2a,
	0x08, 0x46, 0x70, 0x74, 0xe3, 0xc5, 0xe3, 0xa9, 0xae, 0xcb, 0x35, 0x11, 0x24, 0x0c, 0xfb, 0x06,
	0xb6, 0xdf, 0x79, 0xa1, 0xdb, 0xf3, 0xa4, 0x18, 0xab, 0x28, 0x36, 0x2c, 0x4e, 0x79, 0x28, 0x46,
	0xa7, 0x8f, 0x12, 0xaf, 0x69, 0x8b, 0x0e, 0x22, 0x30, 0x1b, 0x46, 0x22, 0x9c, 0x7b, 0xb1, 0xb7,
	0xf4, 0xe2, 0x5b, 0x5d, 0x62, 0x6b, 0xb2, 0xc1, 0x00, 0x3a, 0x7f, 0xa8, 0x40, 0xd3, 0x24, 0x21,
	0xb5, 0xcb, 0xd2, 0xcb, 0xe9, 0x3d, 0x59, 0xbf, 0xc6, 0x51, 0x3e, 0xdd, 0x88, 0xbe, 0x73, 0x89,
	0x75, 0x90, 0x26, 0x96, 0xde, 0x9f, 0x75, 0x0a, 0x1d, 0x9a, 0x29, 0xa4, 0x37, 0x94, 0x2c, 0x59,
	0x5a, 0x50, 0xbe, 0xe8, 0x68, 0x1a, 0x2f, 0x5f, 0x74, 0xd4, 0x2e, 0x79, 0xd1, 0x49, 0x25, 0xd0,
	0x45, 0x07, 0x11, 0xdd, 0x0b, 0x2d, 0x7d, 0xca, 0xdd, 0x0b, 0x14, 0xc0, 0xf9, 0x80, 0x92, 0xf6,
	0x29, 0x84, 0x8e, 0xe9, 0xd0, 0xd5, 0xb5, 0xbc, 0xc2, 0x20, 0x1d, 0xe5, 0x83, 0x44, 0xfa, 0xc7,
	0x34, 0xe1, 0x5c, 0xcf, 0xa3, 0xf1, 0x75, 0x46, 0x9f, 0xf5, 0x61, 0x66, 0xc0, 0x8d, 0xf5, 0x44,
	0xf0, 0xd8, 0x0b, 0x27, 0xd1, 0xd5, 0x54, 0x70, 0x19, 0x6b, 0x39, 0x54, 0xb0, 0xe2, 0x7e, 0x76,
	0x22, 0xbd, 0x49, 0x28, 0xe6, 0x73, 0x2d, 0x8a, 0xd2, 0x36, 0xfb, 0x39, 0x6c, 0x3c, 0xf7, 0xb9,
	0x0c, 0x34, 0x75, 0x15, 0x68, 0x88, 0xfb, 0x09, 0x77, 0x11, 0xca, 0xf9, 0xd3, 0x06, 0xb4, 0xf2,
	0x04, 0x83, 0x49, 0x31, 0xe0, 0xf1, 0xd4, 0x5a, 0xf1, 0x0a, 0xa1, 0x92, 0x5a, 0xe2, 0x24, 0xca,
	0xd6, 0xa4, 0x46, 0x88, 0x91, 0xd4, 0x95, 0x7b, 0x24, 0xf5, 0x31, 0x54, 0x47, 0x91, 0x8c, 0xad,
	0x15, 0xae, 0x10, 0x58, 0xb6, 0xa3, 0xb1, 0x08, 0xb9, 0xf4, 0x22, 0x6b, 0x91, 0xa7, 0x28, 0xf6,
	0x14, 0x36, 0xbb, 0x53, 0x1e, 0x86, 0xc2, 0x57, 0x59, 0xb0, 0xce, 0x21, 0x01, 0xb1, 0xaf, 0xa1,
	0x39, 0x8a, 0xb9, 0x8c, 0x13, 0x27, 0x1b, 0x39, 0xe4, 0x90, 0xec, 0x4b, 0x80, 0x17, 0xa1, 0x9b,
	0xf8, 0xd9, 0x58, 0xc2, 0xc0, 0x19, 0x04, 0x5a, 0xbf, 0x07, 0x81, 0x62, 0x09, 0x2f, 0x62, 0x61,
	0xa5, 0x0a, 0x85, 0x48, 0x8b, 0xbd, 0x71, 0x9f, 0x62, 0xef, 0x0b, 0x81, 0x19, 0xa7, 0xa4, 0x94,
	0x8d, 0x1d, 0x4c, 0x20, 0xe6, 0x83, 0xb9, 0x03, 0xaf, 0xc9, 0x07, 0xca, 0xf5, 0x27, 0xfa, 0x60,
	0xb1, 0x72, 0x87, 0x75, 0x79, 0xcc, 0x07, 0x5c, 0x06, 0x74, 0xe0, 0x70, 0x7e, 0x5f, 0x82, 0xad,
	0xc4, 0x84, 0xba, 0xb4, 0x27, 0x96, 0xc6, 0xc1, 0x29, 0x69, 0xa2, 0x68, 0xeb, 0x89, 0xe5, 0xd9,
	0x2c, 0x91, 0xf5, 0xaa, 0xa1, 0xf1, 0x03, 0xcc, 0xa6, 0x4a, 0x8a, 0xc7, 0x26, 0x96, 0x6b, 0x4f,
	0x2c, 0x51, 0xb4, 0x86, 0xf8, 0x9a, 0x44, 0x1d, 0xa6, 0x49, 0x23, 0x06, 0x7c, 0x3e, 0xbf, 0x89,
	0x64, 0x72, 0x6c, 0x35, 0x4d, 0xce, 0x0c, 0x76, 0x0a, 0x3b, 0x2b, 0xfb, 0x65, 0xba, 0x7e, 0xa5,
	0x55, 0x7a, 0x6e, 0xa9, 0x9e, 0xd1, 0x26, 0x9c, 0x2c, 0x62, 0x12, 0x8c, 0xf2, 0x3d, 0x82, 0xf1,
	0x01, 0x1a, 0x46, 0x17, 0x38, 0xda, 0xc5, 0x22, 0x9e, 0x2d, 0xe2, 0xd5, 0xa3, 0x45, 0xea, 0x99,
	0x1e, 0x8d, 0x80, 0xec, 0x17, 0xb0, 0x71, 0x16, 0xa2, 0x47, 0xf9, 0x53, 0x1e, 0x84, 0x73, 0xfa,
	0xd0, 0x30, 0xac, 0xa8, 0x3c, 0x75, 0xae, 0x92, 0x88, 0x2f, 0xa9, 0xc3, 0x45, 0x41, 0x79, 0x8e,
	0x0d, 0xc4, 0x30, 0x87, 0x77, 0xbe, 0x85, 0xa6, 0xf9, 0x54, 0x9d, 0x34, 0x74, 0x8d, 0x24, 0x27,
	0x0d, 0x5d, 0x0a, 0xe9, 0x09, 0xa2, 0x6c, 0x9c, 0x20, 0x9c, 0x1f, 0xab, 0x50, 0x4f, 0x89, 0x0c,
	0x09, 0xe0, 0x25, 0x9f, 0x13, 0xe7, 0xd9, 0x28, 0x2b, 0x45, 0x61, 0x59, 0x8e, 0x82, 0xe8, 0x5a,
	0x90, 0x8f, 0x8d, 0xbb, 0x0c, 0x9c, 0xf2, 0x9a, 0x46, 0xe3, 0x6b, 0xf2, 0xaa, 0x58, 0xbd, 0x52,
	0x1c, 0xea, 0x9b, 0x73, 0xc1, 0xb5, 0x93, 0x8d, 0xcd, 0x32, 0x18, 0xfa, 0x9c, 0x72, 0xdf, 0x27,
	0x1f, 0x1b, 0xa7, 0x65, 0x30, 0x9c, 0xdd, 0x2b, 0xdc, 0x1b, 0xc8, 0xc9, 0xc6, 0x6b, 0x06, 0x8e,
	0xfd, 0x06, 0x5a, 0xe9, 0x4e, 0x49, 0x9e, 0x36, 0x72, 0x2b, 0x60, 0xd9, 0x29, 0x3c, 0x38, 0x8f,
	0x6e, 0x8c, 0x2d, 0x9a, 0xba, 0xb0, 0xf1, 0xdc, 0x2a, 0x07, 0x45, 0xc8, 0x11, 0xf9, 0xd6, 0xad,
	0x84, 0x4c, 0x20, 0x24, 0xe4, 0x17, 0x5c, 0x06, 0x5c, 0xea, 0xb0, 0xda, 0xa8, 0x2f, 0x87, 0x44,
	0x62, 0xeb, 0x46, 0xbe, 0xcf, 0x25, 0x39, 0xda, 0x98, 0xd0, 0x04, 0x3a, 0x7f, 0xab, 0x42, 0x3d,
	0x55, 0xf0, 0xac, 0x09, 0xa5, 0xd7, 0x3a, 0x53, 0x4b, 0xaf, 0xb1, 0x35, 0xd0, 0xf9, 0x59, 0x1a,
	0x60, 0xeb, 0x3b, 0xcd, 0x33, 0xa5, 0xef, 0xb4, 0xf8, 0xa8, 0x16, 0xc5, 0xc7, 0x46, 0x51, 0x7c,
	0xd4, 0x52, 0xf1, 0xe1, 0x40, 0xf3, 0xcc, 0xf7, 0x17, 0x81, 0x17, 0x72, 0xa5, 0x3d, 0x48, 0x96,
	0xe4, 0x6c, 0xf7, 0x14, 0x28, 0x2d, 0x28, 0x0f, 0x5e, 0x69, 0x79, 0x52, 0x1e, 0xbc, 0x42, 0x2e,
	0x7b, 0xee, 0x49, 0xb5, 0x19, 0xa3, 0xc0, 0xd2, 0xe2, 0xc4, 0x30, 0xa1, 0xa4, 0x39, 0xf5, 0xa3,
	0x1b, 0xad, 0x4b, 0xd4, 0xef, 0xa2, 0x2c, 0x6b, 0xde, 0x95, 0x65, 0x4f, 0x81, 0xe9, 0x18, 0x9b,
	0x40, 0x92, 0x25, 0x2b, 0x9e, 0xe4, 0xe5, 0x5a, 0xab, 0x28, 0xd7, 0x8e, 0x61, 0x87, 0x02, 0x9f,
	0x61, 0x76, 0xe8, 0x16, 0xae, 0x60, 0xc6, 0x99, 0xbd, 0xe5, 0xfe, 0x52, 0x68, 0x55, 0xb1, 0x4b,
	0x33, 0x33, 0x4c, 0xec, 0x11, 0x00, 0xbe, 0x83, 0x06, 0xec, 0xd1, 0xcd, 0x52, 0x66, 0xc1, 0x58,
	0xbf, 0xe3, 0x32, 0xb8, 0x9c, 0x69, 0x04, 0xa3, 0x58, 0x9b, 0x36, 0xf6, 0x39, 0xec, 0x8d, 0xa6,
	0xdc, 0x15, 0x6f, 0xa6, 0x62, 0xb4, 0x08, 0x35, 0xf0, 0x81, 0x02, 0xde, 0x7d, 0x80, 0x23, 0x4a,
	0xee, 0x25, 0xb0, 0x7d, 0x1a, 0x31, 0xb3, 0x38, 0x7f, 0x2e, 0xc3, 0x56, 0x72, 0x7a, 0xc4, 0x64,
	0x34, 0x5f, 0xc0, 0x7a, 0xc0, 0x32, 0x5f, 0xeb, 0xcb, 0xdc, 0x6b, 0x59, 0xe9, 0xcb, 0x78, 0xd9,
	0xaf, 0x0b, 0x2f, 0x6b, 0x23, 0xb0, 0x7c, 0x08, 0x4e, 0x56, 0x85, 0xc0, 0x46, 0x65, 0x2b, 0x02,
	0xf3, 0x65, 0x2e, 0x30, 0x36, 0x4e, 0x33, 0xc3, 0xf5, 0xd7, 0x4d, 0xa8, 0xa7, 0xb7, 0x10, 0x86,
	0x82, 0x2c, 0xdd, 0x43, 0x41, 0x3e, 0x83, 0xad, 0x77, 0x91, 0xbc, 0xee, 0x27, 0x37, 0xd8, 0x6b,
	0xb7, 0x85, 0x04, 0x85, 0xfd, 0xa3, 0x8a, 0x9e, 0xc6, 0x76, 0x85, 0x4a, 0x18, 0x54, 0x53, 0x98,
	0xd5, 0x76, 0x85, 0x8a, 0x08, 0xec, 0xb7, 0x1b, 0xf9, 0xd1, 0x42, 0x5a, 0xdf, 0x5b, 0x63, 0x94,
	0x86, 0x1a, 0x8b, 0x50, 0x58, 0x39, 0x9c, 0x20, 0xb8, 0x51, 0xa8, 0x1f, 0x4a, 0x3b, 0xd8, 0x98,
	0x3b, 0x83, 0x11, 0x05, 0x86, 0xb1, 0x8c, 0xfc, 0xf4, 0x5e, 0xd7, 0x42, 0x81, 0x29, 0x10, 0x57,
	0xb0, 0x1b, 0x2d, 0xc2, 0x98, 0x4e, 0xde, 0x36, 0x9e, 0x36, 0x70, 0x38, 0x43, 0xd5, 0x52, 0xa7,
	0x6a, 0x1b, 0x4f, 0x67, 0x30, 0xda, 0x0e, 0xd4, 0xc0, 0x56, 0x82, 0x4e, 0x40, 0x2a, 0x62, 0xea,
	0x06, 0xaf, 0x69, 0x8d, 0x98, 0xba, 0xd7, 0xfb, 0x1c, 0x6a, 0xef, 0xf8, 0xb5, 0xb8, 0x9c, 0x59,
	0x25, 0xaa, 0xc6, 0x60, 0xac, 0x06, 0xd1, 0x8d, 0x90, 0x7d, 0x11, 0x44, 0xf2, 0x56, 0x4b, 0xd5,
	0x35, 0xb1, 0x32, 0x80, 0x58, 0x6b, 0xbd, 0xe8, 0x75, 0x14, 0xbb, 0xde, 0x3c, 0x5e, 0xc8, 0xf7,
	0xfa, 0x46, 0x68, 0x4d, 0xad, 0x99, 0x48, 0xcc, 0xda, 0xbe, 0x37, 0xee, 0x2f, 0xe6, 0xde, 0x58,
	0x5f, 0x06, 0xad, 0xc9, 0xda, 0x04, 0x85, 0x6f, 0x4f, 0xf0, 0x3d, 0xdb, 0xdb, 0x13, 0xb6, 0x03,
	0x75, 0xf5, 0x43, 0xad, 0x3c, 0xb3, 0xad, 0x46, 0x0a, 0x4b, 0x6f, 0xfc, 0x5e, 0x7c, 0x8c, 0x25,
	0x57, 0xcc, 0xb7, 0xfa, 0xc6, 0x4f, 0x3d, 0x1f, 0x1a, 0x58, 0xe7, 0x9f, 0x15, 0x80, 0xec, 0x11,
	0xfb, 0x06, 0xb6, 0xa9, 0x34, 0x5f, 0x4a, 0xee, 0x7a, 0x61, 0x6c, 0xad, 0xe2, 0x3c, 0x14, 0x7d,
	0xfb, 0xde, 0x47, 0xba, 0x4d, 0x54, 0xc5, 0x61, 0xab, 0xe8, 0x3c, 0x94, 0x42, 0xfa, 0x71, 0x38,
	0x79, 0x3f, 0xbe, 0xb1, 0x16, 0x76, 0x8a, 0x42, 0x55, 0x34, 0x12, 0x93, 0x40, 0x84, 0x71, 0xcf,
	0x0b, 0x02, 0x2f, 0x9c, 0x58, 0x8b, 0xbc, 0x80, 0x65, 0xbf, 0x85, 0x5d, 0x9a, 0xfc, 0x6b, 0x62,
	0x2e, 0x24, 0x14, 0x5b, 0xe1, 0xdf, 0x41, 0xab, 0x12, 0xbd, 0x1d, 0xfb, 0xe2, 0x8d, 0xa7, 0x06,
	0xaf, 0x59, 0x4b, 0x34, 0x03, 0x62, 0xda, 0x0d, 0x79, 0xe8, 0x46, 0x81, 0x76, 0xb4, 0x1e, 0x54,
	0x4d, 0x64, 0x5a, 0xa6, 0xbd, 0xe8, 0x26, 0xb4, 0x52, 0x42, 0x06, 0x73, 0xfe, 0x5e, 0xd5, 0xcb,
	0x4b, 0xa2, 0x28, 0xbd, 0x47, 0x2f, 0x99, 0xf7, 0xe8, 0x07, 0x69, 0xbd, 0x91, 0x42, 0x4a, 0x2a,
	0xeb, 0x28, 0x5f, 0x59, 0x24, 0x98, 0x72, 0x35, 0xe4, 0x14, 0x6a, 0x88, 0x44, 0x54, 0xbe, 0x5a,
	0x0e, 0x4d, 0xfe, 0x23, 0x51, 0x65, 0x30, 0x5d, 0x76, 0xd3, 0x54, 0xcb, 0xdd, 0x34, 0x3d, 0x34,
	0x76, 0x06, 0x92, 0x57, 0xd9, 0x1e, 0x70, 0x90, 0xee, 0x01, 0xa4, 0xa9, 0x12, 0xb6, 0x67, 0x9a,
	0xed, 0xf5, 0x6d, 0x8f, 0xe2, 0xf5, 0x83, 0x94, 0xd7, 0x49, 0x4b, 0x25, 0x0c, 0xfe, 0xd0, 0xa8,
	0x61, 0x92, 0x52, 0x59, 0xb5, 0x3e, 0x2e, 0x16, 0x01, 0x09, 0xaa, 0x42, 0xba, 0x3f, 0x2e, 0xa6,
	0x3b, 0xa9, 0xa9, 0x42, 0x62, 0x3f, 0x34, 0x12, 0xbb, 0x95, 0x8c, 0xa3, 0x53, 0xf8, 0xb3, 0x3b,
	0x29, 0x4c, 0x2a, 0xaa, 0x98, 0xac, 0x4f, 0x56, 0x24, 0x2b, 0x29, 0xa9, 0xbb, 0x69, 0x79, 0x94,
	0x4f, 0x4b, 0xd2, 0x53, 0xb9, 0x04, 0x74, 0x0a, 0x09, 0xa8, 0x05, 0x55, 0x2e, 0xd5, 0x0e, 0xcd,
	0x54, 0x23, 0x21, 0x65, 0x24, 0xd5, 0x8f, 0x35, 0x78, 0xb0, 0xe2, 0xfa, 0xff, 0xbf, 0xdc, 0xfb,
	0x4f, 0xe1, 0x41, 0xe1, 0x62, 0xff, 0x93, 0x32, 0x60, 0x95, 0x03, 0x1b, 0x40, 0xbb, 0x60, 0x56,
	0x82, 0x6a, 0x26, 0x84, 0x6b, 0xa5, 0x92, 0xb5, 0x5e, 0xc8, 0xd6, 0xcf, 0xc3, 0xe4, 0x9e, 0x72,
	0x2d, 0x5b, 0x2b, 0x88, 0x2a, 0xca, 0xa9, 0xe7, 0xbb, 0xe7, 0xd1, 0xf8, 0xda, 0x7e, 0x0c, 0x4c,
	0x61, 0xd8, 0x3f, 0x2d, 0xa2, 0x55, 0x3d, 0xd0, 0x7a, 0x3e, 0x86, 0xf2, 0xe5, 0xd2, 0x4a, 0x12,
	0xe5, 0xcb, 0x25, 0xfb, 0x0c, 0x2a, 0xef, 0x44, 0x6c, 0x25, 0x05, 0x04, 0x20, 0x69, 0x9d, 0xfa,
	0x5e, 0x2c, 0xe4, 0x50, 0xcc, 0x45, 0x6c, 0x15, 0x08, 0x26, 0x10, 0x77, 0xfb, 0x91, 0x88, 0x55,
	0x71, 0xd9, 0xf4, 0x41, 0x02, 0xd2, 0xf8, 0x57, 0x8b, 0xc0, 0xb3, 0xab, 0x03, 0x0d, 0x52, 0x1a,
	0x09, 0xa9, 0xe8, 0x93, 0xf7, 0xdc, 0x19, 0x0c, 0x89, 0xb4, 0x1b, 0x85, 0xf3, 0x98, 0x87, 0x34,
	0x31, 0x9b, 0x56, 0xc8, 0x21, 0x4d, 0xcf, 0x57, 0x8b, 0x40, 0x58, 0x25, 0x43, 0x0e, 0x89, 0x5b,
	0x5c, 0xd2, 0x3e, 0x95, 0x62, 0x3e, 0xb5, 0x8a, 0x86, 0x3c, 0x14, 0x7d, 0xd5, 0x8f, 0x53, 0x1e,
	0x52, 0x72, 0xda, 0xa4, 0x43, 0x1e, 0xea, 0xfc, 0xa5, 0x0a, 0xfb, 0xab, 0xbe, 0x8d, 0xad, 0xbd,
	0xa8, 0x67, 0x50, 0x1d, 0xf4, 0x3b, 0x5f, 0x25, 0x1f, 0x58, 0xf1, 0x37, 0x7b, 0xb6, 0xba, 0xe0,
	0x88, 0xd6, 0x57, 0x96, 0xd6, 0x37, 0x96, 0xd2, 0x22, 0xaa, 0x5f, 0x5f, 0x44, 0x78, 0xae, 0xf3,
	0xfc, 0x58, 0xc8, 0x73, 0xef, 0x2a, 0xf9, 0x50, 0x6c, 0x58, 0x70, 0x2b, 0xa2, 0x22, 0x23, 0xde,
	0xd7, 0xe5, 0x74, 0x68, 0x96, 0xd3, 0xa6, 0x26, 0x9e, 0xb4, 0x70, 0xf6, 0x93, 0xc2, 0x21, 0xde,
	0xd7, 0x25, 0xd2, 0x52, 0x25, 0xa2, 0xcf, 0xd0, 0x97, 0x4b, 0x3c, 0xbf, 0x63, 0x31, 0x10, 0xdf,
	0xab, 0xb4, 0x3f, 0xca, 0xa7, 0x3d, 0xf1, 0x7d, 0x2e, 0xc1, 0x1f, 0x01, 0x9c, 0x85, 0x6e, 0x14,
	0x49, 0x95, 0x4a, 0xfa, 0xff, 0x0d, 0x99, 0x05, 0x7b, 0xb8, 0x58, 0xc4, 0x29, 0x80, 0xa8, 0xde,
	0x34, 0x21, 0x99, 0x13, 0x1e, 0x13, 0xda, 0xf5, 0xe2, 0x5b, 0x4d, 0xf7, 0x05, 0x2b, 0x9e, 0x9d,
	0xb5, 0x5b, 0x0a, 0xd4, 0x67, 0xe7, 0x82, 0x39, 0xb9, 0x87, 0xd8, 0xcd, 0xee, 0x21, 0x54, 0x74,
	0x3a, 0x11, 0xdd, 0xb6, 0xed, 0x25, 0xd1, 0xd1, 0x06, 0x8c, 0xce, 0x29, 0x5f, 0xf8, 0xb1, 0x66,
	0x74, 0x6a, 0x38, 0x57, 0xb0, 0x4b, 0x9f, 0xdd, 0x5d, 0x6f, 0x3e, 0x8e, 0xc2, 0xf0, 0x3e, 0xff,
	0x2e, 0xb2, 0xfd, 0xb3, 0x25, 0xfb, 0xbc, 0x5e, 0x31, 0x3f, 0xaf, 0x3f, 0x79, 0x0f, 0x90, 0x7d,
	0x3e, 0x67, 0x2d, 0xf3, 0x93, 0xf9, 0xee, 0xff, 0xb1, 0x66, 0xf6, 0x1d, 0x7b, 0xb7, 0xc4, 0x0e,
	0x56, 0x7d, 0x66, 0xde, 0x2d, 0xb3, 0x46, 0xfa, 0x4d, 0x77, 0xb7, 0xc2, 0xf6, 0x0a, 0xdf, 0x5d,
	0x77, 0xab, 0xef, 0x6b, 0xea, 0xbf, 0x53, 0x5f, 0xfc, 0x27, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xeb,
	0xbd, 0x25, 0x51, 0x25, 0x00, 0x00,
}
