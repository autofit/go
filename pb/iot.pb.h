// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iot.proto

#ifndef PROTOBUF_iot_2eproto__INCLUDED
#define PROTOBUF_iot_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_iot_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[24];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsDeviceregReqImpl();
void InitDefaultsDeviceregReq();
void InitDefaultsDeviceregRespImpl();
void InitDefaultsDeviceregResp();
void InitDefaultsBaseCmdImpl();
void InitDefaultsBaseCmd();
void InitDefaultsGateDataImpl();
void InitDefaultsGateData();
void InitDefaultscmdSetListImpl();
void InitDefaultscmdSetList();
void InitDefaultsdeviceListImpl();
void InitDefaultsdeviceList();
void InitDefaultsgeneralListImpl();
void InitDefaultsgeneralList();
void InitDefaultsgeneralStateImpl();
void InitDefaultsgeneralState();
void InitDefaultsmultimediaListImpl();
void InitDefaultsmultimediaList();
void InitDefaultsdataParmImpl();
void InitDefaultsdataParm();
void InitDefaultsmultimediaStateImpl();
void InitDefaultsmultimediaState();
void InitDefaultsvolumeStateImpl();
void InitDefaultsvolumeState();
void InitDefaultsoutputStateImpl();
void InitDefaultsoutputState();
void InitDefaultschannelValueImpl();
void InitDefaultschannelValue();
void InitDefaultsalarmListImpl();
void InitDefaultsalarmList();
void InitDefaultsfarmStateImpl();
void InitDefaultsfarmState();
void InitDefaultsfarmListImpl();
void InitDefaultsfarmList();
void InitDefaultslightListImpl();
void InitDefaultslightList();
void InitDefaultslightExtraImpl();
void InitDefaultslightExtra();
void InitDefaultslightStateImpl();
void InitDefaultslightState();
void InitDefaultsairConditioningImpl();
void InitDefaultsairConditioning();
void InitDefaultsairConditioningListImpl();
void InitDefaultsairConditioningList();
void InitDefaultsairConditioningStateImpl();
void InitDefaultsairConditioningState();
void InitDefaultsDevicedisconnReqImpl();
void InitDefaultsDevicedisconnReq();
inline void InitDefaults() {
  InitDefaultsDeviceregReq();
  InitDefaultsDeviceregResp();
  InitDefaultsBaseCmd();
  InitDefaultsGateData();
  InitDefaultscmdSetList();
  InitDefaultsdeviceList();
  InitDefaultsgeneralList();
  InitDefaultsgeneralState();
  InitDefaultsmultimediaList();
  InitDefaultsdataParm();
  InitDefaultsmultimediaState();
  InitDefaultsvolumeState();
  InitDefaultsoutputState();
  InitDefaultschannelValue();
  InitDefaultsalarmList();
  InitDefaultsfarmState();
  InitDefaultsfarmList();
  InitDefaultslightList();
  InitDefaultslightExtra();
  InitDefaultslightState();
  InitDefaultsairConditioning();
  InitDefaultsairConditioningList();
  InitDefaultsairConditioningState();
  InitDefaultsDevicedisconnReq();
}
}  // namespace protobuf_iot_2eproto
namespace pb {
class BaseCmd;
class BaseCmdDefaultTypeInternal;
extern BaseCmdDefaultTypeInternal _BaseCmd_default_instance_;
class DevicedisconnReq;
class DevicedisconnReqDefaultTypeInternal;
extern DevicedisconnReqDefaultTypeInternal _DevicedisconnReq_default_instance_;
class DeviceregReq;
class DeviceregReqDefaultTypeInternal;
extern DeviceregReqDefaultTypeInternal _DeviceregReq_default_instance_;
class DeviceregResp;
class DeviceregRespDefaultTypeInternal;
extern DeviceregRespDefaultTypeInternal _DeviceregResp_default_instance_;
class GateData;
class GateDataDefaultTypeInternal;
extern GateDataDefaultTypeInternal _GateData_default_instance_;
class airConditioning;
class airConditioningDefaultTypeInternal;
extern airConditioningDefaultTypeInternal _airConditioning_default_instance_;
class airConditioningList;
class airConditioningListDefaultTypeInternal;
extern airConditioningListDefaultTypeInternal _airConditioningList_default_instance_;
class airConditioningState;
class airConditioningStateDefaultTypeInternal;
extern airConditioningStateDefaultTypeInternal _airConditioningState_default_instance_;
class alarmList;
class alarmListDefaultTypeInternal;
extern alarmListDefaultTypeInternal _alarmList_default_instance_;
class channelValue;
class channelValueDefaultTypeInternal;
extern channelValueDefaultTypeInternal _channelValue_default_instance_;
class cmdSetList;
class cmdSetListDefaultTypeInternal;
extern cmdSetListDefaultTypeInternal _cmdSetList_default_instance_;
class dataParm;
class dataParmDefaultTypeInternal;
extern dataParmDefaultTypeInternal _dataParm_default_instance_;
class deviceList;
class deviceListDefaultTypeInternal;
extern deviceListDefaultTypeInternal _deviceList_default_instance_;
class farmList;
class farmListDefaultTypeInternal;
extern farmListDefaultTypeInternal _farmList_default_instance_;
class farmState;
class farmStateDefaultTypeInternal;
extern farmStateDefaultTypeInternal _farmState_default_instance_;
class generalList;
class generalListDefaultTypeInternal;
extern generalListDefaultTypeInternal _generalList_default_instance_;
class generalState;
class generalStateDefaultTypeInternal;
extern generalStateDefaultTypeInternal _generalState_default_instance_;
class lightExtra;
class lightExtraDefaultTypeInternal;
extern lightExtraDefaultTypeInternal _lightExtra_default_instance_;
class lightList;
class lightListDefaultTypeInternal;
extern lightListDefaultTypeInternal _lightList_default_instance_;
class lightState;
class lightStateDefaultTypeInternal;
extern lightStateDefaultTypeInternal _lightState_default_instance_;
class multimediaList;
class multimediaListDefaultTypeInternal;
extern multimediaListDefaultTypeInternal _multimediaList_default_instance_;
class multimediaState;
class multimediaStateDefaultTypeInternal;
extern multimediaStateDefaultTypeInternal _multimediaState_default_instance_;
class outputState;
class outputStateDefaultTypeInternal;
extern outputStateDefaultTypeInternal _outputState_default_instance_;
class volumeState;
class volumeStateDefaultTypeInternal;
extern volumeStateDefaultTypeInternal _volumeState_default_instance_;
}  // namespace pb
namespace pb {

enum airConditioningMode {
  manual = 0,
  auto_ = 1,
  comfortable = 2,
  msleep = 3,
  airConditioningMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  airConditioningMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool airConditioningMode_IsValid(int value);
const airConditioningMode airConditioningMode_MIN = manual;
const airConditioningMode airConditioningMode_MAX = msleep;
const int airConditioningMode_ARRAYSIZE = airConditioningMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* airConditioningMode_descriptor();
inline const ::std::string& airConditioningMode_Name(airConditioningMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    airConditioningMode_descriptor(), value);
}
inline bool airConditioningMode_Parse(
    const ::std::string& name, airConditioningMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<airConditioningMode>(
    airConditioningMode_descriptor(), name, value);
}
enum airConditioningFlowSpeed {
  fsleep = 0,
  low = 1,
  mid = 2,
  high = 3,
  airConditioningFlowSpeed_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  airConditioningFlowSpeed_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool airConditioningFlowSpeed_IsValid(int value);
const airConditioningFlowSpeed airConditioningFlowSpeed_MIN = fsleep;
const airConditioningFlowSpeed airConditioningFlowSpeed_MAX = high;
const int airConditioningFlowSpeed_ARRAYSIZE = airConditioningFlowSpeed_MAX + 1;

const ::google::protobuf::EnumDescriptor* airConditioningFlowSpeed_descriptor();
inline const ::std::string& airConditioningFlowSpeed_Name(airConditioningFlowSpeed value) {
  return ::google::protobuf::internal::NameOfEnum(
    airConditioningFlowSpeed_descriptor(), value);
}
inline bool airConditioningFlowSpeed_Parse(
    const ::std::string& name, airConditioningFlowSpeed* value) {
  return ::google::protobuf::internal::ParseNamedEnum<airConditioningFlowSpeed>(
    airConditioningFlowSpeed_descriptor(), name, value);
}
enum sceneMode {
  scene_1 = 0,
  scene_2 = 1,
  scene_3 = 2,
  scene_4 = 3,
  scene_5 = 4,
  sceneMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  sceneMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool sceneMode_IsValid(int value);
const sceneMode sceneMode_MIN = scene_1;
const sceneMode sceneMode_MAX = scene_5;
const int sceneMode_ARRAYSIZE = sceneMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* sceneMode_descriptor();
inline const ::std::string& sceneMode_Name(sceneMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    sceneMode_descriptor(), value);
}
inline bool sceneMode_Parse(
    const ::std::string& name, sceneMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<sceneMode>(
    sceneMode_descriptor(), name, value);
}
enum workMode {
  white = 0,
  colour = 1,
  scene = 2,
  music = 3,
  workMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  workMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool workMode_IsValid(int value);
const workMode workMode_MIN = white;
const workMode workMode_MAX = music;
const int workMode_ARRAYSIZE = workMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* workMode_descriptor();
inline const ::std::string& workMode_Name(workMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    workMode_descriptor(), value);
}
inline bool workMode_Parse(
    const ::std::string& name, workMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<workMode>(
    workMode_descriptor(), name, value);
}
enum digitalCtl {
  GeneralCtl = 0,
  LightCtl = 1,
  AirConditioningCtl = 2,
  FarmCtl = 3,
  MultimediaCtl = 4,
  digitalCtl_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  digitalCtl_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool digitalCtl_IsValid(int value);
const digitalCtl digitalCtl_MIN = GeneralCtl;
const digitalCtl digitalCtl_MAX = MultimediaCtl;
const int digitalCtl_ARRAYSIZE = digitalCtl_MAX + 1;

const ::google::protobuf::EnumDescriptor* digitalCtl_descriptor();
inline const ::std::string& digitalCtl_Name(digitalCtl value) {
  return ::google::protobuf::internal::NameOfEnum(
    digitalCtl_descriptor(), value);
}
inline bool digitalCtl_Parse(
    const ::std::string& name, digitalCtl* value) {
  return ::google::protobuf::internal::ParseNamedEnum<digitalCtl>(
    digitalCtl_descriptor(), name, value);
}
// ===================================================================

class DeviceregReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.DeviceregReq) */ {
 public:
  DeviceregReq();
  virtual ~DeviceregReq();

  DeviceregReq(const DeviceregReq& from);

  inline DeviceregReq& operator=(const DeviceregReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceregReq(DeviceregReq&& from) noexcept
    : DeviceregReq() {
    *this = ::std::move(from);
  }

  inline DeviceregReq& operator=(DeviceregReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceregReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceregReq* internal_default_instance() {
    return reinterpret_cast<const DeviceregReq*>(
               &_DeviceregReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DeviceregReq* other);
  friend void swap(DeviceregReq& a, DeviceregReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceregReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceregReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceregReq& from);
  void MergeFrom(const DeviceregReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceregReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string DeviceRegCode = 2;
  void clear_deviceregcode();
  static const int kDeviceRegCodeFieldNumber = 2;
  const ::std::string& deviceregcode() const;
  void set_deviceregcode(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceregcode(::std::string&& value);
  #endif
  void set_deviceregcode(const char* value);
  void set_deviceregcode(const char* value, size_t size);
  ::std::string* mutable_deviceregcode();
  ::std::string* release_deviceregcode();
  void set_allocated_deviceregcode(::std::string* deviceregcode);

  // string DeviceId = 3;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 3;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // string MsgSeq = 4;
  void clear_msgseq();
  static const int kMsgSeqFieldNumber = 4;
  const ::std::string& msgseq() const;
  void set_msgseq(const ::std::string& value);
  #if LANG_CXX11
  void set_msgseq(::std::string&& value);
  #endif
  void set_msgseq(const char* value);
  void set_msgseq(const char* value, size_t size);
  ::std::string* mutable_msgseq();
  ::std::string* release_msgseq();
  void set_allocated_msgseq(::std::string* msgseq);

  // string TempId = 5;
  void clear_tempid();
  static const int kTempIdFieldNumber = 5;
  const ::std::string& tempid() const;
  void set_tempid(const ::std::string& value);
  #if LANG_CXX11
  void set_tempid(::std::string&& value);
  #endif
  void set_tempid(const char* value);
  void set_tempid(const char* value, size_t size);
  ::std::string* mutable_tempid();
  ::std::string* release_tempid();
  void set_allocated_tempid(::std::string* tempid);

  // uint32 DeviceType = 1;
  void clear_devicetype();
  static const int kDeviceTypeFieldNumber = 1;
  ::google::protobuf::uint32 devicetype() const;
  void set_devicetype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.DeviceregReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr deviceregcode_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::google::protobuf::internal::ArenaStringPtr msgseq_;
  ::google::protobuf::internal::ArenaStringPtr tempid_;
  ::google::protobuf::uint32 devicetype_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultsDeviceregReqImpl();
};
// -------------------------------------------------------------------

class DeviceregResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.DeviceregResp) */ {
 public:
  DeviceregResp();
  virtual ~DeviceregResp();

  DeviceregResp(const DeviceregResp& from);

  inline DeviceregResp& operator=(const DeviceregResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceregResp(DeviceregResp&& from) noexcept
    : DeviceregResp() {
    *this = ::std::move(from);
  }

  inline DeviceregResp& operator=(DeviceregResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceregResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceregResp* internal_default_instance() {
    return reinterpret_cast<const DeviceregResp*>(
               &_DeviceregResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DeviceregResp* other);
  friend void swap(DeviceregResp& a, DeviceregResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceregResp* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceregResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceregResp& from);
  void MergeFrom(const DeviceregResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceregResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string DeviceId = 2;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 2;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // string BrokerAddr = 3;
  void clear_brokeraddr();
  static const int kBrokerAddrFieldNumber = 3;
  const ::std::string& brokeraddr() const;
  void set_brokeraddr(const ::std::string& value);
  #if LANG_CXX11
  void set_brokeraddr(::std::string&& value);
  #endif
  void set_brokeraddr(const char* value);
  void set_brokeraddr(const char* value, size_t size);
  ::std::string* mutable_brokeraddr();
  ::std::string* release_brokeraddr();
  void set_allocated_brokeraddr(::std::string* brokeraddr);

  // string MsgSeq = 4;
  void clear_msgseq();
  static const int kMsgSeqFieldNumber = 4;
  const ::std::string& msgseq() const;
  void set_msgseq(const ::std::string& value);
  #if LANG_CXX11
  void set_msgseq(::std::string&& value);
  #endif
  void set_msgseq(const char* value);
  void set_msgseq(const char* value, size_t size);
  ::std::string* mutable_msgseq();
  ::std::string* release_msgseq();
  void set_allocated_msgseq(::std::string* msgseq);

  // string ServerPublicKey = 5;
  void clear_serverpublickey();
  static const int kServerPublicKeyFieldNumber = 5;
  const ::std::string& serverpublickey() const;
  void set_serverpublickey(const ::std::string& value);
  #if LANG_CXX11
  void set_serverpublickey(::std::string&& value);
  #endif
  void set_serverpublickey(const char* value);
  void set_serverpublickey(const char* value, size_t size);
  ::std::string* mutable_serverpublickey();
  ::std::string* release_serverpublickey();
  void set_allocated_serverpublickey(::std::string* serverpublickey);

  // string PrivateKey = 6;
  void clear_privatekey();
  static const int kPrivateKeyFieldNumber = 6;
  const ::std::string& privatekey() const;
  void set_privatekey(const ::std::string& value);
  #if LANG_CXX11
  void set_privatekey(::std::string&& value);
  #endif
  void set_privatekey(const char* value);
  void set_privatekey(const char* value, size_t size);
  ::std::string* mutable_privatekey();
  ::std::string* release_privatekey();
  void set_allocated_privatekey(::std::string* privatekey);

  // string Error = 7;
  void clear_error();
  static const int kErrorFieldNumber = 7;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // uint32 DeviceType = 1;
  void clear_devicetype();
  static const int kDeviceTypeFieldNumber = 1;
  ::google::protobuf::uint32 devicetype() const;
  void set_devicetype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.DeviceregResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::google::protobuf::internal::ArenaStringPtr brokeraddr_;
  ::google::protobuf::internal::ArenaStringPtr msgseq_;
  ::google::protobuf::internal::ArenaStringPtr serverpublickey_;
  ::google::protobuf::internal::ArenaStringPtr privatekey_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::uint32 devicetype_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultsDeviceregRespImpl();
};
// -------------------------------------------------------------------

class BaseCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.BaseCmd) */ {
 public:
  BaseCmd();
  virtual ~BaseCmd();

  BaseCmd(const BaseCmd& from);

  inline BaseCmd& operator=(const BaseCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BaseCmd(BaseCmd&& from) noexcept
    : BaseCmd() {
    *this = ::std::move(from);
  }

  inline BaseCmd& operator=(BaseCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseCmd* internal_default_instance() {
    return reinterpret_cast<const BaseCmd*>(
               &_BaseCmd_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(BaseCmd* other);
  friend void swap(BaseCmd& a, BaseCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BaseCmd* New() const PROTOBUF_FINAL { return New(NULL); }

  BaseCmd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BaseCmd& from);
  void MergeFrom(const BaseCmd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BaseCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string DeviceId = 2;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 2;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // string Ip = 3;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string MsgSeq = 4;
  void clear_msgseq();
  static const int kMsgSeqFieldNumber = 4;
  const ::std::string& msgseq() const;
  void set_msgseq(const ::std::string& value);
  #if LANG_CXX11
  void set_msgseq(::std::string&& value);
  #endif
  void set_msgseq(const char* value);
  void set_msgseq(const char* value, size_t size);
  ::std::string* mutable_msgseq();
  ::std::string* release_msgseq();
  void set_allocated_msgseq(::std::string* msgseq);

  // string Cmd = 6;
  void clear_cmd();
  static const int kCmdFieldNumber = 6;
  const ::std::string& cmd() const;
  void set_cmd(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd(::std::string&& value);
  #endif
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  ::std::string* mutable_cmd();
  ::std::string* release_cmd();
  void set_allocated_cmd(::std::string* cmd);

  // string DeviceList = 7;
  void clear_devicelist();
  static const int kDeviceListFieldNumber = 7;
  const ::std::string& devicelist() const;
  void set_devicelist(const ::std::string& value);
  #if LANG_CXX11
  void set_devicelist(::std::string&& value);
  #endif
  void set_devicelist(const char* value);
  void set_devicelist(const char* value, size_t size);
  ::std::string* mutable_devicelist();
  ::std::string* release_devicelist();
  void set_allocated_devicelist(::std::string* devicelist);

  // string Data = 8;
  void clear_data();
  static const int kDataFieldNumber = 8;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string ServerId = 9;
  void clear_serverid();
  static const int kServerIdFieldNumber = 9;
  const ::std::string& serverid() const;
  void set_serverid(const ::std::string& value);
  #if LANG_CXX11
  void set_serverid(::std::string&& value);
  #endif
  void set_serverid(const char* value);
  void set_serverid(const char* value, size_t size);
  ::std::string* mutable_serverid();
  ::std::string* release_serverid();
  void set_allocated_serverid(::std::string* serverid);

  // string UserName = 10;
  void clear_username();
  static const int kUserNameFieldNumber = 10;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string BrokerAddr = 12;
  void clear_brokeraddr();
  static const int kBrokerAddrFieldNumber = 12;
  const ::std::string& brokeraddr() const;
  void set_brokeraddr(const ::std::string& value);
  #if LANG_CXX11
  void set_brokeraddr(::std::string&& value);
  #endif
  void set_brokeraddr(const char* value);
  void set_brokeraddr(const char* value, size_t size);
  ::std::string* mutable_brokeraddr();
  ::std::string* release_brokeraddr();
  void set_allocated_brokeraddr(::std::string* brokeraddr);

  // string GateId = 13;
  void clear_gateid();
  static const int kGateIdFieldNumber = 13;
  const ::std::string& gateid() const;
  void set_gateid(const ::std::string& value);
  #if LANG_CXX11
  void set_gateid(::std::string&& value);
  #endif
  void set_gateid(const char* value);
  void set_gateid(const char* value, size_t size);
  ::std::string* mutable_gateid();
  ::std::string* release_gateid();
  void set_allocated_gateid(::std::string* gateid);

  // string Token = 14;
  void clear_token();
  static const int kTokenFieldNumber = 14;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // uint32 DeviceType = 1;
  void clear_devicetype();
  static const int kDeviceTypeFieldNumber = 1;
  ::google::protobuf::uint32 devicetype() const;
  void set_devicetype(::google::protobuf::uint32 value);

  // uint32 Mark = 5;
  void clear_mark();
  static const int kMarkFieldNumber = 5;
  ::google::protobuf::uint32 mark() const;
  void set_mark(::google::protobuf::uint32 value);

  // uint32 Error = 11;
  void clear_error();
  static const int kErrorFieldNumber = 11;
  ::google::protobuf::uint32 error() const;
  void set_error(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.BaseCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr msgseq_;
  ::google::protobuf::internal::ArenaStringPtr cmd_;
  ::google::protobuf::internal::ArenaStringPtr devicelist_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr serverid_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr brokeraddr_;
  ::google::protobuf::internal::ArenaStringPtr gateid_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::uint32 devicetype_;
  ::google::protobuf::uint32 mark_;
  ::google::protobuf::uint32 error_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultsBaseCmdImpl();
};
// -------------------------------------------------------------------

class GateData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.GateData) */ {
 public:
  GateData();
  virtual ~GateData();

  GateData(const GateData& from);

  inline GateData& operator=(const GateData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GateData(GateData&& from) noexcept
    : GateData() {
    *this = ::std::move(from);
  }

  inline GateData& operator=(GateData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GateData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GateData* internal_default_instance() {
    return reinterpret_cast<const GateData*>(
               &_GateData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(GateData* other);
  friend void swap(GateData& a, GateData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GateData* New() const PROTOBUF_FINAL { return New(NULL); }

  GateData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GateData& from);
  void MergeFrom(const GateData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GateData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.cmdSetList CmdSet = 5;
  int cmdset_size() const;
  void clear_cmdset();
  static const int kCmdSetFieldNumber = 5;
  const ::pb::cmdSetList& cmdset(int index) const;
  ::pb::cmdSetList* mutable_cmdset(int index);
  ::pb::cmdSetList* add_cmdset();
  ::google::protobuf::RepeatedPtrField< ::pb::cmdSetList >*
      mutable_cmdset();
  const ::google::protobuf::RepeatedPtrField< ::pb::cmdSetList >&
      cmdset() const;

  // repeated .pb.deviceList Device = 6;
  int device_size() const;
  void clear_device();
  static const int kDeviceFieldNumber = 6;
  const ::pb::deviceList& device(int index) const;
  ::pb::deviceList* mutable_device(int index);
  ::pb::deviceList* add_device();
  ::google::protobuf::RepeatedPtrField< ::pb::deviceList >*
      mutable_device();
  const ::google::protobuf::RepeatedPtrField< ::pb::deviceList >&
      device() const;

  // string GateId = 1;
  void clear_gateid();
  static const int kGateIdFieldNumber = 1;
  const ::std::string& gateid() const;
  void set_gateid(const ::std::string& value);
  #if LANG_CXX11
  void set_gateid(::std::string&& value);
  #endif
  void set_gateid(const char* value);
  void set_gateid(const char* value, size_t size);
  ::std::string* mutable_gateid();
  ::std::string* release_gateid();
  void set_allocated_gateid(::std::string* gateid);

  // string Token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string Server = 3;
  void clear_server();
  static const int kServerFieldNumber = 3;
  const ::std::string& server() const;
  void set_server(const ::std::string& value);
  #if LANG_CXX11
  void set_server(::std::string&& value);
  #endif
  void set_server(const char* value);
  void set_server(const char* value, size_t size);
  ::std::string* mutable_server();
  ::std::string* release_server();
  void set_allocated_server(::std::string* server);

  // string BakServer = 4;
  void clear_bakserver();
  static const int kBakServerFieldNumber = 4;
  const ::std::string& bakserver() const;
  void set_bakserver(const ::std::string& value);
  #if LANG_CXX11
  void set_bakserver(::std::string&& value);
  #endif
  void set_bakserver(const char* value);
  void set_bakserver(const char* value, size_t size);
  ::std::string* mutable_bakserver();
  ::std::string* release_bakserver();
  void set_allocated_bakserver(::std::string* bakserver);

  // @@protoc_insertion_point(class_scope:pb.GateData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::cmdSetList > cmdset_;
  ::google::protobuf::RepeatedPtrField< ::pb::deviceList > device_;
  ::google::protobuf::internal::ArenaStringPtr gateid_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr server_;
  ::google::protobuf::internal::ArenaStringPtr bakserver_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultsGateDataImpl();
};
// -------------------------------------------------------------------

class cmdSetList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.cmdSetList) */ {
 public:
  cmdSetList();
  virtual ~cmdSetList();

  cmdSetList(const cmdSetList& from);

  inline cmdSetList& operator=(const cmdSetList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cmdSetList(cmdSetList&& from) noexcept
    : cmdSetList() {
    *this = ::std::move(from);
  }

  inline cmdSetList& operator=(cmdSetList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cmdSetList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cmdSetList* internal_default_instance() {
    return reinterpret_cast<const cmdSetList*>(
               &_cmdSetList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(cmdSetList* other);
  friend void swap(cmdSetList& a, cmdSetList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cmdSetList* New() const PROTOBUF_FINAL { return New(NULL); }

  cmdSetList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const cmdSetList& from);
  void MergeFrom(const cmdSetList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(cmdSetList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.deviceList Device = 2;
  int device_size() const;
  void clear_device();
  static const int kDeviceFieldNumber = 2;
  const ::pb::deviceList& device(int index) const;
  ::pb::deviceList* mutable_device(int index);
  ::pb::deviceList* add_device();
  ::google::protobuf::RepeatedPtrField< ::pb::deviceList >*
      mutable_device();
  const ::google::protobuf::RepeatedPtrField< ::pb::deviceList >&
      device() const;

  // string Cmd = 1;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  const ::std::string& cmd() const;
  void set_cmd(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd(::std::string&& value);
  #endif
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  ::std::string* mutable_cmd();
  ::std::string* release_cmd();
  void set_allocated_cmd(::std::string* cmd);

  // @@protoc_insertion_point(class_scope:pb.cmdSetList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::deviceList > device_;
  ::google::protobuf::internal::ArenaStringPtr cmd_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultscmdSetListImpl();
};
// -------------------------------------------------------------------

class deviceList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.deviceList) */ {
 public:
  deviceList();
  virtual ~deviceList();

  deviceList(const deviceList& from);

  inline deviceList& operator=(const deviceList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  deviceList(deviceList&& from) noexcept
    : deviceList() {
    *this = ::std::move(from);
  }

  inline deviceList& operator=(deviceList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const deviceList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const deviceList* internal_default_instance() {
    return reinterpret_cast<const deviceList*>(
               &_deviceList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(deviceList* other);
  friend void swap(deviceList& a, deviceList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline deviceList* New() const PROTOBUF_FINAL { return New(NULL); }

  deviceList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const deviceList& from);
  void MergeFrom(const deviceList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(deviceList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string DeviceId = 1;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 1;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string Category = 3;
  void clear_category();
  static const int kCategoryFieldNumber = 3;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  #if LANG_CXX11
  void set_category(::std::string&& value);
  #endif
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);

  // string Sleep = 4;
  void clear_sleep();
  static const int kSleepFieldNumber = 4;
  const ::std::string& sleep() const;
  void set_sleep(const ::std::string& value);
  #if LANG_CXX11
  void set_sleep(::std::string&& value);
  #endif
  void set_sleep(const char* value);
  void set_sleep(const char* value, size_t size);
  ::std::string* mutable_sleep();
  ::std::string* release_sleep();
  void set_allocated_sleep(::std::string* sleep);

  // string MsgSeq = 5;
  void clear_msgseq();
  static const int kMsgSeqFieldNumber = 5;
  const ::std::string& msgseq() const;
  void set_msgseq(const ::std::string& value);
  #if LANG_CXX11
  void set_msgseq(::std::string&& value);
  #endif
  void set_msgseq(const char* value);
  void set_msgseq(const char* value, size_t size);
  ::std::string* mutable_msgseq();
  ::std::string* release_msgseq();
  void set_allocated_msgseq(::std::string* msgseq);

  // .pb.generalList GeneralCtl = 7;
  bool has_generalctl() const;
  void clear_generalctl();
  static const int kGeneralCtlFieldNumber = 7;
  const ::pb::generalList& generalctl() const;
  ::pb::generalList* release_generalctl();
  ::pb::generalList* mutable_generalctl();
  void set_allocated_generalctl(::pb::generalList* generalctl);

  // .pb.generalState GeneralState = 8;
  bool has_generalstate() const;
  void clear_generalstate();
  static const int kGeneralStateFieldNumber = 8;
  const ::pb::generalState& generalstate() const;
  ::pb::generalState* release_generalstate();
  ::pb::generalState* mutable_generalstate();
  void set_allocated_generalstate(::pb::generalState* generalstate);

  // .pb.lightList LightCtl = 9;
  bool has_lightctl() const;
  void clear_lightctl();
  static const int kLightCtlFieldNumber = 9;
  const ::pb::lightList& lightctl() const;
  ::pb::lightList* release_lightctl();
  ::pb::lightList* mutable_lightctl();
  void set_allocated_lightctl(::pb::lightList* lightctl);

  // .pb.lightState LightState = 10;
  bool has_lightstate() const;
  void clear_lightstate();
  static const int kLightStateFieldNumber = 10;
  const ::pb::lightState& lightstate() const;
  ::pb::lightState* release_lightstate();
  ::pb::lightState* mutable_lightstate();
  void set_allocated_lightstate(::pb::lightState* lightstate);

  // .pb.airConditioningList AirConditioningCtl = 11;
  bool has_airconditioningctl() const;
  void clear_airconditioningctl();
  static const int kAirConditioningCtlFieldNumber = 11;
  const ::pb::airConditioningList& airconditioningctl() const;
  ::pb::airConditioningList* release_airconditioningctl();
  ::pb::airConditioningList* mutable_airconditioningctl();
  void set_allocated_airconditioningctl(::pb::airConditioningList* airconditioningctl);

  // .pb.airConditioningState AirConditioningState = 12;
  bool has_airconditioningstate() const;
  void clear_airconditioningstate();
  static const int kAirConditioningStateFieldNumber = 12;
  const ::pb::airConditioningState& airconditioningstate() const;
  ::pb::airConditioningState* release_airconditioningstate();
  ::pb::airConditioningState* mutable_airconditioningstate();
  void set_allocated_airconditioningstate(::pb::airConditioningState* airconditioningstate);

  // .pb.farmList FarmCtl = 13;
  bool has_farmctl() const;
  void clear_farmctl();
  static const int kFarmCtlFieldNumber = 13;
  const ::pb::farmList& farmctl() const;
  ::pb::farmList* release_farmctl();
  ::pb::farmList* mutable_farmctl();
  void set_allocated_farmctl(::pb::farmList* farmctl);

  // .pb.farmState FarmState = 14;
  bool has_farmstate() const;
  void clear_farmstate();
  static const int kFarmStateFieldNumber = 14;
  const ::pb::farmState& farmstate() const;
  ::pb::farmState* release_farmstate();
  ::pb::farmState* mutable_farmstate();
  void set_allocated_farmstate(::pb::farmState* farmstate);

  // .pb.multimediaList MultimediaCtl = 15;
  bool has_multimediactl() const;
  void clear_multimediactl();
  static const int kMultimediaCtlFieldNumber = 15;
  const ::pb::multimediaList& multimediactl() const;
  ::pb::multimediaList* release_multimediactl();
  ::pb::multimediaList* mutable_multimediactl();
  void set_allocated_multimediactl(::pb::multimediaList* multimediactl);

  // .pb.multimediaState MultimediaState = 16;
  bool has_multimediastate() const;
  void clear_multimediastate();
  static const int kMultimediaStateFieldNumber = 16;
  const ::pb::multimediaState& multimediastate() const;
  ::pb::multimediaState* release_multimediastate();
  ::pb::multimediaState* mutable_multimediastate();
  void set_allocated_multimediastate(::pb::multimediaState* multimediastate);

  // .pb.digitalCtl DigitalCtl = 6;
  void clear_digitalctl();
  static const int kDigitalCtlFieldNumber = 6;
  ::pb::digitalCtl digitalctl() const;
  void set_digitalctl(::pb::digitalCtl value);

  // @@protoc_insertion_point(class_scope:pb.deviceList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  ::google::protobuf::internal::ArenaStringPtr sleep_;
  ::google::protobuf::internal::ArenaStringPtr msgseq_;
  ::pb::generalList* generalctl_;
  ::pb::generalState* generalstate_;
  ::pb::lightList* lightctl_;
  ::pb::lightState* lightstate_;
  ::pb::airConditioningList* airconditioningctl_;
  ::pb::airConditioningState* airconditioningstate_;
  ::pb::farmList* farmctl_;
  ::pb::farmState* farmstate_;
  ::pb::multimediaList* multimediactl_;
  ::pb::multimediaState* multimediastate_;
  int digitalctl_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultsdeviceListImpl();
};
// -------------------------------------------------------------------

class generalList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.generalList) */ {
 public:
  generalList();
  virtual ~generalList();

  generalList(const generalList& from);

  inline generalList& operator=(const generalList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  generalList(generalList&& from) noexcept
    : generalList() {
    *this = ::std::move(from);
  }

  inline generalList& operator=(generalList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const generalList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const generalList* internal_default_instance() {
    return reinterpret_cast<const generalList*>(
               &_generalList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(generalList* other);
  friend void swap(generalList& a, generalList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline generalList* New() const PROTOBUF_FINAL { return New(NULL); }

  generalList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const generalList& from);
  void MergeFrom(const generalList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(generalList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string temperature = 1;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 1;
  const ::std::string& temperature() const;
  void set_temperature(const ::std::string& value);
  #if LANG_CXX11
  void set_temperature(::std::string&& value);
  #endif
  void set_temperature(const char* value);
  void set_temperature(const char* value, size_t size);
  ::std::string* mutable_temperature();
  ::std::string* release_temperature();
  void set_allocated_temperature(::std::string* temperature);

  // string Volume = 2;
  void clear_volume();
  static const int kVolumeFieldNumber = 2;
  const ::std::string& volume() const;
  void set_volume(const ::std::string& value);
  #if LANG_CXX11
  void set_volume(::std::string&& value);
  #endif
  void set_volume(const char* value);
  void set_volume(const char* value, size_t size);
  ::std::string* mutable_volume();
  ::std::string* release_volume();
  void set_allocated_volume(::std::string* volume);

  // string Poslition = 3;
  void clear_poslition();
  static const int kPoslitionFieldNumber = 3;
  const ::std::string& poslition() const;
  void set_poslition(const ::std::string& value);
  #if LANG_CXX11
  void set_poslition(::std::string&& value);
  #endif
  void set_poslition(const char* value);
  void set_poslition(const char* value, size_t size);
  ::std::string* mutable_poslition();
  ::std::string* release_poslition();
  void set_allocated_poslition(::std::string* poslition);

  // string Cmd = 4;
  void clear_cmd();
  static const int kCmdFieldNumber = 4;
  const ::std::string& cmd() const;
  void set_cmd(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd(::std::string&& value);
  #endif
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  ::std::string* mutable_cmd();
  ::std::string* release_cmd();
  void set_allocated_cmd(::std::string* cmd);

  // string WindDirection = 6;
  void clear_winddirection();
  static const int kWindDirectionFieldNumber = 6;
  const ::std::string& winddirection() const;
  void set_winddirection(const ::std::string& value);
  #if LANG_CXX11
  void set_winddirection(::std::string&& value);
  #endif
  void set_winddirection(const char* value);
  void set_winddirection(const char* value, size_t size);
  ::std::string* mutable_winddirection();
  ::std::string* release_winddirection();
  void set_allocated_winddirection(::std::string* winddirection);

  // bool Switch = 5;
  void clear_switch_();
  static const int kSwitchFieldNumber = 5;
  bool switch_() const;
  void set_switch_(bool value);

  // uint32 Mode = 7;
  void clear_mode();
  static const int kModeFieldNumber = 7;
  ::google::protobuf::uint32 mode() const;
  void set_mode(::google::protobuf::uint32 value);

  // uint32 Sensitivity = 8;
  void clear_sensitivity();
  static const int kSensitivityFieldNumber = 8;
  ::google::protobuf::uint32 sensitivity() const;
  void set_sensitivity(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.generalList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr temperature_;
  ::google::protobuf::internal::ArenaStringPtr volume_;
  ::google::protobuf::internal::ArenaStringPtr poslition_;
  ::google::protobuf::internal::ArenaStringPtr cmd_;
  ::google::protobuf::internal::ArenaStringPtr winddirection_;
  bool switch__;
  ::google::protobuf::uint32 mode_;
  ::google::protobuf::uint32 sensitivity_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultsgeneralListImpl();
};
// -------------------------------------------------------------------

class generalState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.generalState) */ {
 public:
  generalState();
  virtual ~generalState();

  generalState(const generalState& from);

  inline generalState& operator=(const generalState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  generalState(generalState&& from) noexcept
    : generalState() {
    *this = ::std::move(from);
  }

  inline generalState& operator=(generalState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const generalState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const generalState* internal_default_instance() {
    return reinterpret_cast<const generalState*>(
               &_generalState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(generalState* other);
  friend void swap(generalState& a, generalState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline generalState* New() const PROTOBUF_FINAL { return New(NULL); }

  generalState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const generalState& from);
  void MergeFrom(const generalState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(generalState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Temperature = 2;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 2;
  const ::std::string& temperature() const;
  void set_temperature(const ::std::string& value);
  #if LANG_CXX11
  void set_temperature(::std::string&& value);
  #endif
  void set_temperature(const char* value);
  void set_temperature(const char* value, size_t size);
  ::std::string* mutable_temperature();
  ::std::string* release_temperature();
  void set_allocated_temperature(::std::string* temperature);

  // string Volume = 3;
  void clear_volume();
  static const int kVolumeFieldNumber = 3;
  const ::std::string& volume() const;
  void set_volume(const ::std::string& value);
  #if LANG_CXX11
  void set_volume(::std::string&& value);
  #endif
  void set_volume(const char* value);
  void set_volume(const char* value, size_t size);
  ::std::string* mutable_volume();
  ::std::string* release_volume();
  void set_allocated_volume(::std::string* volume);

  // string Poslition = 4;
  void clear_poslition();
  static const int kPoslitionFieldNumber = 4;
  const ::std::string& poslition() const;
  void set_poslition(const ::std::string& value);
  #if LANG_CXX11
  void set_poslition(::std::string&& value);
  #endif
  void set_poslition(const char* value);
  void set_poslition(const char* value, size_t size);
  ::std::string* mutable_poslition();
  ::std::string* release_poslition();
  void set_allocated_poslition(::std::string* poslition);

  // string O2 = 5;
  void clear_o2();
  static const int kO2FieldNumber = 5;
  const ::std::string& o2() const;
  void set_o2(const ::std::string& value);
  #if LANG_CXX11
  void set_o2(::std::string&& value);
  #endif
  void set_o2(const char* value);
  void set_o2(const char* value, size_t size);
  ::std::string* mutable_o2();
  ::std::string* release_o2();
  void set_allocated_o2(::std::string* o2);

  // string CO2 = 6;
  void clear_co2();
  static const int kCO2FieldNumber = 6;
  const ::std::string& co2() const;
  void set_co2(const ::std::string& value);
  #if LANG_CXX11
  void set_co2(::std::string&& value);
  #endif
  void set_co2(const char* value);
  void set_co2(const char* value, size_t size);
  ::std::string* mutable_co2();
  ::std::string* release_co2();
  void set_allocated_co2(::std::string* co2);

  // string CO = 7;
  void clear_co();
  static const int kCOFieldNumber = 7;
  const ::std::string& co() const;
  void set_co(const ::std::string& value);
  #if LANG_CXX11
  void set_co(::std::string&& value);
  #endif
  void set_co(const char* value);
  void set_co(const char* value, size_t size);
  ::std::string* mutable_co();
  ::std::string* release_co();
  void set_allocated_co(::std::string* co);

  // string WindDirection = 8;
  void clear_winddirection();
  static const int kWindDirectionFieldNumber = 8;
  const ::std::string& winddirection() const;
  void set_winddirection(const ::std::string& value);
  #if LANG_CXX11
  void set_winddirection(::std::string&& value);
  #endif
  void set_winddirection(const char* value);
  void set_winddirection(const char* value, size_t size);
  ::std::string* mutable_winddirection();
  ::std::string* release_winddirection();
  void set_allocated_winddirection(::std::string* winddirection);

  // string LockState = 11;
  void clear_lockstate();
  static const int kLockStateFieldNumber = 11;
  const ::std::string& lockstate() const;
  void set_lockstate(const ::std::string& value);
  #if LANG_CXX11
  void set_lockstate(::std::string&& value);
  #endif
  void set_lockstate(const char* value);
  void set_lockstate(const char* value, size_t size);
  ::std::string* mutable_lockstate();
  ::std::string* release_lockstate();
  void set_allocated_lockstate(::std::string* lockstate);

  // string Brigness = 13;
  void clear_brigness();
  static const int kBrignessFieldNumber = 13;
  const ::std::string& brigness() const;
  void set_brigness(const ::std::string& value);
  #if LANG_CXX11
  void set_brigness(::std::string&& value);
  #endif
  void set_brigness(const char* value);
  void set_brigness(const char* value, size_t size);
  ::std::string* mutable_brigness();
  ::std::string* release_brigness();
  void set_allocated_brigness(::std::string* brigness);

  // .pb.alarmList Alarm = 14;
  bool has_alarm() const;
  void clear_alarm();
  static const int kAlarmFieldNumber = 14;
  const ::pb::alarmList& alarm() const;
  ::pb::alarmList* release_alarm();
  ::pb::alarmList* mutable_alarm();
  void set_allocated_alarm(::pb::alarmList* alarm);

  // bool Switch = 1;
  void clear_switch_();
  static const int kSwitchFieldNumber = 1;
  bool switch_() const;
  void set_switch_(bool value);

  // uint32 Mode = 9;
  void clear_mode();
  static const int kModeFieldNumber = 9;
  ::google::protobuf::uint32 mode() const;
  void set_mode(::google::protobuf::uint32 value);

  // uint32 Sensitivity = 10;
  void clear_sensitivity();
  static const int kSensitivityFieldNumber = 10;
  ::google::protobuf::uint32 sensitivity() const;
  void set_sensitivity(::google::protobuf::uint32 value);

  // uint32 Beatingofheart = 12;
  void clear_beatingofheart();
  static const int kBeatingofheartFieldNumber = 12;
  ::google::protobuf::uint32 beatingofheart() const;
  void set_beatingofheart(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.generalState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr temperature_;
  ::google::protobuf::internal::ArenaStringPtr volume_;
  ::google::protobuf::internal::ArenaStringPtr poslition_;
  ::google::protobuf::internal::ArenaStringPtr o2_;
  ::google::protobuf::internal::ArenaStringPtr co2_;
  ::google::protobuf::internal::ArenaStringPtr co_;
  ::google::protobuf::internal::ArenaStringPtr winddirection_;
  ::google::protobuf::internal::ArenaStringPtr lockstate_;
  ::google::protobuf::internal::ArenaStringPtr brigness_;
  ::pb::alarmList* alarm_;
  bool switch__;
  ::google::protobuf::uint32 mode_;
  ::google::protobuf::uint32 sensitivity_;
  ::google::protobuf::uint32 beatingofheart_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultsgeneralStateImpl();
};
// -------------------------------------------------------------------

class multimediaList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.multimediaList) */ {
 public:
  multimediaList();
  virtual ~multimediaList();

  multimediaList(const multimediaList& from);

  inline multimediaList& operator=(const multimediaList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  multimediaList(multimediaList&& from) noexcept
    : multimediaList() {
    *this = ::std::move(from);
  }

  inline multimediaList& operator=(multimediaList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const multimediaList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const multimediaList* internal_default_instance() {
    return reinterpret_cast<const multimediaList*>(
               &_multimediaList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(multimediaList* other);
  friend void swap(multimediaList& a, multimediaList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline multimediaList* New() const PROTOBUF_FINAL { return New(NULL); }

  multimediaList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const multimediaList& from);
  void MergeFrom(const multimediaList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(multimediaList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string MeetingName = 12;
  void clear_meetingname();
  static const int kMeetingNameFieldNumber = 12;
  const ::std::string& meetingname() const;
  void set_meetingname(const ::std::string& value);
  #if LANG_CXX11
  void set_meetingname(::std::string&& value);
  #endif
  void set_meetingname(const char* value);
  void set_meetingname(const char* value, size_t size);
  ::std::string* mutable_meetingname();
  ::std::string* release_meetingname();
  void set_allocated_meetingname(::std::string* meetingname);

  // .pb.dataParm Data = 14;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 14;
  const ::pb::dataParm& data() const;
  ::pb::dataParm* release_data();
  ::pb::dataParm* mutable_data();
  void set_allocated_data(::pb::dataParm* data);

  // uint32 Path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  ::google::protobuf::uint32 path() const;
  void set_path(::google::protobuf::uint32 value);

  // bool Press = 2;
  void clear_press();
  static const int kPressFieldNumber = 2;
  bool press() const;
  void set_press(bool value);

  // bool Switch = 3;
  void clear_switch_();
  static const int kSwitchFieldNumber = 3;
  bool switch_() const;
  void set_switch_(bool value);

  // bool Sort = 4;
  void clear_sort();
  static const int kSortFieldNumber = 4;
  bool sort() const;
  void set_sort(bool value);

  // bool Mute = 10;
  void clear_mute();
  static const int kMuteFieldNumber = 10;
  bool mute() const;
  void set_mute(bool value);

  // uint32 Scenario = 5;
  void clear_scenario();
  static const int kScenarioFieldNumber = 5;
  ::google::protobuf::uint32 scenario() const;
  void set_scenario(::google::protobuf::uint32 value);

  // uint32 Channel = 6;
  void clear_channel();
  static const int kChannelFieldNumber = 6;
  ::google::protobuf::uint32 channel() const;
  void set_channel(::google::protobuf::uint32 value);

  // uint32 StartChannel = 7;
  void clear_startchannel();
  static const int kStartChannelFieldNumber = 7;
  ::google::protobuf::uint32 startchannel() const;
  void set_startchannel(::google::protobuf::uint32 value);

  // uint32 EndChannel = 8;
  void clear_endchannel();
  static const int kEndChannelFieldNumber = 8;
  ::google::protobuf::uint32 endchannel() const;
  void set_endchannel(::google::protobuf::uint32 value);

  // uint32 Volume = 9;
  void clear_volume();
  static const int kVolumeFieldNumber = 9;
  ::google::protobuf::uint32 volume() const;
  void set_volume(::google::protobuf::uint32 value);

  // uint32 Mode = 11;
  void clear_mode();
  static const int kModeFieldNumber = 11;
  ::google::protobuf::uint32 mode() const;
  void set_mode(::google::protobuf::uint32 value);

  // uint32 State = 13;
  void clear_state();
  static const int kStateFieldNumber = 13;
  ::google::protobuf::uint32 state() const;
  void set_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.multimediaList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr meetingname_;
  ::pb::dataParm* data_;
  ::google::protobuf::uint32 path_;
  bool press_;
  bool switch__;
  bool sort_;
  bool mute_;
  ::google::protobuf::uint32 scenario_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 startchannel_;
  ::google::protobuf::uint32 endchannel_;
  ::google::protobuf::uint32 volume_;
  ::google::protobuf::uint32 mode_;
  ::google::protobuf::uint32 state_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultsmultimediaListImpl();
};
// -------------------------------------------------------------------

class dataParm : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.dataParm) */ {
 public:
  dataParm();
  virtual ~dataParm();

  dataParm(const dataParm& from);

  inline dataParm& operator=(const dataParm& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  dataParm(dataParm&& from) noexcept
    : dataParm() {
    *this = ::std::move(from);
  }

  inline dataParm& operator=(dataParm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const dataParm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const dataParm* internal_default_instance() {
    return reinterpret_cast<const dataParm*>(
               &_dataParm_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(dataParm* other);
  friend void swap(dataParm& a, dataParm& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline dataParm* New() const PROTOBUF_FINAL { return New(NULL); }

  dataParm* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const dataParm& from);
  void MergeFrom(const dataParm& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(dataParm* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string DevIp = 2;
  void clear_devip();
  static const int kDevIpFieldNumber = 2;
  const ::std::string& devip() const;
  void set_devip(const ::std::string& value);
  #if LANG_CXX11
  void set_devip(::std::string&& value);
  #endif
  void set_devip(const char* value);
  void set_devip(const char* value, size_t size);
  ::std::string* mutable_devip();
  ::std::string* release_devip();
  void set_allocated_devip(::std::string* devip);

  // string DevPort = 3;
  void clear_devport();
  static const int kDevPortFieldNumber = 3;
  const ::std::string& devport() const;
  void set_devport(const ::std::string& value);
  #if LANG_CXX11
  void set_devport(::std::string&& value);
  #endif
  void set_devport(const char* value);
  void set_devport(const char* value, size_t size);
  ::std::string* mutable_devport();
  ::std::string* release_devport();
  void set_allocated_devport(::std::string* devport);

  // string DevUsername = 4;
  void clear_devusername();
  static const int kDevUsernameFieldNumber = 4;
  const ::std::string& devusername() const;
  void set_devusername(const ::std::string& value);
  #if LANG_CXX11
  void set_devusername(::std::string&& value);
  #endif
  void set_devusername(const char* value);
  void set_devusername(const char* value, size_t size);
  ::std::string* mutable_devusername();
  ::std::string* release_devusername();
  void set_allocated_devusername(::std::string* devusername);

  // string DevPassword = 5;
  void clear_devpassword();
  static const int kDevPasswordFieldNumber = 5;
  const ::std::string& devpassword() const;
  void set_devpassword(const ::std::string& value);
  #if LANG_CXX11
  void set_devpassword(::std::string&& value);
  #endif
  void set_devpassword(const char* value);
  void set_devpassword(const char* value, size_t size);
  ::std::string* mutable_devpassword();
  ::std::string* release_devpassword();
  void set_allocated_devpassword(::std::string* devpassword);

  // uint32 DevType = 1;
  void clear_devtype();
  static const int kDevTypeFieldNumber = 1;
  ::google::protobuf::uint32 devtype() const;
  void set_devtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.dataParm)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr devip_;
  ::google::protobuf::internal::ArenaStringPtr devport_;
  ::google::protobuf::internal::ArenaStringPtr devusername_;
  ::google::protobuf::internal::ArenaStringPtr devpassword_;
  ::google::protobuf::uint32 devtype_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultsdataParmImpl();
};
// -------------------------------------------------------------------

class multimediaState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.multimediaState) */ {
 public:
  multimediaState();
  virtual ~multimediaState();

  multimediaState(const multimediaState& from);

  inline multimediaState& operator=(const multimediaState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  multimediaState(multimediaState&& from) noexcept
    : multimediaState() {
    *this = ::std::move(from);
  }

  inline multimediaState& operator=(multimediaState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const multimediaState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const multimediaState* internal_default_instance() {
    return reinterpret_cast<const multimediaState*>(
               &_multimediaState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(multimediaState* other);
  friend void swap(multimediaState& a, multimediaState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline multimediaState* New() const PROTOBUF_FINAL { return New(NULL); }

  multimediaState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const multimediaState& from);
  void MergeFrom(const multimediaState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(multimediaState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.volumeState Volume = 1;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 1;
  const ::pb::volumeState& volume() const;
  ::pb::volumeState* release_volume();
  ::pb::volumeState* mutable_volume();
  void set_allocated_volume(::pb::volumeState* volume);

  // @@protoc_insertion_point(class_scope:pb.multimediaState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::volumeState* volume_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultsmultimediaStateImpl();
};
// -------------------------------------------------------------------

class volumeState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.volumeState) */ {
 public:
  volumeState();
  virtual ~volumeState();

  volumeState(const volumeState& from);

  inline volumeState& operator=(const volumeState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  volumeState(volumeState&& from) noexcept
    : volumeState() {
    *this = ::std::move(from);
  }

  inline volumeState& operator=(volumeState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const volumeState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const volumeState* internal_default_instance() {
    return reinterpret_cast<const volumeState*>(
               &_volumeState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(volumeState* other);
  friend void swap(volumeState& a, volumeState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline volumeState* New() const PROTOBUF_FINAL { return New(NULL); }

  volumeState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const volumeState& from);
  void MergeFrom(const volumeState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(volumeState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.outputState Output = 1;
  bool has_output() const;
  void clear_output();
  static const int kOutputFieldNumber = 1;
  const ::pb::outputState& output() const;
  ::pb::outputState* release_output();
  ::pb::outputState* mutable_output();
  void set_allocated_output(::pb::outputState* output);

  // .pb.outputState Input = 2;
  bool has_input() const;
  void clear_input();
  static const int kInputFieldNumber = 2;
  const ::pb::outputState& input() const;
  ::pb::outputState* release_input();
  ::pb::outputState* mutable_input();
  void set_allocated_input(::pb::outputState* input);

  // @@protoc_insertion_point(class_scope:pb.volumeState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::outputState* output_;
  ::pb::outputState* input_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultsvolumeStateImpl();
};
// -------------------------------------------------------------------

class outputState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.outputState) */ {
 public:
  outputState();
  virtual ~outputState();

  outputState(const outputState& from);

  inline outputState& operator=(const outputState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  outputState(outputState&& from) noexcept
    : outputState() {
    *this = ::std::move(from);
  }

  inline outputState& operator=(outputState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const outputState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const outputState* internal_default_instance() {
    return reinterpret_cast<const outputState*>(
               &_outputState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(outputState* other);
  friend void swap(outputState& a, outputState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline outputState* New() const PROTOBUF_FINAL { return New(NULL); }

  outputState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const outputState& from);
  void MergeFrom(const outputState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(outputState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.channelValue ChannelValue = 1;
  int channelvalue_size() const;
  void clear_channelvalue();
  static const int kChannelValueFieldNumber = 1;
  const ::pb::channelValue& channelvalue(int index) const;
  ::pb::channelValue* mutable_channelvalue(int index);
  ::pb::channelValue* add_channelvalue();
  ::google::protobuf::RepeatedPtrField< ::pb::channelValue >*
      mutable_channelvalue();
  const ::google::protobuf::RepeatedPtrField< ::pb::channelValue >&
      channelvalue() const;

  // @@protoc_insertion_point(class_scope:pb.outputState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::channelValue > channelvalue_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultsoutputStateImpl();
};
// -------------------------------------------------------------------

class channelValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.channelValue) */ {
 public:
  channelValue();
  virtual ~channelValue();

  channelValue(const channelValue& from);

  inline channelValue& operator=(const channelValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  channelValue(channelValue&& from) noexcept
    : channelValue() {
    *this = ::std::move(from);
  }

  inline channelValue& operator=(channelValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const channelValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const channelValue* internal_default_instance() {
    return reinterpret_cast<const channelValue*>(
               &_channelValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(channelValue* other);
  friend void swap(channelValue& a, channelValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline channelValue* New() const PROTOBUF_FINAL { return New(NULL); }

  channelValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const channelValue& from);
  void MergeFrom(const channelValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(channelValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 Channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  ::google::protobuf::uint32 channel() const;
  void set_channel(::google::protobuf::uint32 value);

  // uint32 Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.channelValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 value_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultschannelValueImpl();
};
// -------------------------------------------------------------------

class alarmList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.alarmList) */ {
 public:
  alarmList();
  virtual ~alarmList();

  alarmList(const alarmList& from);

  inline alarmList& operator=(const alarmList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  alarmList(alarmList&& from) noexcept
    : alarmList() {
    *this = ::std::move(from);
  }

  inline alarmList& operator=(alarmList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const alarmList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const alarmList* internal_default_instance() {
    return reinterpret_cast<const alarmList*>(
               &_alarmList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(alarmList* other);
  friend void swap(alarmList& a, alarmList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline alarmList* New() const PROTOBUF_FINAL { return New(NULL); }

  alarmList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const alarmList& from);
  void MergeFrom(const alarmList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(alarmList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 GasAlarm = 1;
  void clear_gasalarm();
  static const int kGasAlarmFieldNumber = 1;
  ::google::protobuf::uint32 gasalarm() const;
  void set_gasalarm(::google::protobuf::uint32 value);

  // uint32 SmokeAlarm = 2;
  void clear_smokealarm();
  static const int kSmokeAlarmFieldNumber = 2;
  ::google::protobuf::uint32 smokealarm() const;
  void set_smokealarm(::google::protobuf::uint32 value);

  // uint32 ShockAlarm = 3;
  void clear_shockalarm();
  static const int kShockAlarmFieldNumber = 3;
  ::google::protobuf::uint32 shockalarm() const;
  void set_shockalarm(::google::protobuf::uint32 value);

  // uint32 LeakAlarm = 4;
  void clear_leakalarm();
  static const int kLeakAlarmFieldNumber = 4;
  ::google::protobuf::uint32 leakalarm() const;
  void set_leakalarm(::google::protobuf::uint32 value);

  // uint32 FallAlarm = 5;
  void clear_fallalarm();
  static const int kFallAlarmFieldNumber = 5;
  ::google::protobuf::uint32 fallalarm() const;
  void set_fallalarm(::google::protobuf::uint32 value);

  // uint32 HeartAlarm = 6;
  void clear_heartalarm();
  static const int kHeartAlarmFieldNumber = 6;
  ::google::protobuf::uint32 heartalarm() const;
  void set_heartalarm(::google::protobuf::uint32 value);

  // uint32 PoslitionAlarm = 7;
  void clear_poslitionalarm();
  static const int kPoslitionAlarmFieldNumber = 7;
  ::google::protobuf::uint32 poslitionalarm() const;
  void set_poslitionalarm(::google::protobuf::uint32 value);

  // uint32 LowTemperatureAlarm = 8;
  void clear_lowtemperaturealarm();
  static const int kLowTemperatureAlarmFieldNumber = 8;
  ::google::protobuf::uint32 lowtemperaturealarm() const;
  void set_lowtemperaturealarm(::google::protobuf::uint32 value);

  // uint32 CoAlarm = 9;
  void clear_coalarm();
  static const int kCoAlarmFieldNumber = 9;
  ::google::protobuf::uint32 coalarm() const;
  void set_coalarm(::google::protobuf::uint32 value);

  // uint32 EarmarkAlarm = 10;
  void clear_earmarkalarm();
  static const int kEarmarkAlarmFieldNumber = 10;
  ::google::protobuf::uint32 earmarkalarm() const;
  void set_earmarkalarm(::google::protobuf::uint32 value);

  // uint32 CollarAlarm = 11;
  void clear_collaralarm();
  static const int kCollarAlarmFieldNumber = 11;
  ::google::protobuf::uint32 collaralarm() const;
  void set_collaralarm(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.alarmList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 gasalarm_;
  ::google::protobuf::uint32 smokealarm_;
  ::google::protobuf::uint32 shockalarm_;
  ::google::protobuf::uint32 leakalarm_;
  ::google::protobuf::uint32 fallalarm_;
  ::google::protobuf::uint32 heartalarm_;
  ::google::protobuf::uint32 poslitionalarm_;
  ::google::protobuf::uint32 lowtemperaturealarm_;
  ::google::protobuf::uint32 coalarm_;
  ::google::protobuf::uint32 earmarkalarm_;
  ::google::protobuf::uint32 collaralarm_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultsalarmListImpl();
};
// -------------------------------------------------------------------

class farmState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.farmState) */ {
 public:
  farmState();
  virtual ~farmState();

  farmState(const farmState& from);

  inline farmState& operator=(const farmState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  farmState(farmState&& from) noexcept
    : farmState() {
    *this = ::std::move(from);
  }

  inline farmState& operator=(farmState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const farmState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const farmState* internal_default_instance() {
    return reinterpret_cast<const farmState*>(
               &_farmState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(farmState* other);
  friend void swap(farmState& a, farmState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline farmState* New() const PROTOBUF_FINAL { return New(NULL); }

  farmState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const farmState& from);
  void MergeFrom(const farmState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(farmState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string N = 1;
  void clear_n();
  static const int kNFieldNumber = 1;
  const ::std::string& n() const;
  void set_n(const ::std::string& value);
  #if LANG_CXX11
  void set_n(::std::string&& value);
  #endif
  void set_n(const char* value);
  void set_n(const char* value, size_t size);
  ::std::string* mutable_n();
  ::std::string* release_n();
  void set_allocated_n(::std::string* n);

  // string P = 2;
  void clear_p();
  static const int kPFieldNumber = 2;
  const ::std::string& p() const;
  void set_p(const ::std::string& value);
  #if LANG_CXX11
  void set_p(::std::string&& value);
  #endif
  void set_p(const char* value);
  void set_p(const char* value, size_t size);
  ::std::string* mutable_p();
  ::std::string* release_p();
  void set_allocated_p(::std::string* p);

  // string K = 3;
  void clear_k();
  static const int kKFieldNumber = 3;
  const ::std::string& k() const;
  void set_k(const ::std::string& value);
  #if LANG_CXX11
  void set_k(::std::string&& value);
  #endif
  void set_k(const char* value);
  void set_k(const char* value, size_t size);
  ::std::string* mutable_k();
  ::std::string* release_k();
  void set_allocated_k(::std::string* k);

  // string O2 = 4;
  void clear_o2();
  static const int kO2FieldNumber = 4;
  const ::std::string& o2() const;
  void set_o2(const ::std::string& value);
  #if LANG_CXX11
  void set_o2(::std::string&& value);
  #endif
  void set_o2(const char* value);
  void set_o2(const char* value, size_t size);
  ::std::string* mutable_o2();
  ::std::string* release_o2();
  void set_allocated_o2(::std::string* o2);

  // string CO2 = 5;
  void clear_co2();
  static const int kCO2FieldNumber = 5;
  const ::std::string& co2() const;
  void set_co2(const ::std::string& value);
  #if LANG_CXX11
  void set_co2(::std::string&& value);
  #endif
  void set_co2(const char* value);
  void set_co2(const char* value, size_t size);
  ::std::string* mutable_co2();
  ::std::string* release_co2();
  void set_allocated_co2(::std::string* co2);

  // string CO = 6;
  void clear_co();
  static const int kCOFieldNumber = 6;
  const ::std::string& co() const;
  void set_co(const ::std::string& value);
  #if LANG_CXX11
  void set_co(::std::string&& value);
  #endif
  void set_co(const char* value);
  void set_co(const char* value, size_t size);
  ::std::string* mutable_co();
  ::std::string* release_co();
  void set_allocated_co(::std::string* co);

  // string Illumination = 7;
  void clear_illumination();
  static const int kIlluminationFieldNumber = 7;
  const ::std::string& illumination() const;
  void set_illumination(const ::std::string& value);
  #if LANG_CXX11
  void set_illumination(::std::string&& value);
  #endif
  void set_illumination(const char* value);
  void set_illumination(const char* value, size_t size);
  ::std::string* mutable_illumination();
  ::std::string* release_illumination();
  void set_allocated_illumination(::std::string* illumination);

  // string WindDirection = 8;
  void clear_winddirection();
  static const int kWindDirectionFieldNumber = 8;
  const ::std::string& winddirection() const;
  void set_winddirection(const ::std::string& value);
  #if LANG_CXX11
  void set_winddirection(::std::string&& value);
  #endif
  void set_winddirection(const char* value);
  void set_winddirection(const char* value, size_t size);
  ::std::string* mutable_winddirection();
  ::std::string* release_winddirection();
  void set_allocated_winddirection(::std::string* winddirection);

  // string PH = 9;
  void clear_ph();
  static const int kPHFieldNumber = 9;
  const ::std::string& ph() const;
  void set_ph(const ::std::string& value);
  #if LANG_CXX11
  void set_ph(::std::string&& value);
  #endif
  void set_ph(const char* value);
  void set_ph(const char* value, size_t size);
  ::std::string* mutable_ph();
  ::std::string* release_ph();
  void set_allocated_ph(::std::string* ph);

  // string AirPressure = 10;
  void clear_airpressure();
  static const int kAirPressureFieldNumber = 10;
  const ::std::string& airpressure() const;
  void set_airpressure(const ::std::string& value);
  #if LANG_CXX11
  void set_airpressure(::std::string&& value);
  #endif
  void set_airpressure(const char* value);
  void set_airpressure(const char* value, size_t size);
  ::std::string* mutable_airpressure();
  ::std::string* release_airpressure();
  void set_allocated_airpressure(::std::string* airpressure);

  // string Flow = 11;
  void clear_flow();
  static const int kFlowFieldNumber = 11;
  const ::std::string& flow() const;
  void set_flow(const ::std::string& value);
  #if LANG_CXX11
  void set_flow(::std::string&& value);
  #endif
  void set_flow(const char* value);
  void set_flow(const char* value, size_t size);
  ::std::string* mutable_flow();
  ::std::string* release_flow();
  void set_allocated_flow(::std::string* flow);

  // string Temperature = 12;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 12;
  const ::std::string& temperature() const;
  void set_temperature(const ::std::string& value);
  #if LANG_CXX11
  void set_temperature(::std::string&& value);
  #endif
  void set_temperature(const char* value);
  void set_temperature(const char* value, size_t size);
  ::std::string* mutable_temperature();
  ::std::string* release_temperature();
  void set_allocated_temperature(::std::string* temperature);

  // string EarmarkTemperature = 13;
  void clear_earmarktemperature();
  static const int kEarmarkTemperatureFieldNumber = 13;
  const ::std::string& earmarktemperature() const;
  void set_earmarktemperature(const ::std::string& value);
  #if LANG_CXX11
  void set_earmarktemperature(::std::string&& value);
  #endif
  void set_earmarktemperature(const char* value);
  void set_earmarktemperature(const char* value, size_t size);
  ::std::string* mutable_earmarktemperature();
  ::std::string* release_earmarktemperature();
  void set_allocated_earmarktemperature(::std::string* earmarktemperature);

  // string Poslition = 14;
  void clear_poslition();
  static const int kPoslitionFieldNumber = 14;
  const ::std::string& poslition() const;
  void set_poslition(const ::std::string& value);
  #if LANG_CXX11
  void set_poslition(::std::string&& value);
  #endif
  void set_poslition(const char* value);
  void set_poslition(const char* value, size_t size);
  ::std::string* mutable_poslition();
  ::std::string* release_poslition();
  void set_allocated_poslition(::std::string* poslition);

  // string CollarPoslition = 15;
  void clear_collarposlition();
  static const int kCollarPoslitionFieldNumber = 15;
  const ::std::string& collarposlition() const;
  void set_collarposlition(const ::std::string& value);
  #if LANG_CXX11
  void set_collarposlition(::std::string&& value);
  #endif
  void set_collarposlition(const char* value);
  void set_collarposlition(const char* value, size_t size);
  ::std::string* mutable_collarposlition();
  ::std::string* release_collarposlition();
  void set_allocated_collarposlition(::std::string* collarposlition);

  // @@protoc_insertion_point(class_scope:pb.farmState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr n_;
  ::google::protobuf::internal::ArenaStringPtr p_;
  ::google::protobuf::internal::ArenaStringPtr k_;
  ::google::protobuf::internal::ArenaStringPtr o2_;
  ::google::protobuf::internal::ArenaStringPtr co2_;
  ::google::protobuf::internal::ArenaStringPtr co_;
  ::google::protobuf::internal::ArenaStringPtr illumination_;
  ::google::protobuf::internal::ArenaStringPtr winddirection_;
  ::google::protobuf::internal::ArenaStringPtr ph_;
  ::google::protobuf::internal::ArenaStringPtr airpressure_;
  ::google::protobuf::internal::ArenaStringPtr flow_;
  ::google::protobuf::internal::ArenaStringPtr temperature_;
  ::google::protobuf::internal::ArenaStringPtr earmarktemperature_;
  ::google::protobuf::internal::ArenaStringPtr poslition_;
  ::google::protobuf::internal::ArenaStringPtr collarposlition_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultsfarmStateImpl();
};
// -------------------------------------------------------------------

class farmList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.farmList) */ {
 public:
  farmList();
  virtual ~farmList();

  farmList(const farmList& from);

  inline farmList& operator=(const farmList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  farmList(farmList&& from) noexcept
    : farmList() {
    *this = ::std::move(from);
  }

  inline farmList& operator=(farmList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const farmList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const farmList* internal_default_instance() {
    return reinterpret_cast<const farmList*>(
               &_farmList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(farmList* other);
  friend void swap(farmList& a, farmList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline farmList* New() const PROTOBUF_FINAL { return New(NULL); }

  farmList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const farmList& from);
  void MergeFrom(const farmList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(farmList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Switch = 1;
  void clear_switch_();
  static const int kSwitchFieldNumber = 1;
  const ::std::string& switch_() const;
  void set_switch_(const ::std::string& value);
  #if LANG_CXX11
  void set_switch_(::std::string&& value);
  #endif
  void set_switch_(const char* value);
  void set_switch_(const char* value, size_t size);
  ::std::string* mutable_switch_();
  ::std::string* release_switch_();
  void set_allocated_switch_(::std::string* switch_);

  // string FlowSwitch = 2;
  void clear_flowswitch();
  static const int kFlowSwitchFieldNumber = 2;
  const ::std::string& flowswitch() const;
  void set_flowswitch(const ::std::string& value);
  #if LANG_CXX11
  void set_flowswitch(::std::string&& value);
  #endif
  void set_flowswitch(const char* value);
  void set_flowswitch(const char* value, size_t size);
  ::std::string* mutable_flowswitch();
  ::std::string* release_flowswitch();
  void set_allocated_flowswitch(::std::string* flowswitch);

  // string WarmUpSwitch = 3;
  void clear_warmupswitch();
  static const int kWarmUpSwitchFieldNumber = 3;
  const ::std::string& warmupswitch() const;
  void set_warmupswitch(const ::std::string& value);
  #if LANG_CXX11
  void set_warmupswitch(::std::string&& value);
  #endif
  void set_warmupswitch(const char* value);
  void set_warmupswitch(const char* value, size_t size);
  ::std::string* mutable_warmupswitch();
  ::std::string* release_warmupswitch();
  void set_allocated_warmupswitch(::std::string* warmupswitch);

  // string ShadeTheSunSwitch = 4;
  void clear_shadethesunswitch();
  static const int kShadeTheSunSwitchFieldNumber = 4;
  const ::std::string& shadethesunswitch() const;
  void set_shadethesunswitch(const ::std::string& value);
  #if LANG_CXX11
  void set_shadethesunswitch(::std::string&& value);
  #endif
  void set_shadethesunswitch(const char* value);
  void set_shadethesunswitch(const char* value, size_t size);
  ::std::string* mutable_shadethesunswitch();
  ::std::string* release_shadethesunswitch();
  void set_allocated_shadethesunswitch(::std::string* shadethesunswitch);

  // string rainSwitch = 5;
  void clear_rainswitch();
  static const int kRainSwitchFieldNumber = 5;
  const ::std::string& rainswitch() const;
  void set_rainswitch(const ::std::string& value);
  #if LANG_CXX11
  void set_rainswitch(::std::string&& value);
  #endif
  void set_rainswitch(const char* value);
  void set_rainswitch(const char* value, size_t size);
  ::std::string* mutable_rainswitch();
  ::std::string* release_rainswitch();
  void set_allocated_rainswitch(::std::string* rainswitch);

  // @@protoc_insertion_point(class_scope:pb.farmList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr switch__;
  ::google::protobuf::internal::ArenaStringPtr flowswitch_;
  ::google::protobuf::internal::ArenaStringPtr warmupswitch_;
  ::google::protobuf::internal::ArenaStringPtr shadethesunswitch_;
  ::google::protobuf::internal::ArenaStringPtr rainswitch_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultsfarmListImpl();
};
// -------------------------------------------------------------------

class lightList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.lightList) */ {
 public:
  lightList();
  virtual ~lightList();

  lightList(const lightList& from);

  inline lightList& operator=(const lightList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  lightList(lightList&& from) noexcept
    : lightList() {
    *this = ::std::move(from);
  }

  inline lightList& operator=(lightList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const lightList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const lightList* internal_default_instance() {
    return reinterpret_cast<const lightList*>(
               &_lightList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(lightList* other);
  friend void swap(lightList& a, lightList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline lightList* New() const PROTOBUF_FINAL { return New(NULL); }

  lightList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const lightList& from);
  void MergeFrom(const lightList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(lightList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.workMode WorkMode = 2;
  int workmode_size() const;
  void clear_workmode();
  static const int kWorkModeFieldNumber = 2;
  ::pb::workMode workmode(int index) const;
  void set_workmode(int index, ::pb::workMode value);
  void add_workmode(::pb::workMode value);
  const ::google::protobuf::RepeatedField<int>& workmode() const;
  ::google::protobuf::RepeatedField<int>* mutable_workmode();

  // repeated .pb.sceneMode Scene = 6;
  int scene_size() const;
  void clear_scene();
  static const int kSceneFieldNumber = 6;
  ::pb::sceneMode scene(int index) const;
  void set_scene(int index, ::pb::sceneMode value);
  void add_scene(::pb::sceneMode value);
  const ::google::protobuf::RepeatedField<int>& scene() const;
  ::google::protobuf::RepeatedField<int>* mutable_scene();

  // string Colour = 5;
  void clear_colour();
  static const int kColourFieldNumber = 5;
  const ::std::string& colour() const;
  void set_colour(const ::std::string& value);
  #if LANG_CXX11
  void set_colour(::std::string&& value);
  #endif
  void set_colour(const char* value);
  void set_colour(const char* value, size_t size);
  ::std::string* mutable_colour();
  ::std::string* release_colour();
  void set_allocated_colour(::std::string* colour);

  // string Control = 9;
  void clear_control();
  static const int kControlFieldNumber = 9;
  const ::std::string& control() const;
  void set_control(const ::std::string& value);
  #if LANG_CXX11
  void set_control(::std::string&& value);
  #endif
  void set_control(const char* value);
  void set_control(const char* value, size_t size);
  ::std::string* mutable_control();
  ::std::string* release_control();
  void set_allocated_control(::std::string* control);

  // string MicMusic = 14;
  void clear_micmusic();
  static const int kMicMusicFieldNumber = 14;
  const ::std::string& micmusic() const;
  void set_micmusic(const ::std::string& value);
  #if LANG_CXX11
  void set_micmusic(::std::string&& value);
  #endif
  void set_micmusic(const char* value);
  void set_micmusic(const char* value, size_t size);
  ::std::string* mutable_micmusic();
  ::std::string* release_micmusic();
  void set_allocated_micmusic(::std::string* micmusic);

  // string Music = 15;
  void clear_music();
  static const int kMusicFieldNumber = 15;
  const ::std::string& music() const;
  void set_music(const ::std::string& value);
  #if LANG_CXX11
  void set_music(::std::string&& value);
  #endif
  void set_music(const char* value);
  void set_music(const char* value, size_t size);
  ::std::string* mutable_music();
  ::std::string* release_music();
  void set_allocated_music(::std::string* music);

  // .pb.lightExtra lightExtra = 16;
  bool has_lightextra() const;
  void clear_lightextra();
  static const int kLightExtraFieldNumber = 16;
  const ::pb::lightExtra& lightextra() const;
  ::pb::lightExtra* release_lightextra();
  ::pb::lightExtra* mutable_lightextra();
  void set_allocated_lightextra(::pb::lightExtra* lightextra);

  // bool Switch = 1;
  void clear_switch_();
  static const int kSwitchFieldNumber = 1;
  bool switch_() const;
  void set_switch_(bool value);

  // uint32 Bright = 3;
  void clear_bright();
  static const int kBrightFieldNumber = 3;
  ::google::protobuf::uint32 bright() const;
  void set_bright(::google::protobuf::uint32 value);

  // uint32 Temp = 4;
  void clear_temp();
  static const int kTempFieldNumber = 4;
  ::google::protobuf::uint32 temp() const;
  void set_temp(::google::protobuf::uint32 value);

  // uint32 CountClose = 7;
  void clear_countclose();
  static const int kCountCloseFieldNumber = 7;
  ::google::protobuf::uint32 countclose() const;
  void set_countclose(::google::protobuf::uint32 value);

  // uint32 CountOpen = 8;
  void clear_countopen();
  static const int kCountOpenFieldNumber = 8;
  ::google::protobuf::uint32 countopen() const;
  void set_countopen(::google::protobuf::uint32 value);

  // uint32 Sleep = 10;
  void clear_sleep();
  static const int kSleepFieldNumber = 10;
  ::google::protobuf::uint32 sleep() const;
  void set_sleep(::google::protobuf::uint32 value);

  // uint32 WakeUp = 11;
  void clear_wakeup();
  static const int kWakeUpFieldNumber = 11;
  ::google::protobuf::uint32 wakeup() const;
  void set_wakeup(::google::protobuf::uint32 value);

  // uint32 PowerMemory = 12;
  void clear_powermemory();
  static const int kPowerMemoryFieldNumber = 12;
  ::google::protobuf::uint32 powermemory() const;
  void set_powermemory(::google::protobuf::uint32 value);

  // uint32 DoNotdisturb = 13;
  void clear_donotdisturb();
  static const int kDoNotdisturbFieldNumber = 13;
  ::google::protobuf::uint32 donotdisturb() const;
  void set_donotdisturb(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.lightList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> workmode_;
  mutable int _workmode_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> scene_;
  mutable int _scene_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr colour_;
  ::google::protobuf::internal::ArenaStringPtr control_;
  ::google::protobuf::internal::ArenaStringPtr micmusic_;
  ::google::protobuf::internal::ArenaStringPtr music_;
  ::pb::lightExtra* lightextra_;
  bool switch__;
  ::google::protobuf::uint32 bright_;
  ::google::protobuf::uint32 temp_;
  ::google::protobuf::uint32 countclose_;
  ::google::protobuf::uint32 countopen_;
  ::google::protobuf::uint32 sleep_;
  ::google::protobuf::uint32 wakeup_;
  ::google::protobuf::uint32 powermemory_;
  ::google::protobuf::uint32 donotdisturb_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultslightListImpl();
};
// -------------------------------------------------------------------

class lightExtra : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.lightExtra) */ {
 public:
  lightExtra();
  virtual ~lightExtra();

  lightExtra(const lightExtra& from);

  inline lightExtra& operator=(const lightExtra& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  lightExtra(lightExtra&& from) noexcept
    : lightExtra() {
    *this = ::std::move(from);
  }

  inline lightExtra& operator=(lightExtra&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const lightExtra& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const lightExtra* internal_default_instance() {
    return reinterpret_cast<const lightExtra*>(
               &_lightExtra_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(lightExtra* other);
  friend void swap(lightExtra& a, lightExtra& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline lightExtra* New() const PROTOBUF_FINAL { return New(NULL); }

  lightExtra* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const lightExtra& from);
  void MergeFrom(const lightExtra& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(lightExtra* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string MixRgbcw = 3;
  void clear_mixrgbcw();
  static const int kMixRgbcwFieldNumber = 3;
  const ::std::string& mixrgbcw() const;
  void set_mixrgbcw(const ::std::string& value);
  #if LANG_CXX11
  void set_mixrgbcw(::std::string&& value);
  #endif
  void set_mixrgbcw(const char* value);
  void set_mixrgbcw(const char* value, size_t size);
  ::std::string* mutable_mixrgbcw();
  ::std::string* release_mixrgbcw();
  void set_allocated_mixrgbcw(::std::string* mixrgbcw);

  // string SegmentDimming = 4;
  void clear_segmentdimming();
  static const int kSegmentDimmingFieldNumber = 4;
  const ::std::string& segmentdimming() const;
  void set_segmentdimming(const ::std::string& value);
  #if LANG_CXX11
  void set_segmentdimming(::std::string&& value);
  #endif
  void set_segmentdimming(const char* value);
  void set_segmentdimming(const char* value, size_t size);
  ::std::string* mutable_segmentdimming();
  ::std::string* release_segmentdimming();
  void set_allocated_segmentdimming(::std::string* segmentdimming);

  // string CycleTiming = 6;
  void clear_cycletiming();
  static const int kCycleTimingFieldNumber = 6;
  const ::std::string& cycletiming() const;
  void set_cycletiming(const ::std::string& value);
  #if LANG_CXX11
  void set_cycletiming(::std::string&& value);
  #endif
  void set_cycletiming(const char* value);
  void set_cycletiming(const char* value, size_t size);
  ::std::string* mutable_cycletiming();
  ::std::string* release_cycletiming();
  void set_allocated_cycletiming(::std::string* cycletiming);

  // string RandomTiming = 7;
  void clear_randomtiming();
  static const int kRandomTimingFieldNumber = 7;
  const ::std::string& randomtiming() const;
  void set_randomtiming(const ::std::string& value);
  #if LANG_CXX11
  void set_randomtiming(::std::string&& value);
  #endif
  void set_randomtiming(const char* value);
  void set_randomtiming(const char* value, size_t size);
  ::std::string* mutable_randomtiming();
  ::std::string* release_randomtiming();
  void set_allocated_randomtiming(::std::string* randomtiming);

  // uint32 SwitchGradint = 1;
  void clear_switchgradint();
  static const int kSwitchGradintFieldNumber = 1;
  ::google::protobuf::uint32 switchgradint() const;
  void set_switchgradint(::google::protobuf::uint32 value);

  // uint32 MixLightScene = 2;
  void clear_mixlightscene();
  static const int kMixLightSceneFieldNumber = 2;
  ::google::protobuf::uint32 mixlightscene() const;
  void set_mixlightscene(::google::protobuf::uint32 value);

  // bool SwitchNightLight = 5;
  void clear_switchnightlight();
  static const int kSwitchNightLightFieldNumber = 5;
  bool switchnightlight() const;
  void set_switchnightlight(bool value);

  // @@protoc_insertion_point(class_scope:pb.lightExtra)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mixrgbcw_;
  ::google::protobuf::internal::ArenaStringPtr segmentdimming_;
  ::google::protobuf::internal::ArenaStringPtr cycletiming_;
  ::google::protobuf::internal::ArenaStringPtr randomtiming_;
  ::google::protobuf::uint32 switchgradint_;
  ::google::protobuf::uint32 mixlightscene_;
  bool switchnightlight_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultslightExtraImpl();
};
// -------------------------------------------------------------------

class lightState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.lightState) */ {
 public:
  lightState();
  virtual ~lightState();

  lightState(const lightState& from);

  inline lightState& operator=(const lightState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  lightState(lightState&& from) noexcept
    : lightState() {
    *this = ::std::move(from);
  }

  inline lightState& operator=(lightState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const lightState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const lightState* internal_default_instance() {
    return reinterpret_cast<const lightState*>(
               &_lightState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(lightState* other);
  friend void swap(lightState& a, lightState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline lightState* New() const PROTOBUF_FINAL { return New(NULL); }

  lightState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const lightState& from);
  void MergeFrom(const lightState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(lightState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.lightState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultslightStateImpl();
};
// -------------------------------------------------------------------

class airConditioning : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.airConditioning) */ {
 public:
  airConditioning();
  virtual ~airConditioning();

  airConditioning(const airConditioning& from);

  inline airConditioning& operator=(const airConditioning& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  airConditioning(airConditioning&& from) noexcept
    : airConditioning() {
    *this = ::std::move(from);
  }

  inline airConditioning& operator=(airConditioning&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const airConditioning& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const airConditioning* internal_default_instance() {
    return reinterpret_cast<const airConditioning*>(
               &_airConditioning_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(airConditioning* other);
  friend void swap(airConditioning& a, airConditioning& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline airConditioning* New() const PROTOBUF_FINAL { return New(NULL); }

  airConditioning* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const airConditioning& from);
  void MergeFrom(const airConditioning& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(airConditioning* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.airConditioning)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultsairConditioningImpl();
};
// -------------------------------------------------------------------

class airConditioningList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.airConditioningList) */ {
 public:
  airConditioningList();
  virtual ~airConditioningList();

  airConditioningList(const airConditioningList& from);

  inline airConditioningList& operator=(const airConditioningList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  airConditioningList(airConditioningList&& from) noexcept
    : airConditioningList() {
    *this = ::std::move(from);
  }

  inline airConditioningList& operator=(airConditioningList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const airConditioningList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const airConditioningList* internal_default_instance() {
    return reinterpret_cast<const airConditioningList*>(
               &_airConditioningList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(airConditioningList* other);
  friend void swap(airConditioningList& a, airConditioningList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline airConditioningList* New() const PROTOBUF_FINAL { return New(NULL); }

  airConditioningList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const airConditioningList& from);
  void MergeFrom(const airConditioningList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(airConditioningList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.airConditioningMode AirConditioningMode = 2;
  void clear_airconditioningmode();
  static const int kAirConditioningModeFieldNumber = 2;
  ::pb::airConditioningMode airconditioningmode() const;
  void set_airconditioningmode(::pb::airConditioningMode value);

  // .pb.airConditioningFlowSpeed AirConditioningFlowSpeed = 3;
  void clear_airconditioningflowspeed();
  static const int kAirConditioningFlowSpeedFieldNumber = 3;
  ::pb::airConditioningFlowSpeed airconditioningflowspeed() const;
  void set_airconditioningflowspeed(::pb::airConditioningFlowSpeed value);

  // bool Switch = 1;
  void clear_switch_();
  static const int kSwitchFieldNumber = 1;
  bool switch_() const;
  void set_switch_(bool value);

  // bool Anion = 4;
  void clear_anion();
  static const int kAnionFieldNumber = 4;
  bool anion() const;
  void set_anion(bool value);

  // bool ChildLock = 5;
  void clear_childlock();
  static const int kChildLockFieldNumber = 5;
  bool childlock() const;
  void set_childlock(bool value);

  // bool Light = 6;
  void clear_light();
  static const int kLightFieldNumber = 6;
  bool light() const;
  void set_light(bool value);

  // bool Uv = 7;
  void clear_uv();
  static const int kUvFieldNumber = 7;
  bool uv() const;
  void set_uv(bool value);

  // bool Wet = 8;
  void clear_wet();
  static const int kWetFieldNumber = 8;
  bool wet() const;
  void set_wet(bool value);

  // bool FliterReset = 9;
  void clear_fliterreset();
  static const int kFliterResetFieldNumber = 9;
  bool fliterreset() const;
  void set_fliterreset(bool value);

  // bool SleepMode = 12;
  void clear_sleepmode();
  static const int kSleepModeFieldNumber = 12;
  bool sleepmode() const;
  void set_sleepmode(bool value);

  // uint32 SetTemp = 10;
  void clear_settemp();
  static const int kSetTempFieldNumber = 10;
  ::google::protobuf::uint32 settemp() const;
  void set_settemp(::google::protobuf::uint32 value);

  // uint32 SetHumi = 11;
  void clear_sethumi();
  static const int kSetHumiFieldNumber = 11;
  ::google::protobuf::uint32 sethumi() const;
  void set_sethumi(::google::protobuf::uint32 value);

  // bool ConstantTemp = 13;
  void clear_constanttemp();
  static const int kConstantTempFieldNumber = 13;
  bool constanttemp() const;
  void set_constanttemp(bool value);

  // bool ConstantHume = 14;
  void clear_constanthume();
  static const int kConstantHumeFieldNumber = 14;
  bool constanthume() const;
  void set_constanthume(bool value);

  // bool ConstantFresh = 15;
  void clear_constantfresh();
  static const int kConstantFreshFieldNumber = 15;
  bool constantfresh() const;
  void set_constantfresh(bool value);

  // uint32 FreshFanSpeed = 16;
  void clear_freshfanspeed();
  static const int kFreshFanSpeedFieldNumber = 16;
  ::google::protobuf::uint32 freshfanspeed() const;
  void set_freshfanspeed(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.airConditioningList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int airconditioningmode_;
  int airconditioningflowspeed_;
  bool switch__;
  bool anion_;
  bool childlock_;
  bool light_;
  bool uv_;
  bool wet_;
  bool fliterreset_;
  bool sleepmode_;
  ::google::protobuf::uint32 settemp_;
  ::google::protobuf::uint32 sethumi_;
  bool constanttemp_;
  bool constanthume_;
  bool constantfresh_;
  ::google::protobuf::uint32 freshfanspeed_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultsairConditioningListImpl();
};
// -------------------------------------------------------------------

class airConditioningState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.airConditioningState) */ {
 public:
  airConditioningState();
  virtual ~airConditioningState();

  airConditioningState(const airConditioningState& from);

  inline airConditioningState& operator=(const airConditioningState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  airConditioningState(airConditioningState&& from) noexcept
    : airConditioningState() {
    *this = ::std::move(from);
  }

  inline airConditioningState& operator=(airConditioningState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const airConditioningState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const airConditioningState* internal_default_instance() {
    return reinterpret_cast<const airConditioningState*>(
               &_airConditioningState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(airConditioningState* other);
  friend void swap(airConditioningState& a, airConditioningState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline airConditioningState* New() const PROTOBUF_FINAL { return New(NULL); }

  airConditioningState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const airConditioningState& from);
  void MergeFrom(const airConditioningState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(airConditioningState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Fault = 18;
  void clear_fault();
  static const int kFaultFieldNumber = 18;
  const ::std::string& fault() const;
  void set_fault(const ::std::string& value);
  #if LANG_CXX11
  void set_fault(::std::string&& value);
  #endif
  void set_fault(const char* value);
  void set_fault(const char* value, size_t size);
  ::std::string* mutable_fault();
  ::std::string* release_fault();
  void set_allocated_fault(::std::string* fault);

  // uint32 PM25 = 2;
  void clear_pm25();
  static const int kPM25FieldNumber = 2;
  ::google::protobuf::uint32 pm25() const;
  void set_pm25(::google::protobuf::uint32 value);

  // .pb.airConditioningMode AirConditioningMode = 3;
  void clear_airconditioningmode();
  static const int kAirConditioningModeFieldNumber = 3;
  ::pb::airConditioningMode airconditioningmode() const;
  void set_airconditioningmode(::pb::airConditioningMode value);

  // .pb.airConditioningFlowSpeed AirConditioningFlowSpeed = 4;
  void clear_airconditioningflowspeed();
  static const int kAirConditioningFlowSpeedFieldNumber = 4;
  ::pb::airConditioningFlowSpeed airconditioningflowspeed() const;
  void set_airconditioningflowspeed(::pb::airConditioningFlowSpeed value);

  // uint32 FilterLife = 5;
  void clear_filterlife();
  static const int kFilterLifeFieldNumber = 5;
  ::google::protobuf::uint32 filterlife() const;
  void set_filterlife(::google::protobuf::uint32 value);

  // bool Switch = 1;
  void clear_switch_();
  static const int kSwitchFieldNumber = 1;
  bool switch_() const;
  void set_switch_(bool value);

  // bool Anion = 6;
  void clear_anion();
  static const int kAnionFieldNumber = 6;
  bool anion() const;
  void set_anion(bool value);

  // bool ChildLock = 7;
  void clear_childlock();
  static const int kChildLockFieldNumber = 7;
  bool childlock() const;
  void set_childlock(bool value);

  // bool Light = 8;
  void clear_light();
  static const int kLightFieldNumber = 8;
  bool light() const;
  void set_light(bool value);

  // bool Uv = 9;
  void clear_uv();
  static const int kUvFieldNumber = 9;
  bool uv() const;
  void set_uv(bool value);

  // bool Wet = 10;
  void clear_wet();
  static const int kWetFieldNumber = 10;
  bool wet() const;
  void set_wet(bool value);

  // bool FliterReset = 11;
  void clear_fliterreset();
  static const int kFliterResetFieldNumber = 11;
  bool fliterreset() const;
  void set_fliterreset(bool value);

  // uint32 IndoorTemp = 12;
  void clear_indoortemp();
  static const int kIndoorTempFieldNumber = 12;
  ::google::protobuf::uint32 indoortemp() const;
  void set_indoortemp(::google::protobuf::uint32 value);

  // uint32 OutdoorTemp = 13;
  void clear_outdoortemp();
  static const int kOutdoorTempFieldNumber = 13;
  ::google::protobuf::uint32 outdoortemp() const;
  void set_outdoortemp(::google::protobuf::uint32 value);

  // uint32 IndoorHumidity = 14;
  void clear_indoorhumidity();
  static const int kIndoorHumidityFieldNumber = 14;
  ::google::protobuf::uint32 indoorhumidity() const;
  void set_indoorhumidity(::google::protobuf::uint32 value);

  // uint32 OutdoorHumidity = 15;
  void clear_outdoorhumidity();
  static const int kOutdoorHumidityFieldNumber = 15;
  ::google::protobuf::uint32 outdoorhumidity() const;
  void set_outdoorhumidity(::google::protobuf::uint32 value);

  // uint32 CO2 = 16;
  void clear_co2();
  static const int kCO2FieldNumber = 16;
  ::google::protobuf::uint32 co2() const;
  void set_co2(::google::protobuf::uint32 value);

  // uint32 Ch2oValue = 17;
  void clear_ch2ovalue();
  static const int kCh2OValueFieldNumber = 17;
  ::google::protobuf::uint32 ch2ovalue() const;
  void set_ch2ovalue(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.airConditioningState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fault_;
  ::google::protobuf::uint32 pm25_;
  int airconditioningmode_;
  int airconditioningflowspeed_;
  ::google::protobuf::uint32 filterlife_;
  bool switch__;
  bool anion_;
  bool childlock_;
  bool light_;
  bool uv_;
  bool wet_;
  bool fliterreset_;
  ::google::protobuf::uint32 indoortemp_;
  ::google::protobuf::uint32 outdoortemp_;
  ::google::protobuf::uint32 indoorhumidity_;
  ::google::protobuf::uint32 outdoorhumidity_;
  ::google::protobuf::uint32 co2_;
  ::google::protobuf::uint32 ch2ovalue_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultsairConditioningStateImpl();
};
// -------------------------------------------------------------------

class DevicedisconnReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.DevicedisconnReq) */ {
 public:
  DevicedisconnReq();
  virtual ~DevicedisconnReq();

  DevicedisconnReq(const DevicedisconnReq& from);

  inline DevicedisconnReq& operator=(const DevicedisconnReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DevicedisconnReq(DevicedisconnReq&& from) noexcept
    : DevicedisconnReq() {
    *this = ::std::move(from);
  }

  inline DevicedisconnReq& operator=(DevicedisconnReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DevicedisconnReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DevicedisconnReq* internal_default_instance() {
    return reinterpret_cast<const DevicedisconnReq*>(
               &_DevicedisconnReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(DevicedisconnReq* other);
  friend void swap(DevicedisconnReq& a, DevicedisconnReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DevicedisconnReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DevicedisconnReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DevicedisconnReq& from);
  void MergeFrom(const DevicedisconnReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DevicedisconnReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string DeviceId = 2;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 2;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // string MsgSeq = 3;
  void clear_msgseq();
  static const int kMsgSeqFieldNumber = 3;
  const ::std::string& msgseq() const;
  void set_msgseq(const ::std::string& value);
  #if LANG_CXX11
  void set_msgseq(::std::string&& value);
  #endif
  void set_msgseq(const char* value);
  void set_msgseq(const char* value, size_t size);
  ::std::string* mutable_msgseq();
  ::std::string* release_msgseq();
  void set_allocated_msgseq(::std::string* msgseq);

  // uint32 DeviceType = 1;
  void clear_devicetype();
  static const int kDeviceTypeFieldNumber = 1;
  ::google::protobuf::uint32 devicetype() const;
  void set_devicetype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.DevicedisconnReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::google::protobuf::internal::ArenaStringPtr msgseq_;
  ::google::protobuf::uint32 devicetype_;
  mutable int _cached_size_;
  friend struct ::protobuf_iot_2eproto::TableStruct;
  friend void ::protobuf_iot_2eproto::InitDefaultsDevicedisconnReqImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceregReq

// uint32 DeviceType = 1;
inline void DeviceregReq::clear_devicetype() {
  devicetype_ = 0u;
}
inline ::google::protobuf::uint32 DeviceregReq::devicetype() const {
  // @@protoc_insertion_point(field_get:pb.DeviceregReq.DeviceType)
  return devicetype_;
}
inline void DeviceregReq::set_devicetype(::google::protobuf::uint32 value) {
  
  devicetype_ = value;
  // @@protoc_insertion_point(field_set:pb.DeviceregReq.DeviceType)
}

// string DeviceRegCode = 2;
inline void DeviceregReq::clear_deviceregcode() {
  deviceregcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceregReq::deviceregcode() const {
  // @@protoc_insertion_point(field_get:pb.DeviceregReq.DeviceRegCode)
  return deviceregcode_.GetNoArena();
}
inline void DeviceregReq::set_deviceregcode(const ::std::string& value) {
  
  deviceregcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.DeviceregReq.DeviceRegCode)
}
#if LANG_CXX11
inline void DeviceregReq::set_deviceregcode(::std::string&& value) {
  
  deviceregcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.DeviceregReq.DeviceRegCode)
}
#endif
inline void DeviceregReq::set_deviceregcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deviceregcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DeviceregReq.DeviceRegCode)
}
inline void DeviceregReq::set_deviceregcode(const char* value, size_t size) {
  
  deviceregcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DeviceregReq.DeviceRegCode)
}
inline ::std::string* DeviceregReq::mutable_deviceregcode() {
  
  // @@protoc_insertion_point(field_mutable:pb.DeviceregReq.DeviceRegCode)
  return deviceregcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceregReq::release_deviceregcode() {
  // @@protoc_insertion_point(field_release:pb.DeviceregReq.DeviceRegCode)
  
  return deviceregcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceregReq::set_allocated_deviceregcode(::std::string* deviceregcode) {
  if (deviceregcode != NULL) {
    
  } else {
    
  }
  deviceregcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceregcode);
  // @@protoc_insertion_point(field_set_allocated:pb.DeviceregReq.DeviceRegCode)
}

// string DeviceId = 3;
inline void DeviceregReq::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceregReq::deviceid() const {
  // @@protoc_insertion_point(field_get:pb.DeviceregReq.DeviceId)
  return deviceid_.GetNoArena();
}
inline void DeviceregReq::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.DeviceregReq.DeviceId)
}
#if LANG_CXX11
inline void DeviceregReq::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.DeviceregReq.DeviceId)
}
#endif
inline void DeviceregReq::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DeviceregReq.DeviceId)
}
inline void DeviceregReq::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DeviceregReq.DeviceId)
}
inline ::std::string* DeviceregReq::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:pb.DeviceregReq.DeviceId)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceregReq::release_deviceid() {
  // @@protoc_insertion_point(field_release:pb.DeviceregReq.DeviceId)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceregReq::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:pb.DeviceregReq.DeviceId)
}

// string MsgSeq = 4;
inline void DeviceregReq::clear_msgseq() {
  msgseq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceregReq::msgseq() const {
  // @@protoc_insertion_point(field_get:pb.DeviceregReq.MsgSeq)
  return msgseq_.GetNoArena();
}
inline void DeviceregReq::set_msgseq(const ::std::string& value) {
  
  msgseq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.DeviceregReq.MsgSeq)
}
#if LANG_CXX11
inline void DeviceregReq::set_msgseq(::std::string&& value) {
  
  msgseq_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.DeviceregReq.MsgSeq)
}
#endif
inline void DeviceregReq::set_msgseq(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgseq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DeviceregReq.MsgSeq)
}
inline void DeviceregReq::set_msgseq(const char* value, size_t size) {
  
  msgseq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DeviceregReq.MsgSeq)
}
inline ::std::string* DeviceregReq::mutable_msgseq() {
  
  // @@protoc_insertion_point(field_mutable:pb.DeviceregReq.MsgSeq)
  return msgseq_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceregReq::release_msgseq() {
  // @@protoc_insertion_point(field_release:pb.DeviceregReq.MsgSeq)
  
  return msgseq_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceregReq::set_allocated_msgseq(::std::string* msgseq) {
  if (msgseq != NULL) {
    
  } else {
    
  }
  msgseq_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgseq);
  // @@protoc_insertion_point(field_set_allocated:pb.DeviceregReq.MsgSeq)
}

// string TempId = 5;
inline void DeviceregReq::clear_tempid() {
  tempid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceregReq::tempid() const {
  // @@protoc_insertion_point(field_get:pb.DeviceregReq.TempId)
  return tempid_.GetNoArena();
}
inline void DeviceregReq::set_tempid(const ::std::string& value) {
  
  tempid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.DeviceregReq.TempId)
}
#if LANG_CXX11
inline void DeviceregReq::set_tempid(::std::string&& value) {
  
  tempid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.DeviceregReq.TempId)
}
#endif
inline void DeviceregReq::set_tempid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tempid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DeviceregReq.TempId)
}
inline void DeviceregReq::set_tempid(const char* value, size_t size) {
  
  tempid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DeviceregReq.TempId)
}
inline ::std::string* DeviceregReq::mutable_tempid() {
  
  // @@protoc_insertion_point(field_mutable:pb.DeviceregReq.TempId)
  return tempid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceregReq::release_tempid() {
  // @@protoc_insertion_point(field_release:pb.DeviceregReq.TempId)
  
  return tempid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceregReq::set_allocated_tempid(::std::string* tempid) {
  if (tempid != NULL) {
    
  } else {
    
  }
  tempid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tempid);
  // @@protoc_insertion_point(field_set_allocated:pb.DeviceregReq.TempId)
}

// -------------------------------------------------------------------

// DeviceregResp

// uint32 DeviceType = 1;
inline void DeviceregResp::clear_devicetype() {
  devicetype_ = 0u;
}
inline ::google::protobuf::uint32 DeviceregResp::devicetype() const {
  // @@protoc_insertion_point(field_get:pb.DeviceregResp.DeviceType)
  return devicetype_;
}
inline void DeviceregResp::set_devicetype(::google::protobuf::uint32 value) {
  
  devicetype_ = value;
  // @@protoc_insertion_point(field_set:pb.DeviceregResp.DeviceType)
}

// string DeviceId = 2;
inline void DeviceregResp::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceregResp::deviceid() const {
  // @@protoc_insertion_point(field_get:pb.DeviceregResp.DeviceId)
  return deviceid_.GetNoArena();
}
inline void DeviceregResp::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.DeviceregResp.DeviceId)
}
#if LANG_CXX11
inline void DeviceregResp::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.DeviceregResp.DeviceId)
}
#endif
inline void DeviceregResp::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DeviceregResp.DeviceId)
}
inline void DeviceregResp::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DeviceregResp.DeviceId)
}
inline ::std::string* DeviceregResp::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:pb.DeviceregResp.DeviceId)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceregResp::release_deviceid() {
  // @@protoc_insertion_point(field_release:pb.DeviceregResp.DeviceId)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceregResp::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:pb.DeviceregResp.DeviceId)
}

// string BrokerAddr = 3;
inline void DeviceregResp::clear_brokeraddr() {
  brokeraddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceregResp::brokeraddr() const {
  // @@protoc_insertion_point(field_get:pb.DeviceregResp.BrokerAddr)
  return brokeraddr_.GetNoArena();
}
inline void DeviceregResp::set_brokeraddr(const ::std::string& value) {
  
  brokeraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.DeviceregResp.BrokerAddr)
}
#if LANG_CXX11
inline void DeviceregResp::set_brokeraddr(::std::string&& value) {
  
  brokeraddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.DeviceregResp.BrokerAddr)
}
#endif
inline void DeviceregResp::set_brokeraddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  brokeraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DeviceregResp.BrokerAddr)
}
inline void DeviceregResp::set_brokeraddr(const char* value, size_t size) {
  
  brokeraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DeviceregResp.BrokerAddr)
}
inline ::std::string* DeviceregResp::mutable_brokeraddr() {
  
  // @@protoc_insertion_point(field_mutable:pb.DeviceregResp.BrokerAddr)
  return brokeraddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceregResp::release_brokeraddr() {
  // @@protoc_insertion_point(field_release:pb.DeviceregResp.BrokerAddr)
  
  return brokeraddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceregResp::set_allocated_brokeraddr(::std::string* brokeraddr) {
  if (brokeraddr != NULL) {
    
  } else {
    
  }
  brokeraddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokeraddr);
  // @@protoc_insertion_point(field_set_allocated:pb.DeviceregResp.BrokerAddr)
}

// string MsgSeq = 4;
inline void DeviceregResp::clear_msgseq() {
  msgseq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceregResp::msgseq() const {
  // @@protoc_insertion_point(field_get:pb.DeviceregResp.MsgSeq)
  return msgseq_.GetNoArena();
}
inline void DeviceregResp::set_msgseq(const ::std::string& value) {
  
  msgseq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.DeviceregResp.MsgSeq)
}
#if LANG_CXX11
inline void DeviceregResp::set_msgseq(::std::string&& value) {
  
  msgseq_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.DeviceregResp.MsgSeq)
}
#endif
inline void DeviceregResp::set_msgseq(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgseq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DeviceregResp.MsgSeq)
}
inline void DeviceregResp::set_msgseq(const char* value, size_t size) {
  
  msgseq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DeviceregResp.MsgSeq)
}
inline ::std::string* DeviceregResp::mutable_msgseq() {
  
  // @@protoc_insertion_point(field_mutable:pb.DeviceregResp.MsgSeq)
  return msgseq_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceregResp::release_msgseq() {
  // @@protoc_insertion_point(field_release:pb.DeviceregResp.MsgSeq)
  
  return msgseq_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceregResp::set_allocated_msgseq(::std::string* msgseq) {
  if (msgseq != NULL) {
    
  } else {
    
  }
  msgseq_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgseq);
  // @@protoc_insertion_point(field_set_allocated:pb.DeviceregResp.MsgSeq)
}

// string ServerPublicKey = 5;
inline void DeviceregResp::clear_serverpublickey() {
  serverpublickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceregResp::serverpublickey() const {
  // @@protoc_insertion_point(field_get:pb.DeviceregResp.ServerPublicKey)
  return serverpublickey_.GetNoArena();
}
inline void DeviceregResp::set_serverpublickey(const ::std::string& value) {
  
  serverpublickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.DeviceregResp.ServerPublicKey)
}
#if LANG_CXX11
inline void DeviceregResp::set_serverpublickey(::std::string&& value) {
  
  serverpublickey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.DeviceregResp.ServerPublicKey)
}
#endif
inline void DeviceregResp::set_serverpublickey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serverpublickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DeviceregResp.ServerPublicKey)
}
inline void DeviceregResp::set_serverpublickey(const char* value, size_t size) {
  
  serverpublickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DeviceregResp.ServerPublicKey)
}
inline ::std::string* DeviceregResp::mutable_serverpublickey() {
  
  // @@protoc_insertion_point(field_mutable:pb.DeviceregResp.ServerPublicKey)
  return serverpublickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceregResp::release_serverpublickey() {
  // @@protoc_insertion_point(field_release:pb.DeviceregResp.ServerPublicKey)
  
  return serverpublickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceregResp::set_allocated_serverpublickey(::std::string* serverpublickey) {
  if (serverpublickey != NULL) {
    
  } else {
    
  }
  serverpublickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverpublickey);
  // @@protoc_insertion_point(field_set_allocated:pb.DeviceregResp.ServerPublicKey)
}

// string PrivateKey = 6;
inline void DeviceregResp::clear_privatekey() {
  privatekey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceregResp::privatekey() const {
  // @@protoc_insertion_point(field_get:pb.DeviceregResp.PrivateKey)
  return privatekey_.GetNoArena();
}
inline void DeviceregResp::set_privatekey(const ::std::string& value) {
  
  privatekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.DeviceregResp.PrivateKey)
}
#if LANG_CXX11
inline void DeviceregResp::set_privatekey(::std::string&& value) {
  
  privatekey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.DeviceregResp.PrivateKey)
}
#endif
inline void DeviceregResp::set_privatekey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  privatekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DeviceregResp.PrivateKey)
}
inline void DeviceregResp::set_privatekey(const char* value, size_t size) {
  
  privatekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DeviceregResp.PrivateKey)
}
inline ::std::string* DeviceregResp::mutable_privatekey() {
  
  // @@protoc_insertion_point(field_mutable:pb.DeviceregResp.PrivateKey)
  return privatekey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceregResp::release_privatekey() {
  // @@protoc_insertion_point(field_release:pb.DeviceregResp.PrivateKey)
  
  return privatekey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceregResp::set_allocated_privatekey(::std::string* privatekey) {
  if (privatekey != NULL) {
    
  } else {
    
  }
  privatekey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), privatekey);
  // @@protoc_insertion_point(field_set_allocated:pb.DeviceregResp.PrivateKey)
}

// string Error = 7;
inline void DeviceregResp::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceregResp::error() const {
  // @@protoc_insertion_point(field_get:pb.DeviceregResp.Error)
  return error_.GetNoArena();
}
inline void DeviceregResp::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.DeviceregResp.Error)
}
#if LANG_CXX11
inline void DeviceregResp::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.DeviceregResp.Error)
}
#endif
inline void DeviceregResp::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DeviceregResp.Error)
}
inline void DeviceregResp::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DeviceregResp.Error)
}
inline ::std::string* DeviceregResp::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:pb.DeviceregResp.Error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceregResp::release_error() {
  // @@protoc_insertion_point(field_release:pb.DeviceregResp.Error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceregResp::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:pb.DeviceregResp.Error)
}

// -------------------------------------------------------------------

// BaseCmd

// uint32 DeviceType = 1;
inline void BaseCmd::clear_devicetype() {
  devicetype_ = 0u;
}
inline ::google::protobuf::uint32 BaseCmd::devicetype() const {
  // @@protoc_insertion_point(field_get:pb.BaseCmd.DeviceType)
  return devicetype_;
}
inline void BaseCmd::set_devicetype(::google::protobuf::uint32 value) {
  
  devicetype_ = value;
  // @@protoc_insertion_point(field_set:pb.BaseCmd.DeviceType)
}

// string DeviceId = 2;
inline void BaseCmd::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BaseCmd::deviceid() const {
  // @@protoc_insertion_point(field_get:pb.BaseCmd.DeviceId)
  return deviceid_.GetNoArena();
}
inline void BaseCmd::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.BaseCmd.DeviceId)
}
#if LANG_CXX11
inline void BaseCmd::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BaseCmd.DeviceId)
}
#endif
inline void BaseCmd::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BaseCmd.DeviceId)
}
inline void BaseCmd::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BaseCmd.DeviceId)
}
inline ::std::string* BaseCmd::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:pb.BaseCmd.DeviceId)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseCmd::release_deviceid() {
  // @@protoc_insertion_point(field_release:pb.BaseCmd.DeviceId)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseCmd::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:pb.BaseCmd.DeviceId)
}

// string Ip = 3;
inline void BaseCmd::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BaseCmd::ip() const {
  // @@protoc_insertion_point(field_get:pb.BaseCmd.Ip)
  return ip_.GetNoArena();
}
inline void BaseCmd::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.BaseCmd.Ip)
}
#if LANG_CXX11
inline void BaseCmd::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BaseCmd.Ip)
}
#endif
inline void BaseCmd::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BaseCmd.Ip)
}
inline void BaseCmd::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BaseCmd.Ip)
}
inline ::std::string* BaseCmd::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:pb.BaseCmd.Ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseCmd::release_ip() {
  // @@protoc_insertion_point(field_release:pb.BaseCmd.Ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseCmd::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:pb.BaseCmd.Ip)
}

// string MsgSeq = 4;
inline void BaseCmd::clear_msgseq() {
  msgseq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BaseCmd::msgseq() const {
  // @@protoc_insertion_point(field_get:pb.BaseCmd.MsgSeq)
  return msgseq_.GetNoArena();
}
inline void BaseCmd::set_msgseq(const ::std::string& value) {
  
  msgseq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.BaseCmd.MsgSeq)
}
#if LANG_CXX11
inline void BaseCmd::set_msgseq(::std::string&& value) {
  
  msgseq_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BaseCmd.MsgSeq)
}
#endif
inline void BaseCmd::set_msgseq(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgseq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BaseCmd.MsgSeq)
}
inline void BaseCmd::set_msgseq(const char* value, size_t size) {
  
  msgseq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BaseCmd.MsgSeq)
}
inline ::std::string* BaseCmd::mutable_msgseq() {
  
  // @@protoc_insertion_point(field_mutable:pb.BaseCmd.MsgSeq)
  return msgseq_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseCmd::release_msgseq() {
  // @@protoc_insertion_point(field_release:pb.BaseCmd.MsgSeq)
  
  return msgseq_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseCmd::set_allocated_msgseq(::std::string* msgseq) {
  if (msgseq != NULL) {
    
  } else {
    
  }
  msgseq_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgseq);
  // @@protoc_insertion_point(field_set_allocated:pb.BaseCmd.MsgSeq)
}

// uint32 Mark = 5;
inline void BaseCmd::clear_mark() {
  mark_ = 0u;
}
inline ::google::protobuf::uint32 BaseCmd::mark() const {
  // @@protoc_insertion_point(field_get:pb.BaseCmd.Mark)
  return mark_;
}
inline void BaseCmd::set_mark(::google::protobuf::uint32 value) {
  
  mark_ = value;
  // @@protoc_insertion_point(field_set:pb.BaseCmd.Mark)
}

// string Cmd = 6;
inline void BaseCmd::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BaseCmd::cmd() const {
  // @@protoc_insertion_point(field_get:pb.BaseCmd.Cmd)
  return cmd_.GetNoArena();
}
inline void BaseCmd::set_cmd(const ::std::string& value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.BaseCmd.Cmd)
}
#if LANG_CXX11
inline void BaseCmd::set_cmd(::std::string&& value) {
  
  cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BaseCmd.Cmd)
}
#endif
inline void BaseCmd::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BaseCmd.Cmd)
}
inline void BaseCmd::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BaseCmd.Cmd)
}
inline ::std::string* BaseCmd::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:pb.BaseCmd.Cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseCmd::release_cmd() {
  // @@protoc_insertion_point(field_release:pb.BaseCmd.Cmd)
  
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseCmd::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:pb.BaseCmd.Cmd)
}

// string DeviceList = 7;
inline void BaseCmd::clear_devicelist() {
  devicelist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BaseCmd::devicelist() const {
  // @@protoc_insertion_point(field_get:pb.BaseCmd.DeviceList)
  return devicelist_.GetNoArena();
}
inline void BaseCmd::set_devicelist(const ::std::string& value) {
  
  devicelist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.BaseCmd.DeviceList)
}
#if LANG_CXX11
inline void BaseCmd::set_devicelist(::std::string&& value) {
  
  devicelist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BaseCmd.DeviceList)
}
#endif
inline void BaseCmd::set_devicelist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicelist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BaseCmd.DeviceList)
}
inline void BaseCmd::set_devicelist(const char* value, size_t size) {
  
  devicelist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BaseCmd.DeviceList)
}
inline ::std::string* BaseCmd::mutable_devicelist() {
  
  // @@protoc_insertion_point(field_mutable:pb.BaseCmd.DeviceList)
  return devicelist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseCmd::release_devicelist() {
  // @@protoc_insertion_point(field_release:pb.BaseCmd.DeviceList)
  
  return devicelist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseCmd::set_allocated_devicelist(::std::string* devicelist) {
  if (devicelist != NULL) {
    
  } else {
    
  }
  devicelist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicelist);
  // @@protoc_insertion_point(field_set_allocated:pb.BaseCmd.DeviceList)
}

// string Data = 8;
inline void BaseCmd::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BaseCmd::data() const {
  // @@protoc_insertion_point(field_get:pb.BaseCmd.Data)
  return data_.GetNoArena();
}
inline void BaseCmd::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.BaseCmd.Data)
}
#if LANG_CXX11
inline void BaseCmd::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BaseCmd.Data)
}
#endif
inline void BaseCmd::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BaseCmd.Data)
}
inline void BaseCmd::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BaseCmd.Data)
}
inline ::std::string* BaseCmd::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:pb.BaseCmd.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseCmd::release_data() {
  // @@protoc_insertion_point(field_release:pb.BaseCmd.Data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseCmd::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:pb.BaseCmd.Data)
}

// string ServerId = 9;
inline void BaseCmd::clear_serverid() {
  serverid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BaseCmd::serverid() const {
  // @@protoc_insertion_point(field_get:pb.BaseCmd.ServerId)
  return serverid_.GetNoArena();
}
inline void BaseCmd::set_serverid(const ::std::string& value) {
  
  serverid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.BaseCmd.ServerId)
}
#if LANG_CXX11
inline void BaseCmd::set_serverid(::std::string&& value) {
  
  serverid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BaseCmd.ServerId)
}
#endif
inline void BaseCmd::set_serverid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serverid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BaseCmd.ServerId)
}
inline void BaseCmd::set_serverid(const char* value, size_t size) {
  
  serverid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BaseCmd.ServerId)
}
inline ::std::string* BaseCmd::mutable_serverid() {
  
  // @@protoc_insertion_point(field_mutable:pb.BaseCmd.ServerId)
  return serverid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseCmd::release_serverid() {
  // @@protoc_insertion_point(field_release:pb.BaseCmd.ServerId)
  
  return serverid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseCmd::set_allocated_serverid(::std::string* serverid) {
  if (serverid != NULL) {
    
  } else {
    
  }
  serverid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverid);
  // @@protoc_insertion_point(field_set_allocated:pb.BaseCmd.ServerId)
}

// string UserName = 10;
inline void BaseCmd::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BaseCmd::username() const {
  // @@protoc_insertion_point(field_get:pb.BaseCmd.UserName)
  return username_.GetNoArena();
}
inline void BaseCmd::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.BaseCmd.UserName)
}
#if LANG_CXX11
inline void BaseCmd::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BaseCmd.UserName)
}
#endif
inline void BaseCmd::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BaseCmd.UserName)
}
inline void BaseCmd::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BaseCmd.UserName)
}
inline ::std::string* BaseCmd::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:pb.BaseCmd.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseCmd::release_username() {
  // @@protoc_insertion_point(field_release:pb.BaseCmd.UserName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseCmd::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:pb.BaseCmd.UserName)
}

// uint32 Error = 11;
inline void BaseCmd::clear_error() {
  error_ = 0u;
}
inline ::google::protobuf::uint32 BaseCmd::error() const {
  // @@protoc_insertion_point(field_get:pb.BaseCmd.Error)
  return error_;
}
inline void BaseCmd::set_error(::google::protobuf::uint32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:pb.BaseCmd.Error)
}

// string BrokerAddr = 12;
inline void BaseCmd::clear_brokeraddr() {
  brokeraddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BaseCmd::brokeraddr() const {
  // @@protoc_insertion_point(field_get:pb.BaseCmd.BrokerAddr)
  return brokeraddr_.GetNoArena();
}
inline void BaseCmd::set_brokeraddr(const ::std::string& value) {
  
  brokeraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.BaseCmd.BrokerAddr)
}
#if LANG_CXX11
inline void BaseCmd::set_brokeraddr(::std::string&& value) {
  
  brokeraddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BaseCmd.BrokerAddr)
}
#endif
inline void BaseCmd::set_brokeraddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  brokeraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BaseCmd.BrokerAddr)
}
inline void BaseCmd::set_brokeraddr(const char* value, size_t size) {
  
  brokeraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BaseCmd.BrokerAddr)
}
inline ::std::string* BaseCmd::mutable_brokeraddr() {
  
  // @@protoc_insertion_point(field_mutable:pb.BaseCmd.BrokerAddr)
  return brokeraddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseCmd::release_brokeraddr() {
  // @@protoc_insertion_point(field_release:pb.BaseCmd.BrokerAddr)
  
  return brokeraddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseCmd::set_allocated_brokeraddr(::std::string* brokeraddr) {
  if (brokeraddr != NULL) {
    
  } else {
    
  }
  brokeraddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokeraddr);
  // @@protoc_insertion_point(field_set_allocated:pb.BaseCmd.BrokerAddr)
}

// string GateId = 13;
inline void BaseCmd::clear_gateid() {
  gateid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BaseCmd::gateid() const {
  // @@protoc_insertion_point(field_get:pb.BaseCmd.GateId)
  return gateid_.GetNoArena();
}
inline void BaseCmd::set_gateid(const ::std::string& value) {
  
  gateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.BaseCmd.GateId)
}
#if LANG_CXX11
inline void BaseCmd::set_gateid(::std::string&& value) {
  
  gateid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BaseCmd.GateId)
}
#endif
inline void BaseCmd::set_gateid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BaseCmd.GateId)
}
inline void BaseCmd::set_gateid(const char* value, size_t size) {
  
  gateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BaseCmd.GateId)
}
inline ::std::string* BaseCmd::mutable_gateid() {
  
  // @@protoc_insertion_point(field_mutable:pb.BaseCmd.GateId)
  return gateid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseCmd::release_gateid() {
  // @@protoc_insertion_point(field_release:pb.BaseCmd.GateId)
  
  return gateid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseCmd::set_allocated_gateid(::std::string* gateid) {
  if (gateid != NULL) {
    
  } else {
    
  }
  gateid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateid);
  // @@protoc_insertion_point(field_set_allocated:pb.BaseCmd.GateId)
}

// string Token = 14;
inline void BaseCmd::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BaseCmd::token() const {
  // @@protoc_insertion_point(field_get:pb.BaseCmd.Token)
  return token_.GetNoArena();
}
inline void BaseCmd::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.BaseCmd.Token)
}
#if LANG_CXX11
inline void BaseCmd::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BaseCmd.Token)
}
#endif
inline void BaseCmd::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BaseCmd.Token)
}
inline void BaseCmd::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BaseCmd.Token)
}
inline ::std::string* BaseCmd::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:pb.BaseCmd.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseCmd::release_token() {
  // @@protoc_insertion_point(field_release:pb.BaseCmd.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseCmd::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:pb.BaseCmd.Token)
}

// -------------------------------------------------------------------

// GateData

// string GateId = 1;
inline void GateData::clear_gateid() {
  gateid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateData::gateid() const {
  // @@protoc_insertion_point(field_get:pb.GateData.GateId)
  return gateid_.GetNoArena();
}
inline void GateData::set_gateid(const ::std::string& value) {
  
  gateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.GateData.GateId)
}
#if LANG_CXX11
inline void GateData::set_gateid(::std::string&& value) {
  
  gateid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.GateData.GateId)
}
#endif
inline void GateData::set_gateid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.GateData.GateId)
}
inline void GateData::set_gateid(const char* value, size_t size) {
  
  gateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.GateData.GateId)
}
inline ::std::string* GateData::mutable_gateid() {
  
  // @@protoc_insertion_point(field_mutable:pb.GateData.GateId)
  return gateid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateData::release_gateid() {
  // @@protoc_insertion_point(field_release:pb.GateData.GateId)
  
  return gateid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateData::set_allocated_gateid(::std::string* gateid) {
  if (gateid != NULL) {
    
  } else {
    
  }
  gateid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateid);
  // @@protoc_insertion_point(field_set_allocated:pb.GateData.GateId)
}

// string Token = 2;
inline void GateData::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateData::token() const {
  // @@protoc_insertion_point(field_get:pb.GateData.Token)
  return token_.GetNoArena();
}
inline void GateData::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.GateData.Token)
}
#if LANG_CXX11
inline void GateData::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.GateData.Token)
}
#endif
inline void GateData::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.GateData.Token)
}
inline void GateData::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.GateData.Token)
}
inline ::std::string* GateData::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:pb.GateData.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateData::release_token() {
  // @@protoc_insertion_point(field_release:pb.GateData.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateData::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:pb.GateData.Token)
}

// string Server = 3;
inline void GateData::clear_server() {
  server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateData::server() const {
  // @@protoc_insertion_point(field_get:pb.GateData.Server)
  return server_.GetNoArena();
}
inline void GateData::set_server(const ::std::string& value) {
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.GateData.Server)
}
#if LANG_CXX11
inline void GateData::set_server(::std::string&& value) {
  
  server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.GateData.Server)
}
#endif
inline void GateData::set_server(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.GateData.Server)
}
inline void GateData::set_server(const char* value, size_t size) {
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.GateData.Server)
}
inline ::std::string* GateData::mutable_server() {
  
  // @@protoc_insertion_point(field_mutable:pb.GateData.Server)
  return server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateData::release_server() {
  // @@protoc_insertion_point(field_release:pb.GateData.Server)
  
  return server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateData::set_allocated_server(::std::string* server) {
  if (server != NULL) {
    
  } else {
    
  }
  server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server);
  // @@protoc_insertion_point(field_set_allocated:pb.GateData.Server)
}

// string BakServer = 4;
inline void GateData::clear_bakserver() {
  bakserver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateData::bakserver() const {
  // @@protoc_insertion_point(field_get:pb.GateData.BakServer)
  return bakserver_.GetNoArena();
}
inline void GateData::set_bakserver(const ::std::string& value) {
  
  bakserver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.GateData.BakServer)
}
#if LANG_CXX11
inline void GateData::set_bakserver(::std::string&& value) {
  
  bakserver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.GateData.BakServer)
}
#endif
inline void GateData::set_bakserver(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bakserver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.GateData.BakServer)
}
inline void GateData::set_bakserver(const char* value, size_t size) {
  
  bakserver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.GateData.BakServer)
}
inline ::std::string* GateData::mutable_bakserver() {
  
  // @@protoc_insertion_point(field_mutable:pb.GateData.BakServer)
  return bakserver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateData::release_bakserver() {
  // @@protoc_insertion_point(field_release:pb.GateData.BakServer)
  
  return bakserver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateData::set_allocated_bakserver(::std::string* bakserver) {
  if (bakserver != NULL) {
    
  } else {
    
  }
  bakserver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bakserver);
  // @@protoc_insertion_point(field_set_allocated:pb.GateData.BakServer)
}

// repeated .pb.cmdSetList CmdSet = 5;
inline int GateData::cmdset_size() const {
  return cmdset_.size();
}
inline void GateData::clear_cmdset() {
  cmdset_.Clear();
}
inline const ::pb::cmdSetList& GateData::cmdset(int index) const {
  // @@protoc_insertion_point(field_get:pb.GateData.CmdSet)
  return cmdset_.Get(index);
}
inline ::pb::cmdSetList* GateData::mutable_cmdset(int index) {
  // @@protoc_insertion_point(field_mutable:pb.GateData.CmdSet)
  return cmdset_.Mutable(index);
}
inline ::pb::cmdSetList* GateData::add_cmdset() {
  // @@protoc_insertion_point(field_add:pb.GateData.CmdSet)
  return cmdset_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::cmdSetList >*
GateData::mutable_cmdset() {
  // @@protoc_insertion_point(field_mutable_list:pb.GateData.CmdSet)
  return &cmdset_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::cmdSetList >&
GateData::cmdset() const {
  // @@protoc_insertion_point(field_list:pb.GateData.CmdSet)
  return cmdset_;
}

// repeated .pb.deviceList Device = 6;
inline int GateData::device_size() const {
  return device_.size();
}
inline void GateData::clear_device() {
  device_.Clear();
}
inline const ::pb::deviceList& GateData::device(int index) const {
  // @@protoc_insertion_point(field_get:pb.GateData.Device)
  return device_.Get(index);
}
inline ::pb::deviceList* GateData::mutable_device(int index) {
  // @@protoc_insertion_point(field_mutable:pb.GateData.Device)
  return device_.Mutable(index);
}
inline ::pb::deviceList* GateData::add_device() {
  // @@protoc_insertion_point(field_add:pb.GateData.Device)
  return device_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::deviceList >*
GateData::mutable_device() {
  // @@protoc_insertion_point(field_mutable_list:pb.GateData.Device)
  return &device_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::deviceList >&
GateData::device() const {
  // @@protoc_insertion_point(field_list:pb.GateData.Device)
  return device_;
}

// -------------------------------------------------------------------

// cmdSetList

// string Cmd = 1;
inline void cmdSetList::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cmdSetList::cmd() const {
  // @@protoc_insertion_point(field_get:pb.cmdSetList.Cmd)
  return cmd_.GetNoArena();
}
inline void cmdSetList::set_cmd(const ::std::string& value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.cmdSetList.Cmd)
}
#if LANG_CXX11
inline void cmdSetList::set_cmd(::std::string&& value) {
  
  cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.cmdSetList.Cmd)
}
#endif
inline void cmdSetList::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.cmdSetList.Cmd)
}
inline void cmdSetList::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.cmdSetList.Cmd)
}
inline ::std::string* cmdSetList::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:pb.cmdSetList.Cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cmdSetList::release_cmd() {
  // @@protoc_insertion_point(field_release:pb.cmdSetList.Cmd)
  
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cmdSetList::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:pb.cmdSetList.Cmd)
}

// repeated .pb.deviceList Device = 2;
inline int cmdSetList::device_size() const {
  return device_.size();
}
inline void cmdSetList::clear_device() {
  device_.Clear();
}
inline const ::pb::deviceList& cmdSetList::device(int index) const {
  // @@protoc_insertion_point(field_get:pb.cmdSetList.Device)
  return device_.Get(index);
}
inline ::pb::deviceList* cmdSetList::mutable_device(int index) {
  // @@protoc_insertion_point(field_mutable:pb.cmdSetList.Device)
  return device_.Mutable(index);
}
inline ::pb::deviceList* cmdSetList::add_device() {
  // @@protoc_insertion_point(field_add:pb.cmdSetList.Device)
  return device_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::deviceList >*
cmdSetList::mutable_device() {
  // @@protoc_insertion_point(field_mutable_list:pb.cmdSetList.Device)
  return &device_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::deviceList >&
cmdSetList::device() const {
  // @@protoc_insertion_point(field_list:pb.cmdSetList.Device)
  return device_;
}

// -------------------------------------------------------------------

// deviceList

// string DeviceId = 1;
inline void deviceList::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& deviceList::deviceid() const {
  // @@protoc_insertion_point(field_get:pb.deviceList.DeviceId)
  return deviceid_.GetNoArena();
}
inline void deviceList::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.deviceList.DeviceId)
}
#if LANG_CXX11
inline void deviceList::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.deviceList.DeviceId)
}
#endif
inline void deviceList::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.deviceList.DeviceId)
}
inline void deviceList::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.deviceList.DeviceId)
}
inline ::std::string* deviceList::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:pb.deviceList.DeviceId)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* deviceList::release_deviceid() {
  // @@protoc_insertion_point(field_release:pb.deviceList.DeviceId)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deviceList::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:pb.deviceList.DeviceId)
}

// string Name = 2;
inline void deviceList::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& deviceList::name() const {
  // @@protoc_insertion_point(field_get:pb.deviceList.Name)
  return name_.GetNoArena();
}
inline void deviceList::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.deviceList.Name)
}
#if LANG_CXX11
inline void deviceList::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.deviceList.Name)
}
#endif
inline void deviceList::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.deviceList.Name)
}
inline void deviceList::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.deviceList.Name)
}
inline ::std::string* deviceList::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.deviceList.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* deviceList::release_name() {
  // @@protoc_insertion_point(field_release:pb.deviceList.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deviceList::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.deviceList.Name)
}

// string Category = 3;
inline void deviceList::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& deviceList::category() const {
  // @@protoc_insertion_point(field_get:pb.deviceList.Category)
  return category_.GetNoArena();
}
inline void deviceList::set_category(const ::std::string& value) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.deviceList.Category)
}
#if LANG_CXX11
inline void deviceList::set_category(::std::string&& value) {
  
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.deviceList.Category)
}
#endif
inline void deviceList::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.deviceList.Category)
}
inline void deviceList::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.deviceList.Category)
}
inline ::std::string* deviceList::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:pb.deviceList.Category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* deviceList::release_category() {
  // @@protoc_insertion_point(field_release:pb.deviceList.Category)
  
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deviceList::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:pb.deviceList.Category)
}

// string Sleep = 4;
inline void deviceList::clear_sleep() {
  sleep_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& deviceList::sleep() const {
  // @@protoc_insertion_point(field_get:pb.deviceList.Sleep)
  return sleep_.GetNoArena();
}
inline void deviceList::set_sleep(const ::std::string& value) {
  
  sleep_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.deviceList.Sleep)
}
#if LANG_CXX11
inline void deviceList::set_sleep(::std::string&& value) {
  
  sleep_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.deviceList.Sleep)
}
#endif
inline void deviceList::set_sleep(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sleep_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.deviceList.Sleep)
}
inline void deviceList::set_sleep(const char* value, size_t size) {
  
  sleep_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.deviceList.Sleep)
}
inline ::std::string* deviceList::mutable_sleep() {
  
  // @@protoc_insertion_point(field_mutable:pb.deviceList.Sleep)
  return sleep_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* deviceList::release_sleep() {
  // @@protoc_insertion_point(field_release:pb.deviceList.Sleep)
  
  return sleep_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deviceList::set_allocated_sleep(::std::string* sleep) {
  if (sleep != NULL) {
    
  } else {
    
  }
  sleep_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sleep);
  // @@protoc_insertion_point(field_set_allocated:pb.deviceList.Sleep)
}

// string MsgSeq = 5;
inline void deviceList::clear_msgseq() {
  msgseq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& deviceList::msgseq() const {
  // @@protoc_insertion_point(field_get:pb.deviceList.MsgSeq)
  return msgseq_.GetNoArena();
}
inline void deviceList::set_msgseq(const ::std::string& value) {
  
  msgseq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.deviceList.MsgSeq)
}
#if LANG_CXX11
inline void deviceList::set_msgseq(::std::string&& value) {
  
  msgseq_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.deviceList.MsgSeq)
}
#endif
inline void deviceList::set_msgseq(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgseq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.deviceList.MsgSeq)
}
inline void deviceList::set_msgseq(const char* value, size_t size) {
  
  msgseq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.deviceList.MsgSeq)
}
inline ::std::string* deviceList::mutable_msgseq() {
  
  // @@protoc_insertion_point(field_mutable:pb.deviceList.MsgSeq)
  return msgseq_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* deviceList::release_msgseq() {
  // @@protoc_insertion_point(field_release:pb.deviceList.MsgSeq)
  
  return msgseq_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deviceList::set_allocated_msgseq(::std::string* msgseq) {
  if (msgseq != NULL) {
    
  } else {
    
  }
  msgseq_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgseq);
  // @@protoc_insertion_point(field_set_allocated:pb.deviceList.MsgSeq)
}

// .pb.digitalCtl DigitalCtl = 6;
inline void deviceList::clear_digitalctl() {
  digitalctl_ = 0;
}
inline ::pb::digitalCtl deviceList::digitalctl() const {
  // @@protoc_insertion_point(field_get:pb.deviceList.DigitalCtl)
  return static_cast< ::pb::digitalCtl >(digitalctl_);
}
inline void deviceList::set_digitalctl(::pb::digitalCtl value) {
  
  digitalctl_ = value;
  // @@protoc_insertion_point(field_set:pb.deviceList.DigitalCtl)
}

// .pb.generalList GeneralCtl = 7;
inline bool deviceList::has_generalctl() const {
  return this != internal_default_instance() && generalctl_ != NULL;
}
inline void deviceList::clear_generalctl() {
  if (GetArenaNoVirtual() == NULL && generalctl_ != NULL) {
    delete generalctl_;
  }
  generalctl_ = NULL;
}
inline const ::pb::generalList& deviceList::generalctl() const {
  const ::pb::generalList* p = generalctl_;
  // @@protoc_insertion_point(field_get:pb.deviceList.GeneralCtl)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::generalList*>(
      &::pb::_generalList_default_instance_);
}
inline ::pb::generalList* deviceList::release_generalctl() {
  // @@protoc_insertion_point(field_release:pb.deviceList.GeneralCtl)
  
  ::pb::generalList* temp = generalctl_;
  generalctl_ = NULL;
  return temp;
}
inline ::pb::generalList* deviceList::mutable_generalctl() {
  
  if (generalctl_ == NULL) {
    generalctl_ = new ::pb::generalList;
  }
  // @@protoc_insertion_point(field_mutable:pb.deviceList.GeneralCtl)
  return generalctl_;
}
inline void deviceList::set_allocated_generalctl(::pb::generalList* generalctl) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete generalctl_;
  }
  if (generalctl) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      generalctl = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, generalctl, submessage_arena);
    }
    
  } else {
    
  }
  generalctl_ = generalctl;
  // @@protoc_insertion_point(field_set_allocated:pb.deviceList.GeneralCtl)
}

// .pb.generalState GeneralState = 8;
inline bool deviceList::has_generalstate() const {
  return this != internal_default_instance() && generalstate_ != NULL;
}
inline void deviceList::clear_generalstate() {
  if (GetArenaNoVirtual() == NULL && generalstate_ != NULL) {
    delete generalstate_;
  }
  generalstate_ = NULL;
}
inline const ::pb::generalState& deviceList::generalstate() const {
  const ::pb::generalState* p = generalstate_;
  // @@protoc_insertion_point(field_get:pb.deviceList.GeneralState)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::generalState*>(
      &::pb::_generalState_default_instance_);
}
inline ::pb::generalState* deviceList::release_generalstate() {
  // @@protoc_insertion_point(field_release:pb.deviceList.GeneralState)
  
  ::pb::generalState* temp = generalstate_;
  generalstate_ = NULL;
  return temp;
}
inline ::pb::generalState* deviceList::mutable_generalstate() {
  
  if (generalstate_ == NULL) {
    generalstate_ = new ::pb::generalState;
  }
  // @@protoc_insertion_point(field_mutable:pb.deviceList.GeneralState)
  return generalstate_;
}
inline void deviceList::set_allocated_generalstate(::pb::generalState* generalstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete generalstate_;
  }
  if (generalstate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      generalstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, generalstate, submessage_arena);
    }
    
  } else {
    
  }
  generalstate_ = generalstate;
  // @@protoc_insertion_point(field_set_allocated:pb.deviceList.GeneralState)
}

// .pb.lightList LightCtl = 9;
inline bool deviceList::has_lightctl() const {
  return this != internal_default_instance() && lightctl_ != NULL;
}
inline void deviceList::clear_lightctl() {
  if (GetArenaNoVirtual() == NULL && lightctl_ != NULL) {
    delete lightctl_;
  }
  lightctl_ = NULL;
}
inline const ::pb::lightList& deviceList::lightctl() const {
  const ::pb::lightList* p = lightctl_;
  // @@protoc_insertion_point(field_get:pb.deviceList.LightCtl)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::lightList*>(
      &::pb::_lightList_default_instance_);
}
inline ::pb::lightList* deviceList::release_lightctl() {
  // @@protoc_insertion_point(field_release:pb.deviceList.LightCtl)
  
  ::pb::lightList* temp = lightctl_;
  lightctl_ = NULL;
  return temp;
}
inline ::pb::lightList* deviceList::mutable_lightctl() {
  
  if (lightctl_ == NULL) {
    lightctl_ = new ::pb::lightList;
  }
  // @@protoc_insertion_point(field_mutable:pb.deviceList.LightCtl)
  return lightctl_;
}
inline void deviceList::set_allocated_lightctl(::pb::lightList* lightctl) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lightctl_;
  }
  if (lightctl) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lightctl = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lightctl, submessage_arena);
    }
    
  } else {
    
  }
  lightctl_ = lightctl;
  // @@protoc_insertion_point(field_set_allocated:pb.deviceList.LightCtl)
}

// .pb.lightState LightState = 10;
inline bool deviceList::has_lightstate() const {
  return this != internal_default_instance() && lightstate_ != NULL;
}
inline void deviceList::clear_lightstate() {
  if (GetArenaNoVirtual() == NULL && lightstate_ != NULL) {
    delete lightstate_;
  }
  lightstate_ = NULL;
}
inline const ::pb::lightState& deviceList::lightstate() const {
  const ::pb::lightState* p = lightstate_;
  // @@protoc_insertion_point(field_get:pb.deviceList.LightState)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::lightState*>(
      &::pb::_lightState_default_instance_);
}
inline ::pb::lightState* deviceList::release_lightstate() {
  // @@protoc_insertion_point(field_release:pb.deviceList.LightState)
  
  ::pb::lightState* temp = lightstate_;
  lightstate_ = NULL;
  return temp;
}
inline ::pb::lightState* deviceList::mutable_lightstate() {
  
  if (lightstate_ == NULL) {
    lightstate_ = new ::pb::lightState;
  }
  // @@protoc_insertion_point(field_mutable:pb.deviceList.LightState)
  return lightstate_;
}
inline void deviceList::set_allocated_lightstate(::pb::lightState* lightstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lightstate_;
  }
  if (lightstate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lightstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lightstate, submessage_arena);
    }
    
  } else {
    
  }
  lightstate_ = lightstate;
  // @@protoc_insertion_point(field_set_allocated:pb.deviceList.LightState)
}

// .pb.airConditioningList AirConditioningCtl = 11;
inline bool deviceList::has_airconditioningctl() const {
  return this != internal_default_instance() && airconditioningctl_ != NULL;
}
inline void deviceList::clear_airconditioningctl() {
  if (GetArenaNoVirtual() == NULL && airconditioningctl_ != NULL) {
    delete airconditioningctl_;
  }
  airconditioningctl_ = NULL;
}
inline const ::pb::airConditioningList& deviceList::airconditioningctl() const {
  const ::pb::airConditioningList* p = airconditioningctl_;
  // @@protoc_insertion_point(field_get:pb.deviceList.AirConditioningCtl)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::airConditioningList*>(
      &::pb::_airConditioningList_default_instance_);
}
inline ::pb::airConditioningList* deviceList::release_airconditioningctl() {
  // @@protoc_insertion_point(field_release:pb.deviceList.AirConditioningCtl)
  
  ::pb::airConditioningList* temp = airconditioningctl_;
  airconditioningctl_ = NULL;
  return temp;
}
inline ::pb::airConditioningList* deviceList::mutable_airconditioningctl() {
  
  if (airconditioningctl_ == NULL) {
    airconditioningctl_ = new ::pb::airConditioningList;
  }
  // @@protoc_insertion_point(field_mutable:pb.deviceList.AirConditioningCtl)
  return airconditioningctl_;
}
inline void deviceList::set_allocated_airconditioningctl(::pb::airConditioningList* airconditioningctl) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete airconditioningctl_;
  }
  if (airconditioningctl) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      airconditioningctl = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, airconditioningctl, submessage_arena);
    }
    
  } else {
    
  }
  airconditioningctl_ = airconditioningctl;
  // @@protoc_insertion_point(field_set_allocated:pb.deviceList.AirConditioningCtl)
}

// .pb.airConditioningState AirConditioningState = 12;
inline bool deviceList::has_airconditioningstate() const {
  return this != internal_default_instance() && airconditioningstate_ != NULL;
}
inline void deviceList::clear_airconditioningstate() {
  if (GetArenaNoVirtual() == NULL && airconditioningstate_ != NULL) {
    delete airconditioningstate_;
  }
  airconditioningstate_ = NULL;
}
inline const ::pb::airConditioningState& deviceList::airconditioningstate() const {
  const ::pb::airConditioningState* p = airconditioningstate_;
  // @@protoc_insertion_point(field_get:pb.deviceList.AirConditioningState)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::airConditioningState*>(
      &::pb::_airConditioningState_default_instance_);
}
inline ::pb::airConditioningState* deviceList::release_airconditioningstate() {
  // @@protoc_insertion_point(field_release:pb.deviceList.AirConditioningState)
  
  ::pb::airConditioningState* temp = airconditioningstate_;
  airconditioningstate_ = NULL;
  return temp;
}
inline ::pb::airConditioningState* deviceList::mutable_airconditioningstate() {
  
  if (airconditioningstate_ == NULL) {
    airconditioningstate_ = new ::pb::airConditioningState;
  }
  // @@protoc_insertion_point(field_mutable:pb.deviceList.AirConditioningState)
  return airconditioningstate_;
}
inline void deviceList::set_allocated_airconditioningstate(::pb::airConditioningState* airconditioningstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete airconditioningstate_;
  }
  if (airconditioningstate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      airconditioningstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, airconditioningstate, submessage_arena);
    }
    
  } else {
    
  }
  airconditioningstate_ = airconditioningstate;
  // @@protoc_insertion_point(field_set_allocated:pb.deviceList.AirConditioningState)
}

// .pb.farmList FarmCtl = 13;
inline bool deviceList::has_farmctl() const {
  return this != internal_default_instance() && farmctl_ != NULL;
}
inline void deviceList::clear_farmctl() {
  if (GetArenaNoVirtual() == NULL && farmctl_ != NULL) {
    delete farmctl_;
  }
  farmctl_ = NULL;
}
inline const ::pb::farmList& deviceList::farmctl() const {
  const ::pb::farmList* p = farmctl_;
  // @@protoc_insertion_point(field_get:pb.deviceList.FarmCtl)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::farmList*>(
      &::pb::_farmList_default_instance_);
}
inline ::pb::farmList* deviceList::release_farmctl() {
  // @@protoc_insertion_point(field_release:pb.deviceList.FarmCtl)
  
  ::pb::farmList* temp = farmctl_;
  farmctl_ = NULL;
  return temp;
}
inline ::pb::farmList* deviceList::mutable_farmctl() {
  
  if (farmctl_ == NULL) {
    farmctl_ = new ::pb::farmList;
  }
  // @@protoc_insertion_point(field_mutable:pb.deviceList.FarmCtl)
  return farmctl_;
}
inline void deviceList::set_allocated_farmctl(::pb::farmList* farmctl) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete farmctl_;
  }
  if (farmctl) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      farmctl = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, farmctl, submessage_arena);
    }
    
  } else {
    
  }
  farmctl_ = farmctl;
  // @@protoc_insertion_point(field_set_allocated:pb.deviceList.FarmCtl)
}

// .pb.farmState FarmState = 14;
inline bool deviceList::has_farmstate() const {
  return this != internal_default_instance() && farmstate_ != NULL;
}
inline void deviceList::clear_farmstate() {
  if (GetArenaNoVirtual() == NULL && farmstate_ != NULL) {
    delete farmstate_;
  }
  farmstate_ = NULL;
}
inline const ::pb::farmState& deviceList::farmstate() const {
  const ::pb::farmState* p = farmstate_;
  // @@protoc_insertion_point(field_get:pb.deviceList.FarmState)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::farmState*>(
      &::pb::_farmState_default_instance_);
}
inline ::pb::farmState* deviceList::release_farmstate() {
  // @@protoc_insertion_point(field_release:pb.deviceList.FarmState)
  
  ::pb::farmState* temp = farmstate_;
  farmstate_ = NULL;
  return temp;
}
inline ::pb::farmState* deviceList::mutable_farmstate() {
  
  if (farmstate_ == NULL) {
    farmstate_ = new ::pb::farmState;
  }
  // @@protoc_insertion_point(field_mutable:pb.deviceList.FarmState)
  return farmstate_;
}
inline void deviceList::set_allocated_farmstate(::pb::farmState* farmstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete farmstate_;
  }
  if (farmstate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      farmstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, farmstate, submessage_arena);
    }
    
  } else {
    
  }
  farmstate_ = farmstate;
  // @@protoc_insertion_point(field_set_allocated:pb.deviceList.FarmState)
}

// .pb.multimediaList MultimediaCtl = 15;
inline bool deviceList::has_multimediactl() const {
  return this != internal_default_instance() && multimediactl_ != NULL;
}
inline void deviceList::clear_multimediactl() {
  if (GetArenaNoVirtual() == NULL && multimediactl_ != NULL) {
    delete multimediactl_;
  }
  multimediactl_ = NULL;
}
inline const ::pb::multimediaList& deviceList::multimediactl() const {
  const ::pb::multimediaList* p = multimediactl_;
  // @@protoc_insertion_point(field_get:pb.deviceList.MultimediaCtl)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::multimediaList*>(
      &::pb::_multimediaList_default_instance_);
}
inline ::pb::multimediaList* deviceList::release_multimediactl() {
  // @@protoc_insertion_point(field_release:pb.deviceList.MultimediaCtl)
  
  ::pb::multimediaList* temp = multimediactl_;
  multimediactl_ = NULL;
  return temp;
}
inline ::pb::multimediaList* deviceList::mutable_multimediactl() {
  
  if (multimediactl_ == NULL) {
    multimediactl_ = new ::pb::multimediaList;
  }
  // @@protoc_insertion_point(field_mutable:pb.deviceList.MultimediaCtl)
  return multimediactl_;
}
inline void deviceList::set_allocated_multimediactl(::pb::multimediaList* multimediactl) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete multimediactl_;
  }
  if (multimediactl) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      multimediactl = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, multimediactl, submessage_arena);
    }
    
  } else {
    
  }
  multimediactl_ = multimediactl;
  // @@protoc_insertion_point(field_set_allocated:pb.deviceList.MultimediaCtl)
}

// .pb.multimediaState MultimediaState = 16;
inline bool deviceList::has_multimediastate() const {
  return this != internal_default_instance() && multimediastate_ != NULL;
}
inline void deviceList::clear_multimediastate() {
  if (GetArenaNoVirtual() == NULL && multimediastate_ != NULL) {
    delete multimediastate_;
  }
  multimediastate_ = NULL;
}
inline const ::pb::multimediaState& deviceList::multimediastate() const {
  const ::pb::multimediaState* p = multimediastate_;
  // @@protoc_insertion_point(field_get:pb.deviceList.MultimediaState)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::multimediaState*>(
      &::pb::_multimediaState_default_instance_);
}
inline ::pb::multimediaState* deviceList::release_multimediastate() {
  // @@protoc_insertion_point(field_release:pb.deviceList.MultimediaState)
  
  ::pb::multimediaState* temp = multimediastate_;
  multimediastate_ = NULL;
  return temp;
}
inline ::pb::multimediaState* deviceList::mutable_multimediastate() {
  
  if (multimediastate_ == NULL) {
    multimediastate_ = new ::pb::multimediaState;
  }
  // @@protoc_insertion_point(field_mutable:pb.deviceList.MultimediaState)
  return multimediastate_;
}
inline void deviceList::set_allocated_multimediastate(::pb::multimediaState* multimediastate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete multimediastate_;
  }
  if (multimediastate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      multimediastate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, multimediastate, submessage_arena);
    }
    
  } else {
    
  }
  multimediastate_ = multimediastate;
  // @@protoc_insertion_point(field_set_allocated:pb.deviceList.MultimediaState)
}

// -------------------------------------------------------------------

// generalList

// string temperature = 1;
inline void generalList::clear_temperature() {
  temperature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& generalList::temperature() const {
  // @@protoc_insertion_point(field_get:pb.generalList.temperature)
  return temperature_.GetNoArena();
}
inline void generalList::set_temperature(const ::std::string& value) {
  
  temperature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.generalList.temperature)
}
#if LANG_CXX11
inline void generalList::set_temperature(::std::string&& value) {
  
  temperature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.generalList.temperature)
}
#endif
inline void generalList::set_temperature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  temperature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.generalList.temperature)
}
inline void generalList::set_temperature(const char* value, size_t size) {
  
  temperature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.generalList.temperature)
}
inline ::std::string* generalList::mutable_temperature() {
  
  // @@protoc_insertion_point(field_mutable:pb.generalList.temperature)
  return temperature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* generalList::release_temperature() {
  // @@protoc_insertion_point(field_release:pb.generalList.temperature)
  
  return temperature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void generalList::set_allocated_temperature(::std::string* temperature) {
  if (temperature != NULL) {
    
  } else {
    
  }
  temperature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), temperature);
  // @@protoc_insertion_point(field_set_allocated:pb.generalList.temperature)
}

// string Volume = 2;
inline void generalList::clear_volume() {
  volume_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& generalList::volume() const {
  // @@protoc_insertion_point(field_get:pb.generalList.Volume)
  return volume_.GetNoArena();
}
inline void generalList::set_volume(const ::std::string& value) {
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.generalList.Volume)
}
#if LANG_CXX11
inline void generalList::set_volume(::std::string&& value) {
  
  volume_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.generalList.Volume)
}
#endif
inline void generalList::set_volume(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.generalList.Volume)
}
inline void generalList::set_volume(const char* value, size_t size) {
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.generalList.Volume)
}
inline ::std::string* generalList::mutable_volume() {
  
  // @@protoc_insertion_point(field_mutable:pb.generalList.Volume)
  return volume_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* generalList::release_volume() {
  // @@protoc_insertion_point(field_release:pb.generalList.Volume)
  
  return volume_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void generalList::set_allocated_volume(::std::string* volume) {
  if (volume != NULL) {
    
  } else {
    
  }
  volume_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), volume);
  // @@protoc_insertion_point(field_set_allocated:pb.generalList.Volume)
}

// string Poslition = 3;
inline void generalList::clear_poslition() {
  poslition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& generalList::poslition() const {
  // @@protoc_insertion_point(field_get:pb.generalList.Poslition)
  return poslition_.GetNoArena();
}
inline void generalList::set_poslition(const ::std::string& value) {
  
  poslition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.generalList.Poslition)
}
#if LANG_CXX11
inline void generalList::set_poslition(::std::string&& value) {
  
  poslition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.generalList.Poslition)
}
#endif
inline void generalList::set_poslition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  poslition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.generalList.Poslition)
}
inline void generalList::set_poslition(const char* value, size_t size) {
  
  poslition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.generalList.Poslition)
}
inline ::std::string* generalList::mutable_poslition() {
  
  // @@protoc_insertion_point(field_mutable:pb.generalList.Poslition)
  return poslition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* generalList::release_poslition() {
  // @@protoc_insertion_point(field_release:pb.generalList.Poslition)
  
  return poslition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void generalList::set_allocated_poslition(::std::string* poslition) {
  if (poslition != NULL) {
    
  } else {
    
  }
  poslition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), poslition);
  // @@protoc_insertion_point(field_set_allocated:pb.generalList.Poslition)
}

// string Cmd = 4;
inline void generalList::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& generalList::cmd() const {
  // @@protoc_insertion_point(field_get:pb.generalList.Cmd)
  return cmd_.GetNoArena();
}
inline void generalList::set_cmd(const ::std::string& value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.generalList.Cmd)
}
#if LANG_CXX11
inline void generalList::set_cmd(::std::string&& value) {
  
  cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.generalList.Cmd)
}
#endif
inline void generalList::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.generalList.Cmd)
}
inline void generalList::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.generalList.Cmd)
}
inline ::std::string* generalList::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:pb.generalList.Cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* generalList::release_cmd() {
  // @@protoc_insertion_point(field_release:pb.generalList.Cmd)
  
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void generalList::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:pb.generalList.Cmd)
}

// bool Switch = 5;
inline void generalList::clear_switch_() {
  switch__ = false;
}
inline bool generalList::switch_() const {
  // @@protoc_insertion_point(field_get:pb.generalList.Switch)
  return switch__;
}
inline void generalList::set_switch_(bool value) {
  
  switch__ = value;
  // @@protoc_insertion_point(field_set:pb.generalList.Switch)
}

// string WindDirection = 6;
inline void generalList::clear_winddirection() {
  winddirection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& generalList::winddirection() const {
  // @@protoc_insertion_point(field_get:pb.generalList.WindDirection)
  return winddirection_.GetNoArena();
}
inline void generalList::set_winddirection(const ::std::string& value) {
  
  winddirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.generalList.WindDirection)
}
#if LANG_CXX11
inline void generalList::set_winddirection(::std::string&& value) {
  
  winddirection_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.generalList.WindDirection)
}
#endif
inline void generalList::set_winddirection(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  winddirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.generalList.WindDirection)
}
inline void generalList::set_winddirection(const char* value, size_t size) {
  
  winddirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.generalList.WindDirection)
}
inline ::std::string* generalList::mutable_winddirection() {
  
  // @@protoc_insertion_point(field_mutable:pb.generalList.WindDirection)
  return winddirection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* generalList::release_winddirection() {
  // @@protoc_insertion_point(field_release:pb.generalList.WindDirection)
  
  return winddirection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void generalList::set_allocated_winddirection(::std::string* winddirection) {
  if (winddirection != NULL) {
    
  } else {
    
  }
  winddirection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), winddirection);
  // @@protoc_insertion_point(field_set_allocated:pb.generalList.WindDirection)
}

// uint32 Mode = 7;
inline void generalList::clear_mode() {
  mode_ = 0u;
}
inline ::google::protobuf::uint32 generalList::mode() const {
  // @@protoc_insertion_point(field_get:pb.generalList.Mode)
  return mode_;
}
inline void generalList::set_mode(::google::protobuf::uint32 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:pb.generalList.Mode)
}

// uint32 Sensitivity = 8;
inline void generalList::clear_sensitivity() {
  sensitivity_ = 0u;
}
inline ::google::protobuf::uint32 generalList::sensitivity() const {
  // @@protoc_insertion_point(field_get:pb.generalList.Sensitivity)
  return sensitivity_;
}
inline void generalList::set_sensitivity(::google::protobuf::uint32 value) {
  
  sensitivity_ = value;
  // @@protoc_insertion_point(field_set:pb.generalList.Sensitivity)
}

// -------------------------------------------------------------------

// generalState

// bool Switch = 1;
inline void generalState::clear_switch_() {
  switch__ = false;
}
inline bool generalState::switch_() const {
  // @@protoc_insertion_point(field_get:pb.generalState.Switch)
  return switch__;
}
inline void generalState::set_switch_(bool value) {
  
  switch__ = value;
  // @@protoc_insertion_point(field_set:pb.generalState.Switch)
}

// string Temperature = 2;
inline void generalState::clear_temperature() {
  temperature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& generalState::temperature() const {
  // @@protoc_insertion_point(field_get:pb.generalState.Temperature)
  return temperature_.GetNoArena();
}
inline void generalState::set_temperature(const ::std::string& value) {
  
  temperature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.generalState.Temperature)
}
#if LANG_CXX11
inline void generalState::set_temperature(::std::string&& value) {
  
  temperature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.generalState.Temperature)
}
#endif
inline void generalState::set_temperature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  temperature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.generalState.Temperature)
}
inline void generalState::set_temperature(const char* value, size_t size) {
  
  temperature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.generalState.Temperature)
}
inline ::std::string* generalState::mutable_temperature() {
  
  // @@protoc_insertion_point(field_mutable:pb.generalState.Temperature)
  return temperature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* generalState::release_temperature() {
  // @@protoc_insertion_point(field_release:pb.generalState.Temperature)
  
  return temperature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void generalState::set_allocated_temperature(::std::string* temperature) {
  if (temperature != NULL) {
    
  } else {
    
  }
  temperature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), temperature);
  // @@protoc_insertion_point(field_set_allocated:pb.generalState.Temperature)
}

// string Volume = 3;
inline void generalState::clear_volume() {
  volume_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& generalState::volume() const {
  // @@protoc_insertion_point(field_get:pb.generalState.Volume)
  return volume_.GetNoArena();
}
inline void generalState::set_volume(const ::std::string& value) {
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.generalState.Volume)
}
#if LANG_CXX11
inline void generalState::set_volume(::std::string&& value) {
  
  volume_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.generalState.Volume)
}
#endif
inline void generalState::set_volume(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.generalState.Volume)
}
inline void generalState::set_volume(const char* value, size_t size) {
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.generalState.Volume)
}
inline ::std::string* generalState::mutable_volume() {
  
  // @@protoc_insertion_point(field_mutable:pb.generalState.Volume)
  return volume_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* generalState::release_volume() {
  // @@protoc_insertion_point(field_release:pb.generalState.Volume)
  
  return volume_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void generalState::set_allocated_volume(::std::string* volume) {
  if (volume != NULL) {
    
  } else {
    
  }
  volume_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), volume);
  // @@protoc_insertion_point(field_set_allocated:pb.generalState.Volume)
}

// string Poslition = 4;
inline void generalState::clear_poslition() {
  poslition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& generalState::poslition() const {
  // @@protoc_insertion_point(field_get:pb.generalState.Poslition)
  return poslition_.GetNoArena();
}
inline void generalState::set_poslition(const ::std::string& value) {
  
  poslition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.generalState.Poslition)
}
#if LANG_CXX11
inline void generalState::set_poslition(::std::string&& value) {
  
  poslition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.generalState.Poslition)
}
#endif
inline void generalState::set_poslition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  poslition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.generalState.Poslition)
}
inline void generalState::set_poslition(const char* value, size_t size) {
  
  poslition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.generalState.Poslition)
}
inline ::std::string* generalState::mutable_poslition() {
  
  // @@protoc_insertion_point(field_mutable:pb.generalState.Poslition)
  return poslition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* generalState::release_poslition() {
  // @@protoc_insertion_point(field_release:pb.generalState.Poslition)
  
  return poslition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void generalState::set_allocated_poslition(::std::string* poslition) {
  if (poslition != NULL) {
    
  } else {
    
  }
  poslition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), poslition);
  // @@protoc_insertion_point(field_set_allocated:pb.generalState.Poslition)
}

// string O2 = 5;
inline void generalState::clear_o2() {
  o2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& generalState::o2() const {
  // @@protoc_insertion_point(field_get:pb.generalState.O2)
  return o2_.GetNoArena();
}
inline void generalState::set_o2(const ::std::string& value) {
  
  o2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.generalState.O2)
}
#if LANG_CXX11
inline void generalState::set_o2(::std::string&& value) {
  
  o2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.generalState.O2)
}
#endif
inline void generalState::set_o2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  o2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.generalState.O2)
}
inline void generalState::set_o2(const char* value, size_t size) {
  
  o2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.generalState.O2)
}
inline ::std::string* generalState::mutable_o2() {
  
  // @@protoc_insertion_point(field_mutable:pb.generalState.O2)
  return o2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* generalState::release_o2() {
  // @@protoc_insertion_point(field_release:pb.generalState.O2)
  
  return o2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void generalState::set_allocated_o2(::std::string* o2) {
  if (o2 != NULL) {
    
  } else {
    
  }
  o2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), o2);
  // @@protoc_insertion_point(field_set_allocated:pb.generalState.O2)
}

// string CO2 = 6;
inline void generalState::clear_co2() {
  co2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& generalState::co2() const {
  // @@protoc_insertion_point(field_get:pb.generalState.CO2)
  return co2_.GetNoArena();
}
inline void generalState::set_co2(const ::std::string& value) {
  
  co2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.generalState.CO2)
}
#if LANG_CXX11
inline void generalState::set_co2(::std::string&& value) {
  
  co2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.generalState.CO2)
}
#endif
inline void generalState::set_co2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  co2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.generalState.CO2)
}
inline void generalState::set_co2(const char* value, size_t size) {
  
  co2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.generalState.CO2)
}
inline ::std::string* generalState::mutable_co2() {
  
  // @@protoc_insertion_point(field_mutable:pb.generalState.CO2)
  return co2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* generalState::release_co2() {
  // @@protoc_insertion_point(field_release:pb.generalState.CO2)
  
  return co2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void generalState::set_allocated_co2(::std::string* co2) {
  if (co2 != NULL) {
    
  } else {
    
  }
  co2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), co2);
  // @@protoc_insertion_point(field_set_allocated:pb.generalState.CO2)
}

// string CO = 7;
inline void generalState::clear_co() {
  co_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& generalState::co() const {
  // @@protoc_insertion_point(field_get:pb.generalState.CO)
  return co_.GetNoArena();
}
inline void generalState::set_co(const ::std::string& value) {
  
  co_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.generalState.CO)
}
#if LANG_CXX11
inline void generalState::set_co(::std::string&& value) {
  
  co_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.generalState.CO)
}
#endif
inline void generalState::set_co(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  co_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.generalState.CO)
}
inline void generalState::set_co(const char* value, size_t size) {
  
  co_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.generalState.CO)
}
inline ::std::string* generalState::mutable_co() {
  
  // @@protoc_insertion_point(field_mutable:pb.generalState.CO)
  return co_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* generalState::release_co() {
  // @@protoc_insertion_point(field_release:pb.generalState.CO)
  
  return co_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void generalState::set_allocated_co(::std::string* co) {
  if (co != NULL) {
    
  } else {
    
  }
  co_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), co);
  // @@protoc_insertion_point(field_set_allocated:pb.generalState.CO)
}

// string WindDirection = 8;
inline void generalState::clear_winddirection() {
  winddirection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& generalState::winddirection() const {
  // @@protoc_insertion_point(field_get:pb.generalState.WindDirection)
  return winddirection_.GetNoArena();
}
inline void generalState::set_winddirection(const ::std::string& value) {
  
  winddirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.generalState.WindDirection)
}
#if LANG_CXX11
inline void generalState::set_winddirection(::std::string&& value) {
  
  winddirection_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.generalState.WindDirection)
}
#endif
inline void generalState::set_winddirection(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  winddirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.generalState.WindDirection)
}
inline void generalState::set_winddirection(const char* value, size_t size) {
  
  winddirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.generalState.WindDirection)
}
inline ::std::string* generalState::mutable_winddirection() {
  
  // @@protoc_insertion_point(field_mutable:pb.generalState.WindDirection)
  return winddirection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* generalState::release_winddirection() {
  // @@protoc_insertion_point(field_release:pb.generalState.WindDirection)
  
  return winddirection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void generalState::set_allocated_winddirection(::std::string* winddirection) {
  if (winddirection != NULL) {
    
  } else {
    
  }
  winddirection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), winddirection);
  // @@protoc_insertion_point(field_set_allocated:pb.generalState.WindDirection)
}

// uint32 Mode = 9;
inline void generalState::clear_mode() {
  mode_ = 0u;
}
inline ::google::protobuf::uint32 generalState::mode() const {
  // @@protoc_insertion_point(field_get:pb.generalState.Mode)
  return mode_;
}
inline void generalState::set_mode(::google::protobuf::uint32 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:pb.generalState.Mode)
}

// uint32 Sensitivity = 10;
inline void generalState::clear_sensitivity() {
  sensitivity_ = 0u;
}
inline ::google::protobuf::uint32 generalState::sensitivity() const {
  // @@protoc_insertion_point(field_get:pb.generalState.Sensitivity)
  return sensitivity_;
}
inline void generalState::set_sensitivity(::google::protobuf::uint32 value) {
  
  sensitivity_ = value;
  // @@protoc_insertion_point(field_set:pb.generalState.Sensitivity)
}

// string LockState = 11;
inline void generalState::clear_lockstate() {
  lockstate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& generalState::lockstate() const {
  // @@protoc_insertion_point(field_get:pb.generalState.LockState)
  return lockstate_.GetNoArena();
}
inline void generalState::set_lockstate(const ::std::string& value) {
  
  lockstate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.generalState.LockState)
}
#if LANG_CXX11
inline void generalState::set_lockstate(::std::string&& value) {
  
  lockstate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.generalState.LockState)
}
#endif
inline void generalState::set_lockstate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lockstate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.generalState.LockState)
}
inline void generalState::set_lockstate(const char* value, size_t size) {
  
  lockstate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.generalState.LockState)
}
inline ::std::string* generalState::mutable_lockstate() {
  
  // @@protoc_insertion_point(field_mutable:pb.generalState.LockState)
  return lockstate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* generalState::release_lockstate() {
  // @@protoc_insertion_point(field_release:pb.generalState.LockState)
  
  return lockstate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void generalState::set_allocated_lockstate(::std::string* lockstate) {
  if (lockstate != NULL) {
    
  } else {
    
  }
  lockstate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lockstate);
  // @@protoc_insertion_point(field_set_allocated:pb.generalState.LockState)
}

// uint32 Beatingofheart = 12;
inline void generalState::clear_beatingofheart() {
  beatingofheart_ = 0u;
}
inline ::google::protobuf::uint32 generalState::beatingofheart() const {
  // @@protoc_insertion_point(field_get:pb.generalState.Beatingofheart)
  return beatingofheart_;
}
inline void generalState::set_beatingofheart(::google::protobuf::uint32 value) {
  
  beatingofheart_ = value;
  // @@protoc_insertion_point(field_set:pb.generalState.Beatingofheart)
}

// string Brigness = 13;
inline void generalState::clear_brigness() {
  brigness_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& generalState::brigness() const {
  // @@protoc_insertion_point(field_get:pb.generalState.Brigness)
  return brigness_.GetNoArena();
}
inline void generalState::set_brigness(const ::std::string& value) {
  
  brigness_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.generalState.Brigness)
}
#if LANG_CXX11
inline void generalState::set_brigness(::std::string&& value) {
  
  brigness_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.generalState.Brigness)
}
#endif
inline void generalState::set_brigness(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  brigness_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.generalState.Brigness)
}
inline void generalState::set_brigness(const char* value, size_t size) {
  
  brigness_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.generalState.Brigness)
}
inline ::std::string* generalState::mutable_brigness() {
  
  // @@protoc_insertion_point(field_mutable:pb.generalState.Brigness)
  return brigness_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* generalState::release_brigness() {
  // @@protoc_insertion_point(field_release:pb.generalState.Brigness)
  
  return brigness_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void generalState::set_allocated_brigness(::std::string* brigness) {
  if (brigness != NULL) {
    
  } else {
    
  }
  brigness_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brigness);
  // @@protoc_insertion_point(field_set_allocated:pb.generalState.Brigness)
}

// .pb.alarmList Alarm = 14;
inline bool generalState::has_alarm() const {
  return this != internal_default_instance() && alarm_ != NULL;
}
inline void generalState::clear_alarm() {
  if (GetArenaNoVirtual() == NULL && alarm_ != NULL) {
    delete alarm_;
  }
  alarm_ = NULL;
}
inline const ::pb::alarmList& generalState::alarm() const {
  const ::pb::alarmList* p = alarm_;
  // @@protoc_insertion_point(field_get:pb.generalState.Alarm)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::alarmList*>(
      &::pb::_alarmList_default_instance_);
}
inline ::pb::alarmList* generalState::release_alarm() {
  // @@protoc_insertion_point(field_release:pb.generalState.Alarm)
  
  ::pb::alarmList* temp = alarm_;
  alarm_ = NULL;
  return temp;
}
inline ::pb::alarmList* generalState::mutable_alarm() {
  
  if (alarm_ == NULL) {
    alarm_ = new ::pb::alarmList;
  }
  // @@protoc_insertion_point(field_mutable:pb.generalState.Alarm)
  return alarm_;
}
inline void generalState::set_allocated_alarm(::pb::alarmList* alarm) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete alarm_;
  }
  if (alarm) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      alarm = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, alarm, submessage_arena);
    }
    
  } else {
    
  }
  alarm_ = alarm;
  // @@protoc_insertion_point(field_set_allocated:pb.generalState.Alarm)
}

// -------------------------------------------------------------------

// multimediaList

// uint32 Path = 1;
inline void multimediaList::clear_path() {
  path_ = 0u;
}
inline ::google::protobuf::uint32 multimediaList::path() const {
  // @@protoc_insertion_point(field_get:pb.multimediaList.Path)
  return path_;
}
inline void multimediaList::set_path(::google::protobuf::uint32 value) {
  
  path_ = value;
  // @@protoc_insertion_point(field_set:pb.multimediaList.Path)
}

// bool Press = 2;
inline void multimediaList::clear_press() {
  press_ = false;
}
inline bool multimediaList::press() const {
  // @@protoc_insertion_point(field_get:pb.multimediaList.Press)
  return press_;
}
inline void multimediaList::set_press(bool value) {
  
  press_ = value;
  // @@protoc_insertion_point(field_set:pb.multimediaList.Press)
}

// bool Switch = 3;
inline void multimediaList::clear_switch_() {
  switch__ = false;
}
inline bool multimediaList::switch_() const {
  // @@protoc_insertion_point(field_get:pb.multimediaList.Switch)
  return switch__;
}
inline void multimediaList::set_switch_(bool value) {
  
  switch__ = value;
  // @@protoc_insertion_point(field_set:pb.multimediaList.Switch)
}

// bool Sort = 4;
inline void multimediaList::clear_sort() {
  sort_ = false;
}
inline bool multimediaList::sort() const {
  // @@protoc_insertion_point(field_get:pb.multimediaList.Sort)
  return sort_;
}
inline void multimediaList::set_sort(bool value) {
  
  sort_ = value;
  // @@protoc_insertion_point(field_set:pb.multimediaList.Sort)
}

// uint32 Scenario = 5;
inline void multimediaList::clear_scenario() {
  scenario_ = 0u;
}
inline ::google::protobuf::uint32 multimediaList::scenario() const {
  // @@protoc_insertion_point(field_get:pb.multimediaList.Scenario)
  return scenario_;
}
inline void multimediaList::set_scenario(::google::protobuf::uint32 value) {
  
  scenario_ = value;
  // @@protoc_insertion_point(field_set:pb.multimediaList.Scenario)
}

// uint32 Channel = 6;
inline void multimediaList::clear_channel() {
  channel_ = 0u;
}
inline ::google::protobuf::uint32 multimediaList::channel() const {
  // @@protoc_insertion_point(field_get:pb.multimediaList.Channel)
  return channel_;
}
inline void multimediaList::set_channel(::google::protobuf::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:pb.multimediaList.Channel)
}

// uint32 StartChannel = 7;
inline void multimediaList::clear_startchannel() {
  startchannel_ = 0u;
}
inline ::google::protobuf::uint32 multimediaList::startchannel() const {
  // @@protoc_insertion_point(field_get:pb.multimediaList.StartChannel)
  return startchannel_;
}
inline void multimediaList::set_startchannel(::google::protobuf::uint32 value) {
  
  startchannel_ = value;
  // @@protoc_insertion_point(field_set:pb.multimediaList.StartChannel)
}

// uint32 EndChannel = 8;
inline void multimediaList::clear_endchannel() {
  endchannel_ = 0u;
}
inline ::google::protobuf::uint32 multimediaList::endchannel() const {
  // @@protoc_insertion_point(field_get:pb.multimediaList.EndChannel)
  return endchannel_;
}
inline void multimediaList::set_endchannel(::google::protobuf::uint32 value) {
  
  endchannel_ = value;
  // @@protoc_insertion_point(field_set:pb.multimediaList.EndChannel)
}

// uint32 Volume = 9;
inline void multimediaList::clear_volume() {
  volume_ = 0u;
}
inline ::google::protobuf::uint32 multimediaList::volume() const {
  // @@protoc_insertion_point(field_get:pb.multimediaList.Volume)
  return volume_;
}
inline void multimediaList::set_volume(::google::protobuf::uint32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:pb.multimediaList.Volume)
}

// bool Mute = 10;
inline void multimediaList::clear_mute() {
  mute_ = false;
}
inline bool multimediaList::mute() const {
  // @@protoc_insertion_point(field_get:pb.multimediaList.Mute)
  return mute_;
}
inline void multimediaList::set_mute(bool value) {
  
  mute_ = value;
  // @@protoc_insertion_point(field_set:pb.multimediaList.Mute)
}

// uint32 Mode = 11;
inline void multimediaList::clear_mode() {
  mode_ = 0u;
}
inline ::google::protobuf::uint32 multimediaList::mode() const {
  // @@protoc_insertion_point(field_get:pb.multimediaList.Mode)
  return mode_;
}
inline void multimediaList::set_mode(::google::protobuf::uint32 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:pb.multimediaList.Mode)
}

// string MeetingName = 12;
inline void multimediaList::clear_meetingname() {
  meetingname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& multimediaList::meetingname() const {
  // @@protoc_insertion_point(field_get:pb.multimediaList.MeetingName)
  return meetingname_.GetNoArena();
}
inline void multimediaList::set_meetingname(const ::std::string& value) {
  
  meetingname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.multimediaList.MeetingName)
}
#if LANG_CXX11
inline void multimediaList::set_meetingname(::std::string&& value) {
  
  meetingname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.multimediaList.MeetingName)
}
#endif
inline void multimediaList::set_meetingname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  meetingname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.multimediaList.MeetingName)
}
inline void multimediaList::set_meetingname(const char* value, size_t size) {
  
  meetingname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.multimediaList.MeetingName)
}
inline ::std::string* multimediaList::mutable_meetingname() {
  
  // @@protoc_insertion_point(field_mutable:pb.multimediaList.MeetingName)
  return meetingname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* multimediaList::release_meetingname() {
  // @@protoc_insertion_point(field_release:pb.multimediaList.MeetingName)
  
  return meetingname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void multimediaList::set_allocated_meetingname(::std::string* meetingname) {
  if (meetingname != NULL) {
    
  } else {
    
  }
  meetingname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meetingname);
  // @@protoc_insertion_point(field_set_allocated:pb.multimediaList.MeetingName)
}

// uint32 State = 13;
inline void multimediaList::clear_state() {
  state_ = 0u;
}
inline ::google::protobuf::uint32 multimediaList::state() const {
  // @@protoc_insertion_point(field_get:pb.multimediaList.State)
  return state_;
}
inline void multimediaList::set_state(::google::protobuf::uint32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:pb.multimediaList.State)
}

// .pb.dataParm Data = 14;
inline bool multimediaList::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline void multimediaList::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
inline const ::pb::dataParm& multimediaList::data() const {
  const ::pb::dataParm* p = data_;
  // @@protoc_insertion_point(field_get:pb.multimediaList.Data)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::dataParm*>(
      &::pb::_dataParm_default_instance_);
}
inline ::pb::dataParm* multimediaList::release_data() {
  // @@protoc_insertion_point(field_release:pb.multimediaList.Data)
  
  ::pb::dataParm* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::pb::dataParm* multimediaList::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::pb::dataParm;
  }
  // @@protoc_insertion_point(field_mutable:pb.multimediaList.Data)
  return data_;
}
inline void multimediaList::set_allocated_data(::pb::dataParm* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:pb.multimediaList.Data)
}

// -------------------------------------------------------------------

// dataParm

// uint32 DevType = 1;
inline void dataParm::clear_devtype() {
  devtype_ = 0u;
}
inline ::google::protobuf::uint32 dataParm::devtype() const {
  // @@protoc_insertion_point(field_get:pb.dataParm.DevType)
  return devtype_;
}
inline void dataParm::set_devtype(::google::protobuf::uint32 value) {
  
  devtype_ = value;
  // @@protoc_insertion_point(field_set:pb.dataParm.DevType)
}

// string DevIp = 2;
inline void dataParm::clear_devip() {
  devip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& dataParm::devip() const {
  // @@protoc_insertion_point(field_get:pb.dataParm.DevIp)
  return devip_.GetNoArena();
}
inline void dataParm::set_devip(const ::std::string& value) {
  
  devip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.dataParm.DevIp)
}
#if LANG_CXX11
inline void dataParm::set_devip(::std::string&& value) {
  
  devip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.dataParm.DevIp)
}
#endif
inline void dataParm::set_devip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.dataParm.DevIp)
}
inline void dataParm::set_devip(const char* value, size_t size) {
  
  devip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.dataParm.DevIp)
}
inline ::std::string* dataParm::mutable_devip() {
  
  // @@protoc_insertion_point(field_mutable:pb.dataParm.DevIp)
  return devip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dataParm::release_devip() {
  // @@protoc_insertion_point(field_release:pb.dataParm.DevIp)
  
  return devip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dataParm::set_allocated_devip(::std::string* devip) {
  if (devip != NULL) {
    
  } else {
    
  }
  devip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devip);
  // @@protoc_insertion_point(field_set_allocated:pb.dataParm.DevIp)
}

// string DevPort = 3;
inline void dataParm::clear_devport() {
  devport_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& dataParm::devport() const {
  // @@protoc_insertion_point(field_get:pb.dataParm.DevPort)
  return devport_.GetNoArena();
}
inline void dataParm::set_devport(const ::std::string& value) {
  
  devport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.dataParm.DevPort)
}
#if LANG_CXX11
inline void dataParm::set_devport(::std::string&& value) {
  
  devport_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.dataParm.DevPort)
}
#endif
inline void dataParm::set_devport(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.dataParm.DevPort)
}
inline void dataParm::set_devport(const char* value, size_t size) {
  
  devport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.dataParm.DevPort)
}
inline ::std::string* dataParm::mutable_devport() {
  
  // @@protoc_insertion_point(field_mutable:pb.dataParm.DevPort)
  return devport_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dataParm::release_devport() {
  // @@protoc_insertion_point(field_release:pb.dataParm.DevPort)
  
  return devport_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dataParm::set_allocated_devport(::std::string* devport) {
  if (devport != NULL) {
    
  } else {
    
  }
  devport_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devport);
  // @@protoc_insertion_point(field_set_allocated:pb.dataParm.DevPort)
}

// string DevUsername = 4;
inline void dataParm::clear_devusername() {
  devusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& dataParm::devusername() const {
  // @@protoc_insertion_point(field_get:pb.dataParm.DevUsername)
  return devusername_.GetNoArena();
}
inline void dataParm::set_devusername(const ::std::string& value) {
  
  devusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.dataParm.DevUsername)
}
#if LANG_CXX11
inline void dataParm::set_devusername(::std::string&& value) {
  
  devusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.dataParm.DevUsername)
}
#endif
inline void dataParm::set_devusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.dataParm.DevUsername)
}
inline void dataParm::set_devusername(const char* value, size_t size) {
  
  devusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.dataParm.DevUsername)
}
inline ::std::string* dataParm::mutable_devusername() {
  
  // @@protoc_insertion_point(field_mutable:pb.dataParm.DevUsername)
  return devusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dataParm::release_devusername() {
  // @@protoc_insertion_point(field_release:pb.dataParm.DevUsername)
  
  return devusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dataParm::set_allocated_devusername(::std::string* devusername) {
  if (devusername != NULL) {
    
  } else {
    
  }
  devusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devusername);
  // @@protoc_insertion_point(field_set_allocated:pb.dataParm.DevUsername)
}

// string DevPassword = 5;
inline void dataParm::clear_devpassword() {
  devpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& dataParm::devpassword() const {
  // @@protoc_insertion_point(field_get:pb.dataParm.DevPassword)
  return devpassword_.GetNoArena();
}
inline void dataParm::set_devpassword(const ::std::string& value) {
  
  devpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.dataParm.DevPassword)
}
#if LANG_CXX11
inline void dataParm::set_devpassword(::std::string&& value) {
  
  devpassword_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.dataParm.DevPassword)
}
#endif
inline void dataParm::set_devpassword(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.dataParm.DevPassword)
}
inline void dataParm::set_devpassword(const char* value, size_t size) {
  
  devpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.dataParm.DevPassword)
}
inline ::std::string* dataParm::mutable_devpassword() {
  
  // @@protoc_insertion_point(field_mutable:pb.dataParm.DevPassword)
  return devpassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dataParm::release_devpassword() {
  // @@protoc_insertion_point(field_release:pb.dataParm.DevPassword)
  
  return devpassword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dataParm::set_allocated_devpassword(::std::string* devpassword) {
  if (devpassword != NULL) {
    
  } else {
    
  }
  devpassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devpassword);
  // @@protoc_insertion_point(field_set_allocated:pb.dataParm.DevPassword)
}

// -------------------------------------------------------------------

// multimediaState

// .pb.volumeState Volume = 1;
inline bool multimediaState::has_volume() const {
  return this != internal_default_instance() && volume_ != NULL;
}
inline void multimediaState::clear_volume() {
  if (GetArenaNoVirtual() == NULL && volume_ != NULL) {
    delete volume_;
  }
  volume_ = NULL;
}
inline const ::pb::volumeState& multimediaState::volume() const {
  const ::pb::volumeState* p = volume_;
  // @@protoc_insertion_point(field_get:pb.multimediaState.Volume)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::volumeState*>(
      &::pb::_volumeState_default_instance_);
}
inline ::pb::volumeState* multimediaState::release_volume() {
  // @@protoc_insertion_point(field_release:pb.multimediaState.Volume)
  
  ::pb::volumeState* temp = volume_;
  volume_ = NULL;
  return temp;
}
inline ::pb::volumeState* multimediaState::mutable_volume() {
  
  if (volume_ == NULL) {
    volume_ = new ::pb::volumeState;
  }
  // @@protoc_insertion_point(field_mutable:pb.multimediaState.Volume)
  return volume_;
}
inline void multimediaState::set_allocated_volume(::pb::volumeState* volume) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete volume_;
  }
  if (volume) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      volume = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, volume, submessage_arena);
    }
    
  } else {
    
  }
  volume_ = volume;
  // @@protoc_insertion_point(field_set_allocated:pb.multimediaState.Volume)
}

// -------------------------------------------------------------------

// volumeState

// .pb.outputState Output = 1;
inline bool volumeState::has_output() const {
  return this != internal_default_instance() && output_ != NULL;
}
inline void volumeState::clear_output() {
  if (GetArenaNoVirtual() == NULL && output_ != NULL) {
    delete output_;
  }
  output_ = NULL;
}
inline const ::pb::outputState& volumeState::output() const {
  const ::pb::outputState* p = output_;
  // @@protoc_insertion_point(field_get:pb.volumeState.Output)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::outputState*>(
      &::pb::_outputState_default_instance_);
}
inline ::pb::outputState* volumeState::release_output() {
  // @@protoc_insertion_point(field_release:pb.volumeState.Output)
  
  ::pb::outputState* temp = output_;
  output_ = NULL;
  return temp;
}
inline ::pb::outputState* volumeState::mutable_output() {
  
  if (output_ == NULL) {
    output_ = new ::pb::outputState;
  }
  // @@protoc_insertion_point(field_mutable:pb.volumeState.Output)
  return output_;
}
inline void volumeState::set_allocated_output(::pb::outputState* output) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete output_;
  }
  if (output) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      output = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    
  } else {
    
  }
  output_ = output;
  // @@protoc_insertion_point(field_set_allocated:pb.volumeState.Output)
}

// .pb.outputState Input = 2;
inline bool volumeState::has_input() const {
  return this != internal_default_instance() && input_ != NULL;
}
inline void volumeState::clear_input() {
  if (GetArenaNoVirtual() == NULL && input_ != NULL) {
    delete input_;
  }
  input_ = NULL;
}
inline const ::pb::outputState& volumeState::input() const {
  const ::pb::outputState* p = input_;
  // @@protoc_insertion_point(field_get:pb.volumeState.Input)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::outputState*>(
      &::pb::_outputState_default_instance_);
}
inline ::pb::outputState* volumeState::release_input() {
  // @@protoc_insertion_point(field_release:pb.volumeState.Input)
  
  ::pb::outputState* temp = input_;
  input_ = NULL;
  return temp;
}
inline ::pb::outputState* volumeState::mutable_input() {
  
  if (input_ == NULL) {
    input_ = new ::pb::outputState;
  }
  // @@protoc_insertion_point(field_mutable:pb.volumeState.Input)
  return input_;
}
inline void volumeState::set_allocated_input(::pb::outputState* input) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete input_;
  }
  if (input) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      input = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:pb.volumeState.Input)
}

// -------------------------------------------------------------------

// outputState

// repeated .pb.channelValue ChannelValue = 1;
inline int outputState::channelvalue_size() const {
  return channelvalue_.size();
}
inline void outputState::clear_channelvalue() {
  channelvalue_.Clear();
}
inline const ::pb::channelValue& outputState::channelvalue(int index) const {
  // @@protoc_insertion_point(field_get:pb.outputState.ChannelValue)
  return channelvalue_.Get(index);
}
inline ::pb::channelValue* outputState::mutable_channelvalue(int index) {
  // @@protoc_insertion_point(field_mutable:pb.outputState.ChannelValue)
  return channelvalue_.Mutable(index);
}
inline ::pb::channelValue* outputState::add_channelvalue() {
  // @@protoc_insertion_point(field_add:pb.outputState.ChannelValue)
  return channelvalue_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::channelValue >*
outputState::mutable_channelvalue() {
  // @@protoc_insertion_point(field_mutable_list:pb.outputState.ChannelValue)
  return &channelvalue_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::channelValue >&
outputState::channelvalue() const {
  // @@protoc_insertion_point(field_list:pb.outputState.ChannelValue)
  return channelvalue_;
}

// -------------------------------------------------------------------

// channelValue

// uint32 Channel = 1;
inline void channelValue::clear_channel() {
  channel_ = 0u;
}
inline ::google::protobuf::uint32 channelValue::channel() const {
  // @@protoc_insertion_point(field_get:pb.channelValue.Channel)
  return channel_;
}
inline void channelValue::set_channel(::google::protobuf::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:pb.channelValue.Channel)
}

// uint32 Value = 2;
inline void channelValue::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 channelValue::value() const {
  // @@protoc_insertion_point(field_get:pb.channelValue.Value)
  return value_;
}
inline void channelValue::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:pb.channelValue.Value)
}

// -------------------------------------------------------------------

// alarmList

// uint32 GasAlarm = 1;
inline void alarmList::clear_gasalarm() {
  gasalarm_ = 0u;
}
inline ::google::protobuf::uint32 alarmList::gasalarm() const {
  // @@protoc_insertion_point(field_get:pb.alarmList.GasAlarm)
  return gasalarm_;
}
inline void alarmList::set_gasalarm(::google::protobuf::uint32 value) {
  
  gasalarm_ = value;
  // @@protoc_insertion_point(field_set:pb.alarmList.GasAlarm)
}

// uint32 SmokeAlarm = 2;
inline void alarmList::clear_smokealarm() {
  smokealarm_ = 0u;
}
inline ::google::protobuf::uint32 alarmList::smokealarm() const {
  // @@protoc_insertion_point(field_get:pb.alarmList.SmokeAlarm)
  return smokealarm_;
}
inline void alarmList::set_smokealarm(::google::protobuf::uint32 value) {
  
  smokealarm_ = value;
  // @@protoc_insertion_point(field_set:pb.alarmList.SmokeAlarm)
}

// uint32 ShockAlarm = 3;
inline void alarmList::clear_shockalarm() {
  shockalarm_ = 0u;
}
inline ::google::protobuf::uint32 alarmList::shockalarm() const {
  // @@protoc_insertion_point(field_get:pb.alarmList.ShockAlarm)
  return shockalarm_;
}
inline void alarmList::set_shockalarm(::google::protobuf::uint32 value) {
  
  shockalarm_ = value;
  // @@protoc_insertion_point(field_set:pb.alarmList.ShockAlarm)
}

// uint32 LeakAlarm = 4;
inline void alarmList::clear_leakalarm() {
  leakalarm_ = 0u;
}
inline ::google::protobuf::uint32 alarmList::leakalarm() const {
  // @@protoc_insertion_point(field_get:pb.alarmList.LeakAlarm)
  return leakalarm_;
}
inline void alarmList::set_leakalarm(::google::protobuf::uint32 value) {
  
  leakalarm_ = value;
  // @@protoc_insertion_point(field_set:pb.alarmList.LeakAlarm)
}

// uint32 FallAlarm = 5;
inline void alarmList::clear_fallalarm() {
  fallalarm_ = 0u;
}
inline ::google::protobuf::uint32 alarmList::fallalarm() const {
  // @@protoc_insertion_point(field_get:pb.alarmList.FallAlarm)
  return fallalarm_;
}
inline void alarmList::set_fallalarm(::google::protobuf::uint32 value) {
  
  fallalarm_ = value;
  // @@protoc_insertion_point(field_set:pb.alarmList.FallAlarm)
}

// uint32 HeartAlarm = 6;
inline void alarmList::clear_heartalarm() {
  heartalarm_ = 0u;
}
inline ::google::protobuf::uint32 alarmList::heartalarm() const {
  // @@protoc_insertion_point(field_get:pb.alarmList.HeartAlarm)
  return heartalarm_;
}
inline void alarmList::set_heartalarm(::google::protobuf::uint32 value) {
  
  heartalarm_ = value;
  // @@protoc_insertion_point(field_set:pb.alarmList.HeartAlarm)
}

// uint32 PoslitionAlarm = 7;
inline void alarmList::clear_poslitionalarm() {
  poslitionalarm_ = 0u;
}
inline ::google::protobuf::uint32 alarmList::poslitionalarm() const {
  // @@protoc_insertion_point(field_get:pb.alarmList.PoslitionAlarm)
  return poslitionalarm_;
}
inline void alarmList::set_poslitionalarm(::google::protobuf::uint32 value) {
  
  poslitionalarm_ = value;
  // @@protoc_insertion_point(field_set:pb.alarmList.PoslitionAlarm)
}

// uint32 LowTemperatureAlarm = 8;
inline void alarmList::clear_lowtemperaturealarm() {
  lowtemperaturealarm_ = 0u;
}
inline ::google::protobuf::uint32 alarmList::lowtemperaturealarm() const {
  // @@protoc_insertion_point(field_get:pb.alarmList.LowTemperatureAlarm)
  return lowtemperaturealarm_;
}
inline void alarmList::set_lowtemperaturealarm(::google::protobuf::uint32 value) {
  
  lowtemperaturealarm_ = value;
  // @@protoc_insertion_point(field_set:pb.alarmList.LowTemperatureAlarm)
}

// uint32 CoAlarm = 9;
inline void alarmList::clear_coalarm() {
  coalarm_ = 0u;
}
inline ::google::protobuf::uint32 alarmList::coalarm() const {
  // @@protoc_insertion_point(field_get:pb.alarmList.CoAlarm)
  return coalarm_;
}
inline void alarmList::set_coalarm(::google::protobuf::uint32 value) {
  
  coalarm_ = value;
  // @@protoc_insertion_point(field_set:pb.alarmList.CoAlarm)
}

// uint32 EarmarkAlarm = 10;
inline void alarmList::clear_earmarkalarm() {
  earmarkalarm_ = 0u;
}
inline ::google::protobuf::uint32 alarmList::earmarkalarm() const {
  // @@protoc_insertion_point(field_get:pb.alarmList.EarmarkAlarm)
  return earmarkalarm_;
}
inline void alarmList::set_earmarkalarm(::google::protobuf::uint32 value) {
  
  earmarkalarm_ = value;
  // @@protoc_insertion_point(field_set:pb.alarmList.EarmarkAlarm)
}

// uint32 CollarAlarm = 11;
inline void alarmList::clear_collaralarm() {
  collaralarm_ = 0u;
}
inline ::google::protobuf::uint32 alarmList::collaralarm() const {
  // @@protoc_insertion_point(field_get:pb.alarmList.CollarAlarm)
  return collaralarm_;
}
inline void alarmList::set_collaralarm(::google::protobuf::uint32 value) {
  
  collaralarm_ = value;
  // @@protoc_insertion_point(field_set:pb.alarmList.CollarAlarm)
}

// -------------------------------------------------------------------

// farmState

// string N = 1;
inline void farmState::clear_n() {
  n_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& farmState::n() const {
  // @@protoc_insertion_point(field_get:pb.farmState.N)
  return n_.GetNoArena();
}
inline void farmState::set_n(const ::std::string& value) {
  
  n_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.farmState.N)
}
#if LANG_CXX11
inline void farmState::set_n(::std::string&& value) {
  
  n_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.farmState.N)
}
#endif
inline void farmState::set_n(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  n_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.farmState.N)
}
inline void farmState::set_n(const char* value, size_t size) {
  
  n_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.farmState.N)
}
inline ::std::string* farmState::mutable_n() {
  
  // @@protoc_insertion_point(field_mutable:pb.farmState.N)
  return n_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* farmState::release_n() {
  // @@protoc_insertion_point(field_release:pb.farmState.N)
  
  return n_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void farmState::set_allocated_n(::std::string* n) {
  if (n != NULL) {
    
  } else {
    
  }
  n_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), n);
  // @@protoc_insertion_point(field_set_allocated:pb.farmState.N)
}

// string P = 2;
inline void farmState::clear_p() {
  p_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& farmState::p() const {
  // @@protoc_insertion_point(field_get:pb.farmState.P)
  return p_.GetNoArena();
}
inline void farmState::set_p(const ::std::string& value) {
  
  p_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.farmState.P)
}
#if LANG_CXX11
inline void farmState::set_p(::std::string&& value) {
  
  p_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.farmState.P)
}
#endif
inline void farmState::set_p(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  p_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.farmState.P)
}
inline void farmState::set_p(const char* value, size_t size) {
  
  p_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.farmState.P)
}
inline ::std::string* farmState::mutable_p() {
  
  // @@protoc_insertion_point(field_mutable:pb.farmState.P)
  return p_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* farmState::release_p() {
  // @@protoc_insertion_point(field_release:pb.farmState.P)
  
  return p_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void farmState::set_allocated_p(::std::string* p) {
  if (p != NULL) {
    
  } else {
    
  }
  p_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), p);
  // @@protoc_insertion_point(field_set_allocated:pb.farmState.P)
}

// string K = 3;
inline void farmState::clear_k() {
  k_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& farmState::k() const {
  // @@protoc_insertion_point(field_get:pb.farmState.K)
  return k_.GetNoArena();
}
inline void farmState::set_k(const ::std::string& value) {
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.farmState.K)
}
#if LANG_CXX11
inline void farmState::set_k(::std::string&& value) {
  
  k_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.farmState.K)
}
#endif
inline void farmState::set_k(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.farmState.K)
}
inline void farmState::set_k(const char* value, size_t size) {
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.farmState.K)
}
inline ::std::string* farmState::mutable_k() {
  
  // @@protoc_insertion_point(field_mutable:pb.farmState.K)
  return k_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* farmState::release_k() {
  // @@protoc_insertion_point(field_release:pb.farmState.K)
  
  return k_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void farmState::set_allocated_k(::std::string* k) {
  if (k != NULL) {
    
  } else {
    
  }
  k_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k);
  // @@protoc_insertion_point(field_set_allocated:pb.farmState.K)
}

// string O2 = 4;
inline void farmState::clear_o2() {
  o2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& farmState::o2() const {
  // @@protoc_insertion_point(field_get:pb.farmState.O2)
  return o2_.GetNoArena();
}
inline void farmState::set_o2(const ::std::string& value) {
  
  o2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.farmState.O2)
}
#if LANG_CXX11
inline void farmState::set_o2(::std::string&& value) {
  
  o2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.farmState.O2)
}
#endif
inline void farmState::set_o2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  o2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.farmState.O2)
}
inline void farmState::set_o2(const char* value, size_t size) {
  
  o2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.farmState.O2)
}
inline ::std::string* farmState::mutable_o2() {
  
  // @@protoc_insertion_point(field_mutable:pb.farmState.O2)
  return o2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* farmState::release_o2() {
  // @@protoc_insertion_point(field_release:pb.farmState.O2)
  
  return o2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void farmState::set_allocated_o2(::std::string* o2) {
  if (o2 != NULL) {
    
  } else {
    
  }
  o2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), o2);
  // @@protoc_insertion_point(field_set_allocated:pb.farmState.O2)
}

// string CO2 = 5;
inline void farmState::clear_co2() {
  co2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& farmState::co2() const {
  // @@protoc_insertion_point(field_get:pb.farmState.CO2)
  return co2_.GetNoArena();
}
inline void farmState::set_co2(const ::std::string& value) {
  
  co2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.farmState.CO2)
}
#if LANG_CXX11
inline void farmState::set_co2(::std::string&& value) {
  
  co2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.farmState.CO2)
}
#endif
inline void farmState::set_co2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  co2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.farmState.CO2)
}
inline void farmState::set_co2(const char* value, size_t size) {
  
  co2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.farmState.CO2)
}
inline ::std::string* farmState::mutable_co2() {
  
  // @@protoc_insertion_point(field_mutable:pb.farmState.CO2)
  return co2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* farmState::release_co2() {
  // @@protoc_insertion_point(field_release:pb.farmState.CO2)
  
  return co2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void farmState::set_allocated_co2(::std::string* co2) {
  if (co2 != NULL) {
    
  } else {
    
  }
  co2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), co2);
  // @@protoc_insertion_point(field_set_allocated:pb.farmState.CO2)
}

// string CO = 6;
inline void farmState::clear_co() {
  co_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& farmState::co() const {
  // @@protoc_insertion_point(field_get:pb.farmState.CO)
  return co_.GetNoArena();
}
inline void farmState::set_co(const ::std::string& value) {
  
  co_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.farmState.CO)
}
#if LANG_CXX11
inline void farmState::set_co(::std::string&& value) {
  
  co_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.farmState.CO)
}
#endif
inline void farmState::set_co(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  co_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.farmState.CO)
}
inline void farmState::set_co(const char* value, size_t size) {
  
  co_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.farmState.CO)
}
inline ::std::string* farmState::mutable_co() {
  
  // @@protoc_insertion_point(field_mutable:pb.farmState.CO)
  return co_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* farmState::release_co() {
  // @@protoc_insertion_point(field_release:pb.farmState.CO)
  
  return co_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void farmState::set_allocated_co(::std::string* co) {
  if (co != NULL) {
    
  } else {
    
  }
  co_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), co);
  // @@protoc_insertion_point(field_set_allocated:pb.farmState.CO)
}

// string Illumination = 7;
inline void farmState::clear_illumination() {
  illumination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& farmState::illumination() const {
  // @@protoc_insertion_point(field_get:pb.farmState.Illumination)
  return illumination_.GetNoArena();
}
inline void farmState::set_illumination(const ::std::string& value) {
  
  illumination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.farmState.Illumination)
}
#if LANG_CXX11
inline void farmState::set_illumination(::std::string&& value) {
  
  illumination_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.farmState.Illumination)
}
#endif
inline void farmState::set_illumination(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  illumination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.farmState.Illumination)
}
inline void farmState::set_illumination(const char* value, size_t size) {
  
  illumination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.farmState.Illumination)
}
inline ::std::string* farmState::mutable_illumination() {
  
  // @@protoc_insertion_point(field_mutable:pb.farmState.Illumination)
  return illumination_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* farmState::release_illumination() {
  // @@protoc_insertion_point(field_release:pb.farmState.Illumination)
  
  return illumination_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void farmState::set_allocated_illumination(::std::string* illumination) {
  if (illumination != NULL) {
    
  } else {
    
  }
  illumination_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), illumination);
  // @@protoc_insertion_point(field_set_allocated:pb.farmState.Illumination)
}

// string WindDirection = 8;
inline void farmState::clear_winddirection() {
  winddirection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& farmState::winddirection() const {
  // @@protoc_insertion_point(field_get:pb.farmState.WindDirection)
  return winddirection_.GetNoArena();
}
inline void farmState::set_winddirection(const ::std::string& value) {
  
  winddirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.farmState.WindDirection)
}
#if LANG_CXX11
inline void farmState::set_winddirection(::std::string&& value) {
  
  winddirection_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.farmState.WindDirection)
}
#endif
inline void farmState::set_winddirection(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  winddirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.farmState.WindDirection)
}
inline void farmState::set_winddirection(const char* value, size_t size) {
  
  winddirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.farmState.WindDirection)
}
inline ::std::string* farmState::mutable_winddirection() {
  
  // @@protoc_insertion_point(field_mutable:pb.farmState.WindDirection)
  return winddirection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* farmState::release_winddirection() {
  // @@protoc_insertion_point(field_release:pb.farmState.WindDirection)
  
  return winddirection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void farmState::set_allocated_winddirection(::std::string* winddirection) {
  if (winddirection != NULL) {
    
  } else {
    
  }
  winddirection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), winddirection);
  // @@protoc_insertion_point(field_set_allocated:pb.farmState.WindDirection)
}

// string PH = 9;
inline void farmState::clear_ph() {
  ph_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& farmState::ph() const {
  // @@protoc_insertion_point(field_get:pb.farmState.PH)
  return ph_.GetNoArena();
}
inline void farmState::set_ph(const ::std::string& value) {
  
  ph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.farmState.PH)
}
#if LANG_CXX11
inline void farmState::set_ph(::std::string&& value) {
  
  ph_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.farmState.PH)
}
#endif
inline void farmState::set_ph(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.farmState.PH)
}
inline void farmState::set_ph(const char* value, size_t size) {
  
  ph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.farmState.PH)
}
inline ::std::string* farmState::mutable_ph() {
  
  // @@protoc_insertion_point(field_mutable:pb.farmState.PH)
  return ph_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* farmState::release_ph() {
  // @@protoc_insertion_point(field_release:pb.farmState.PH)
  
  return ph_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void farmState::set_allocated_ph(::std::string* ph) {
  if (ph != NULL) {
    
  } else {
    
  }
  ph_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ph);
  // @@protoc_insertion_point(field_set_allocated:pb.farmState.PH)
}

// string AirPressure = 10;
inline void farmState::clear_airpressure() {
  airpressure_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& farmState::airpressure() const {
  // @@protoc_insertion_point(field_get:pb.farmState.AirPressure)
  return airpressure_.GetNoArena();
}
inline void farmState::set_airpressure(const ::std::string& value) {
  
  airpressure_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.farmState.AirPressure)
}
#if LANG_CXX11
inline void farmState::set_airpressure(::std::string&& value) {
  
  airpressure_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.farmState.AirPressure)
}
#endif
inline void farmState::set_airpressure(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  airpressure_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.farmState.AirPressure)
}
inline void farmState::set_airpressure(const char* value, size_t size) {
  
  airpressure_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.farmState.AirPressure)
}
inline ::std::string* farmState::mutable_airpressure() {
  
  // @@protoc_insertion_point(field_mutable:pb.farmState.AirPressure)
  return airpressure_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* farmState::release_airpressure() {
  // @@protoc_insertion_point(field_release:pb.farmState.AirPressure)
  
  return airpressure_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void farmState::set_allocated_airpressure(::std::string* airpressure) {
  if (airpressure != NULL) {
    
  } else {
    
  }
  airpressure_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), airpressure);
  // @@protoc_insertion_point(field_set_allocated:pb.farmState.AirPressure)
}

// string Flow = 11;
inline void farmState::clear_flow() {
  flow_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& farmState::flow() const {
  // @@protoc_insertion_point(field_get:pb.farmState.Flow)
  return flow_.GetNoArena();
}
inline void farmState::set_flow(const ::std::string& value) {
  
  flow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.farmState.Flow)
}
#if LANG_CXX11
inline void farmState::set_flow(::std::string&& value) {
  
  flow_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.farmState.Flow)
}
#endif
inline void farmState::set_flow(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  flow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.farmState.Flow)
}
inline void farmState::set_flow(const char* value, size_t size) {
  
  flow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.farmState.Flow)
}
inline ::std::string* farmState::mutable_flow() {
  
  // @@protoc_insertion_point(field_mutable:pb.farmState.Flow)
  return flow_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* farmState::release_flow() {
  // @@protoc_insertion_point(field_release:pb.farmState.Flow)
  
  return flow_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void farmState::set_allocated_flow(::std::string* flow) {
  if (flow != NULL) {
    
  } else {
    
  }
  flow_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), flow);
  // @@protoc_insertion_point(field_set_allocated:pb.farmState.Flow)
}

// string Temperature = 12;
inline void farmState::clear_temperature() {
  temperature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& farmState::temperature() const {
  // @@protoc_insertion_point(field_get:pb.farmState.Temperature)
  return temperature_.GetNoArena();
}
inline void farmState::set_temperature(const ::std::string& value) {
  
  temperature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.farmState.Temperature)
}
#if LANG_CXX11
inline void farmState::set_temperature(::std::string&& value) {
  
  temperature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.farmState.Temperature)
}
#endif
inline void farmState::set_temperature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  temperature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.farmState.Temperature)
}
inline void farmState::set_temperature(const char* value, size_t size) {
  
  temperature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.farmState.Temperature)
}
inline ::std::string* farmState::mutable_temperature() {
  
  // @@protoc_insertion_point(field_mutable:pb.farmState.Temperature)
  return temperature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* farmState::release_temperature() {
  // @@protoc_insertion_point(field_release:pb.farmState.Temperature)
  
  return temperature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void farmState::set_allocated_temperature(::std::string* temperature) {
  if (temperature != NULL) {
    
  } else {
    
  }
  temperature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), temperature);
  // @@protoc_insertion_point(field_set_allocated:pb.farmState.Temperature)
}

// string EarmarkTemperature = 13;
inline void farmState::clear_earmarktemperature() {
  earmarktemperature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& farmState::earmarktemperature() const {
  // @@protoc_insertion_point(field_get:pb.farmState.EarmarkTemperature)
  return earmarktemperature_.GetNoArena();
}
inline void farmState::set_earmarktemperature(const ::std::string& value) {
  
  earmarktemperature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.farmState.EarmarkTemperature)
}
#if LANG_CXX11
inline void farmState::set_earmarktemperature(::std::string&& value) {
  
  earmarktemperature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.farmState.EarmarkTemperature)
}
#endif
inline void farmState::set_earmarktemperature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  earmarktemperature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.farmState.EarmarkTemperature)
}
inline void farmState::set_earmarktemperature(const char* value, size_t size) {
  
  earmarktemperature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.farmState.EarmarkTemperature)
}
inline ::std::string* farmState::mutable_earmarktemperature() {
  
  // @@protoc_insertion_point(field_mutable:pb.farmState.EarmarkTemperature)
  return earmarktemperature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* farmState::release_earmarktemperature() {
  // @@protoc_insertion_point(field_release:pb.farmState.EarmarkTemperature)
  
  return earmarktemperature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void farmState::set_allocated_earmarktemperature(::std::string* earmarktemperature) {
  if (earmarktemperature != NULL) {
    
  } else {
    
  }
  earmarktemperature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), earmarktemperature);
  // @@protoc_insertion_point(field_set_allocated:pb.farmState.EarmarkTemperature)
}

// string Poslition = 14;
inline void farmState::clear_poslition() {
  poslition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& farmState::poslition() const {
  // @@protoc_insertion_point(field_get:pb.farmState.Poslition)
  return poslition_.GetNoArena();
}
inline void farmState::set_poslition(const ::std::string& value) {
  
  poslition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.farmState.Poslition)
}
#if LANG_CXX11
inline void farmState::set_poslition(::std::string&& value) {
  
  poslition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.farmState.Poslition)
}
#endif
inline void farmState::set_poslition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  poslition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.farmState.Poslition)
}
inline void farmState::set_poslition(const char* value, size_t size) {
  
  poslition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.farmState.Poslition)
}
inline ::std::string* farmState::mutable_poslition() {
  
  // @@protoc_insertion_point(field_mutable:pb.farmState.Poslition)
  return poslition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* farmState::release_poslition() {
  // @@protoc_insertion_point(field_release:pb.farmState.Poslition)
  
  return poslition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void farmState::set_allocated_poslition(::std::string* poslition) {
  if (poslition != NULL) {
    
  } else {
    
  }
  poslition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), poslition);
  // @@protoc_insertion_point(field_set_allocated:pb.farmState.Poslition)
}

// string CollarPoslition = 15;
inline void farmState::clear_collarposlition() {
  collarposlition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& farmState::collarposlition() const {
  // @@protoc_insertion_point(field_get:pb.farmState.CollarPoslition)
  return collarposlition_.GetNoArena();
}
inline void farmState::set_collarposlition(const ::std::string& value) {
  
  collarposlition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.farmState.CollarPoslition)
}
#if LANG_CXX11
inline void farmState::set_collarposlition(::std::string&& value) {
  
  collarposlition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.farmState.CollarPoslition)
}
#endif
inline void farmState::set_collarposlition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  collarposlition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.farmState.CollarPoslition)
}
inline void farmState::set_collarposlition(const char* value, size_t size) {
  
  collarposlition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.farmState.CollarPoslition)
}
inline ::std::string* farmState::mutable_collarposlition() {
  
  // @@protoc_insertion_point(field_mutable:pb.farmState.CollarPoslition)
  return collarposlition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* farmState::release_collarposlition() {
  // @@protoc_insertion_point(field_release:pb.farmState.CollarPoslition)
  
  return collarposlition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void farmState::set_allocated_collarposlition(::std::string* collarposlition) {
  if (collarposlition != NULL) {
    
  } else {
    
  }
  collarposlition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collarposlition);
  // @@protoc_insertion_point(field_set_allocated:pb.farmState.CollarPoslition)
}

// -------------------------------------------------------------------

// farmList

// string Switch = 1;
inline void farmList::clear_switch_() {
  switch__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& farmList::switch_() const {
  // @@protoc_insertion_point(field_get:pb.farmList.Switch)
  return switch__.GetNoArena();
}
inline void farmList::set_switch_(const ::std::string& value) {
  
  switch__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.farmList.Switch)
}
#if LANG_CXX11
inline void farmList::set_switch_(::std::string&& value) {
  
  switch__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.farmList.Switch)
}
#endif
inline void farmList::set_switch_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  switch__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.farmList.Switch)
}
inline void farmList::set_switch_(const char* value, size_t size) {
  
  switch__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.farmList.Switch)
}
inline ::std::string* farmList::mutable_switch_() {
  
  // @@protoc_insertion_point(field_mutable:pb.farmList.Switch)
  return switch__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* farmList::release_switch_() {
  // @@protoc_insertion_point(field_release:pb.farmList.Switch)
  
  return switch__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void farmList::set_allocated_switch_(::std::string* switch_) {
  if (switch_ != NULL) {
    
  } else {
    
  }
  switch__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), switch_);
  // @@protoc_insertion_point(field_set_allocated:pb.farmList.Switch)
}

// string FlowSwitch = 2;
inline void farmList::clear_flowswitch() {
  flowswitch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& farmList::flowswitch() const {
  // @@protoc_insertion_point(field_get:pb.farmList.FlowSwitch)
  return flowswitch_.GetNoArena();
}
inline void farmList::set_flowswitch(const ::std::string& value) {
  
  flowswitch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.farmList.FlowSwitch)
}
#if LANG_CXX11
inline void farmList::set_flowswitch(::std::string&& value) {
  
  flowswitch_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.farmList.FlowSwitch)
}
#endif
inline void farmList::set_flowswitch(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  flowswitch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.farmList.FlowSwitch)
}
inline void farmList::set_flowswitch(const char* value, size_t size) {
  
  flowswitch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.farmList.FlowSwitch)
}
inline ::std::string* farmList::mutable_flowswitch() {
  
  // @@protoc_insertion_point(field_mutable:pb.farmList.FlowSwitch)
  return flowswitch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* farmList::release_flowswitch() {
  // @@protoc_insertion_point(field_release:pb.farmList.FlowSwitch)
  
  return flowswitch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void farmList::set_allocated_flowswitch(::std::string* flowswitch) {
  if (flowswitch != NULL) {
    
  } else {
    
  }
  flowswitch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), flowswitch);
  // @@protoc_insertion_point(field_set_allocated:pb.farmList.FlowSwitch)
}

// string WarmUpSwitch = 3;
inline void farmList::clear_warmupswitch() {
  warmupswitch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& farmList::warmupswitch() const {
  // @@protoc_insertion_point(field_get:pb.farmList.WarmUpSwitch)
  return warmupswitch_.GetNoArena();
}
inline void farmList::set_warmupswitch(const ::std::string& value) {
  
  warmupswitch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.farmList.WarmUpSwitch)
}
#if LANG_CXX11
inline void farmList::set_warmupswitch(::std::string&& value) {
  
  warmupswitch_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.farmList.WarmUpSwitch)
}
#endif
inline void farmList::set_warmupswitch(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  warmupswitch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.farmList.WarmUpSwitch)
}
inline void farmList::set_warmupswitch(const char* value, size_t size) {
  
  warmupswitch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.farmList.WarmUpSwitch)
}
inline ::std::string* farmList::mutable_warmupswitch() {
  
  // @@protoc_insertion_point(field_mutable:pb.farmList.WarmUpSwitch)
  return warmupswitch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* farmList::release_warmupswitch() {
  // @@protoc_insertion_point(field_release:pb.farmList.WarmUpSwitch)
  
  return warmupswitch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void farmList::set_allocated_warmupswitch(::std::string* warmupswitch) {
  if (warmupswitch != NULL) {
    
  } else {
    
  }
  warmupswitch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warmupswitch);
  // @@protoc_insertion_point(field_set_allocated:pb.farmList.WarmUpSwitch)
}

// string ShadeTheSunSwitch = 4;
inline void farmList::clear_shadethesunswitch() {
  shadethesunswitch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& farmList::shadethesunswitch() const {
  // @@protoc_insertion_point(field_get:pb.farmList.ShadeTheSunSwitch)
  return shadethesunswitch_.GetNoArena();
}
inline void farmList::set_shadethesunswitch(const ::std::string& value) {
  
  shadethesunswitch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.farmList.ShadeTheSunSwitch)
}
#if LANG_CXX11
inline void farmList::set_shadethesunswitch(::std::string&& value) {
  
  shadethesunswitch_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.farmList.ShadeTheSunSwitch)
}
#endif
inline void farmList::set_shadethesunswitch(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  shadethesunswitch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.farmList.ShadeTheSunSwitch)
}
inline void farmList::set_shadethesunswitch(const char* value, size_t size) {
  
  shadethesunswitch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.farmList.ShadeTheSunSwitch)
}
inline ::std::string* farmList::mutable_shadethesunswitch() {
  
  // @@protoc_insertion_point(field_mutable:pb.farmList.ShadeTheSunSwitch)
  return shadethesunswitch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* farmList::release_shadethesunswitch() {
  // @@protoc_insertion_point(field_release:pb.farmList.ShadeTheSunSwitch)
  
  return shadethesunswitch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void farmList::set_allocated_shadethesunswitch(::std::string* shadethesunswitch) {
  if (shadethesunswitch != NULL) {
    
  } else {
    
  }
  shadethesunswitch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shadethesunswitch);
  // @@protoc_insertion_point(field_set_allocated:pb.farmList.ShadeTheSunSwitch)
}

// string rainSwitch = 5;
inline void farmList::clear_rainswitch() {
  rainswitch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& farmList::rainswitch() const {
  // @@protoc_insertion_point(field_get:pb.farmList.rainSwitch)
  return rainswitch_.GetNoArena();
}
inline void farmList::set_rainswitch(const ::std::string& value) {
  
  rainswitch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.farmList.rainSwitch)
}
#if LANG_CXX11
inline void farmList::set_rainswitch(::std::string&& value) {
  
  rainswitch_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.farmList.rainSwitch)
}
#endif
inline void farmList::set_rainswitch(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rainswitch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.farmList.rainSwitch)
}
inline void farmList::set_rainswitch(const char* value, size_t size) {
  
  rainswitch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.farmList.rainSwitch)
}
inline ::std::string* farmList::mutable_rainswitch() {
  
  // @@protoc_insertion_point(field_mutable:pb.farmList.rainSwitch)
  return rainswitch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* farmList::release_rainswitch() {
  // @@protoc_insertion_point(field_release:pb.farmList.rainSwitch)
  
  return rainswitch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void farmList::set_allocated_rainswitch(::std::string* rainswitch) {
  if (rainswitch != NULL) {
    
  } else {
    
  }
  rainswitch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rainswitch);
  // @@protoc_insertion_point(field_set_allocated:pb.farmList.rainSwitch)
}

// -------------------------------------------------------------------

// lightList

// bool Switch = 1;
inline void lightList::clear_switch_() {
  switch__ = false;
}
inline bool lightList::switch_() const {
  // @@protoc_insertion_point(field_get:pb.lightList.Switch)
  return switch__;
}
inline void lightList::set_switch_(bool value) {
  
  switch__ = value;
  // @@protoc_insertion_point(field_set:pb.lightList.Switch)
}

// repeated .pb.workMode WorkMode = 2;
inline int lightList::workmode_size() const {
  return workmode_.size();
}
inline void lightList::clear_workmode() {
  workmode_.Clear();
}
inline ::pb::workMode lightList::workmode(int index) const {
  // @@protoc_insertion_point(field_get:pb.lightList.WorkMode)
  return static_cast< ::pb::workMode >(workmode_.Get(index));
}
inline void lightList::set_workmode(int index, ::pb::workMode value) {
  workmode_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.lightList.WorkMode)
}
inline void lightList::add_workmode(::pb::workMode value) {
  workmode_.Add(value);
  // @@protoc_insertion_point(field_add:pb.lightList.WorkMode)
}
inline const ::google::protobuf::RepeatedField<int>&
lightList::workmode() const {
  // @@protoc_insertion_point(field_list:pb.lightList.WorkMode)
  return workmode_;
}
inline ::google::protobuf::RepeatedField<int>*
lightList::mutable_workmode() {
  // @@protoc_insertion_point(field_mutable_list:pb.lightList.WorkMode)
  return &workmode_;
}

// uint32 Bright = 3;
inline void lightList::clear_bright() {
  bright_ = 0u;
}
inline ::google::protobuf::uint32 lightList::bright() const {
  // @@protoc_insertion_point(field_get:pb.lightList.Bright)
  return bright_;
}
inline void lightList::set_bright(::google::protobuf::uint32 value) {
  
  bright_ = value;
  // @@protoc_insertion_point(field_set:pb.lightList.Bright)
}

// uint32 Temp = 4;
inline void lightList::clear_temp() {
  temp_ = 0u;
}
inline ::google::protobuf::uint32 lightList::temp() const {
  // @@protoc_insertion_point(field_get:pb.lightList.Temp)
  return temp_;
}
inline void lightList::set_temp(::google::protobuf::uint32 value) {
  
  temp_ = value;
  // @@protoc_insertion_point(field_set:pb.lightList.Temp)
}

// string Colour = 5;
inline void lightList::clear_colour() {
  colour_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& lightList::colour() const {
  // @@protoc_insertion_point(field_get:pb.lightList.Colour)
  return colour_.GetNoArena();
}
inline void lightList::set_colour(const ::std::string& value) {
  
  colour_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.lightList.Colour)
}
#if LANG_CXX11
inline void lightList::set_colour(::std::string&& value) {
  
  colour_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.lightList.Colour)
}
#endif
inline void lightList::set_colour(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  colour_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.lightList.Colour)
}
inline void lightList::set_colour(const char* value, size_t size) {
  
  colour_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.lightList.Colour)
}
inline ::std::string* lightList::mutable_colour() {
  
  // @@protoc_insertion_point(field_mutable:pb.lightList.Colour)
  return colour_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* lightList::release_colour() {
  // @@protoc_insertion_point(field_release:pb.lightList.Colour)
  
  return colour_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void lightList::set_allocated_colour(::std::string* colour) {
  if (colour != NULL) {
    
  } else {
    
  }
  colour_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), colour);
  // @@protoc_insertion_point(field_set_allocated:pb.lightList.Colour)
}

// repeated .pb.sceneMode Scene = 6;
inline int lightList::scene_size() const {
  return scene_.size();
}
inline void lightList::clear_scene() {
  scene_.Clear();
}
inline ::pb::sceneMode lightList::scene(int index) const {
  // @@protoc_insertion_point(field_get:pb.lightList.Scene)
  return static_cast< ::pb::sceneMode >(scene_.Get(index));
}
inline void lightList::set_scene(int index, ::pb::sceneMode value) {
  scene_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.lightList.Scene)
}
inline void lightList::add_scene(::pb::sceneMode value) {
  scene_.Add(value);
  // @@protoc_insertion_point(field_add:pb.lightList.Scene)
}
inline const ::google::protobuf::RepeatedField<int>&
lightList::scene() const {
  // @@protoc_insertion_point(field_list:pb.lightList.Scene)
  return scene_;
}
inline ::google::protobuf::RepeatedField<int>*
lightList::mutable_scene() {
  // @@protoc_insertion_point(field_mutable_list:pb.lightList.Scene)
  return &scene_;
}

// uint32 CountClose = 7;
inline void lightList::clear_countclose() {
  countclose_ = 0u;
}
inline ::google::protobuf::uint32 lightList::countclose() const {
  // @@protoc_insertion_point(field_get:pb.lightList.CountClose)
  return countclose_;
}
inline void lightList::set_countclose(::google::protobuf::uint32 value) {
  
  countclose_ = value;
  // @@protoc_insertion_point(field_set:pb.lightList.CountClose)
}

// uint32 CountOpen = 8;
inline void lightList::clear_countopen() {
  countopen_ = 0u;
}
inline ::google::protobuf::uint32 lightList::countopen() const {
  // @@protoc_insertion_point(field_get:pb.lightList.CountOpen)
  return countopen_;
}
inline void lightList::set_countopen(::google::protobuf::uint32 value) {
  
  countopen_ = value;
  // @@protoc_insertion_point(field_set:pb.lightList.CountOpen)
}

// string Control = 9;
inline void lightList::clear_control() {
  control_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& lightList::control() const {
  // @@protoc_insertion_point(field_get:pb.lightList.Control)
  return control_.GetNoArena();
}
inline void lightList::set_control(const ::std::string& value) {
  
  control_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.lightList.Control)
}
#if LANG_CXX11
inline void lightList::set_control(::std::string&& value) {
  
  control_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.lightList.Control)
}
#endif
inline void lightList::set_control(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  control_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.lightList.Control)
}
inline void lightList::set_control(const char* value, size_t size) {
  
  control_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.lightList.Control)
}
inline ::std::string* lightList::mutable_control() {
  
  // @@protoc_insertion_point(field_mutable:pb.lightList.Control)
  return control_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* lightList::release_control() {
  // @@protoc_insertion_point(field_release:pb.lightList.Control)
  
  return control_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void lightList::set_allocated_control(::std::string* control) {
  if (control != NULL) {
    
  } else {
    
  }
  control_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), control);
  // @@protoc_insertion_point(field_set_allocated:pb.lightList.Control)
}

// uint32 Sleep = 10;
inline void lightList::clear_sleep() {
  sleep_ = 0u;
}
inline ::google::protobuf::uint32 lightList::sleep() const {
  // @@protoc_insertion_point(field_get:pb.lightList.Sleep)
  return sleep_;
}
inline void lightList::set_sleep(::google::protobuf::uint32 value) {
  
  sleep_ = value;
  // @@protoc_insertion_point(field_set:pb.lightList.Sleep)
}

// uint32 WakeUp = 11;
inline void lightList::clear_wakeup() {
  wakeup_ = 0u;
}
inline ::google::protobuf::uint32 lightList::wakeup() const {
  // @@protoc_insertion_point(field_get:pb.lightList.WakeUp)
  return wakeup_;
}
inline void lightList::set_wakeup(::google::protobuf::uint32 value) {
  
  wakeup_ = value;
  // @@protoc_insertion_point(field_set:pb.lightList.WakeUp)
}

// uint32 PowerMemory = 12;
inline void lightList::clear_powermemory() {
  powermemory_ = 0u;
}
inline ::google::protobuf::uint32 lightList::powermemory() const {
  // @@protoc_insertion_point(field_get:pb.lightList.PowerMemory)
  return powermemory_;
}
inline void lightList::set_powermemory(::google::protobuf::uint32 value) {
  
  powermemory_ = value;
  // @@protoc_insertion_point(field_set:pb.lightList.PowerMemory)
}

// uint32 DoNotdisturb = 13;
inline void lightList::clear_donotdisturb() {
  donotdisturb_ = 0u;
}
inline ::google::protobuf::uint32 lightList::donotdisturb() const {
  // @@protoc_insertion_point(field_get:pb.lightList.DoNotdisturb)
  return donotdisturb_;
}
inline void lightList::set_donotdisturb(::google::protobuf::uint32 value) {
  
  donotdisturb_ = value;
  // @@protoc_insertion_point(field_set:pb.lightList.DoNotdisturb)
}

// string MicMusic = 14;
inline void lightList::clear_micmusic() {
  micmusic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& lightList::micmusic() const {
  // @@protoc_insertion_point(field_get:pb.lightList.MicMusic)
  return micmusic_.GetNoArena();
}
inline void lightList::set_micmusic(const ::std::string& value) {
  
  micmusic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.lightList.MicMusic)
}
#if LANG_CXX11
inline void lightList::set_micmusic(::std::string&& value) {
  
  micmusic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.lightList.MicMusic)
}
#endif
inline void lightList::set_micmusic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  micmusic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.lightList.MicMusic)
}
inline void lightList::set_micmusic(const char* value, size_t size) {
  
  micmusic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.lightList.MicMusic)
}
inline ::std::string* lightList::mutable_micmusic() {
  
  // @@protoc_insertion_point(field_mutable:pb.lightList.MicMusic)
  return micmusic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* lightList::release_micmusic() {
  // @@protoc_insertion_point(field_release:pb.lightList.MicMusic)
  
  return micmusic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void lightList::set_allocated_micmusic(::std::string* micmusic) {
  if (micmusic != NULL) {
    
  } else {
    
  }
  micmusic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), micmusic);
  // @@protoc_insertion_point(field_set_allocated:pb.lightList.MicMusic)
}

// string Music = 15;
inline void lightList::clear_music() {
  music_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& lightList::music() const {
  // @@protoc_insertion_point(field_get:pb.lightList.Music)
  return music_.GetNoArena();
}
inline void lightList::set_music(const ::std::string& value) {
  
  music_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.lightList.Music)
}
#if LANG_CXX11
inline void lightList::set_music(::std::string&& value) {
  
  music_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.lightList.Music)
}
#endif
inline void lightList::set_music(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  music_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.lightList.Music)
}
inline void lightList::set_music(const char* value, size_t size) {
  
  music_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.lightList.Music)
}
inline ::std::string* lightList::mutable_music() {
  
  // @@protoc_insertion_point(field_mutable:pb.lightList.Music)
  return music_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* lightList::release_music() {
  // @@protoc_insertion_point(field_release:pb.lightList.Music)
  
  return music_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void lightList::set_allocated_music(::std::string* music) {
  if (music != NULL) {
    
  } else {
    
  }
  music_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), music);
  // @@protoc_insertion_point(field_set_allocated:pb.lightList.Music)
}

// .pb.lightExtra lightExtra = 16;
inline bool lightList::has_lightextra() const {
  return this != internal_default_instance() && lightextra_ != NULL;
}
inline void lightList::clear_lightextra() {
  if (GetArenaNoVirtual() == NULL && lightextra_ != NULL) {
    delete lightextra_;
  }
  lightextra_ = NULL;
}
inline const ::pb::lightExtra& lightList::lightextra() const {
  const ::pb::lightExtra* p = lightextra_;
  // @@protoc_insertion_point(field_get:pb.lightList.lightExtra)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::lightExtra*>(
      &::pb::_lightExtra_default_instance_);
}
inline ::pb::lightExtra* lightList::release_lightextra() {
  // @@protoc_insertion_point(field_release:pb.lightList.lightExtra)
  
  ::pb::lightExtra* temp = lightextra_;
  lightextra_ = NULL;
  return temp;
}
inline ::pb::lightExtra* lightList::mutable_lightextra() {
  
  if (lightextra_ == NULL) {
    lightextra_ = new ::pb::lightExtra;
  }
  // @@protoc_insertion_point(field_mutable:pb.lightList.lightExtra)
  return lightextra_;
}
inline void lightList::set_allocated_lightextra(::pb::lightExtra* lightextra) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lightextra_;
  }
  if (lightextra) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lightextra = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lightextra, submessage_arena);
    }
    
  } else {
    
  }
  lightextra_ = lightextra;
  // @@protoc_insertion_point(field_set_allocated:pb.lightList.lightExtra)
}

// -------------------------------------------------------------------

// lightExtra

// uint32 SwitchGradint = 1;
inline void lightExtra::clear_switchgradint() {
  switchgradint_ = 0u;
}
inline ::google::protobuf::uint32 lightExtra::switchgradint() const {
  // @@protoc_insertion_point(field_get:pb.lightExtra.SwitchGradint)
  return switchgradint_;
}
inline void lightExtra::set_switchgradint(::google::protobuf::uint32 value) {
  
  switchgradint_ = value;
  // @@protoc_insertion_point(field_set:pb.lightExtra.SwitchGradint)
}

// uint32 MixLightScene = 2;
inline void lightExtra::clear_mixlightscene() {
  mixlightscene_ = 0u;
}
inline ::google::protobuf::uint32 lightExtra::mixlightscene() const {
  // @@protoc_insertion_point(field_get:pb.lightExtra.MixLightScene)
  return mixlightscene_;
}
inline void lightExtra::set_mixlightscene(::google::protobuf::uint32 value) {
  
  mixlightscene_ = value;
  // @@protoc_insertion_point(field_set:pb.lightExtra.MixLightScene)
}

// string MixRgbcw = 3;
inline void lightExtra::clear_mixrgbcw() {
  mixrgbcw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& lightExtra::mixrgbcw() const {
  // @@protoc_insertion_point(field_get:pb.lightExtra.MixRgbcw)
  return mixrgbcw_.GetNoArena();
}
inline void lightExtra::set_mixrgbcw(const ::std::string& value) {
  
  mixrgbcw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.lightExtra.MixRgbcw)
}
#if LANG_CXX11
inline void lightExtra::set_mixrgbcw(::std::string&& value) {
  
  mixrgbcw_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.lightExtra.MixRgbcw)
}
#endif
inline void lightExtra::set_mixrgbcw(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mixrgbcw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.lightExtra.MixRgbcw)
}
inline void lightExtra::set_mixrgbcw(const char* value, size_t size) {
  
  mixrgbcw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.lightExtra.MixRgbcw)
}
inline ::std::string* lightExtra::mutable_mixrgbcw() {
  
  // @@protoc_insertion_point(field_mutable:pb.lightExtra.MixRgbcw)
  return mixrgbcw_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* lightExtra::release_mixrgbcw() {
  // @@protoc_insertion_point(field_release:pb.lightExtra.MixRgbcw)
  
  return mixrgbcw_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void lightExtra::set_allocated_mixrgbcw(::std::string* mixrgbcw) {
  if (mixrgbcw != NULL) {
    
  } else {
    
  }
  mixrgbcw_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mixrgbcw);
  // @@protoc_insertion_point(field_set_allocated:pb.lightExtra.MixRgbcw)
}

// string SegmentDimming = 4;
inline void lightExtra::clear_segmentdimming() {
  segmentdimming_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& lightExtra::segmentdimming() const {
  // @@protoc_insertion_point(field_get:pb.lightExtra.SegmentDimming)
  return segmentdimming_.GetNoArena();
}
inline void lightExtra::set_segmentdimming(const ::std::string& value) {
  
  segmentdimming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.lightExtra.SegmentDimming)
}
#if LANG_CXX11
inline void lightExtra::set_segmentdimming(::std::string&& value) {
  
  segmentdimming_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.lightExtra.SegmentDimming)
}
#endif
inline void lightExtra::set_segmentdimming(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  segmentdimming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.lightExtra.SegmentDimming)
}
inline void lightExtra::set_segmentdimming(const char* value, size_t size) {
  
  segmentdimming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.lightExtra.SegmentDimming)
}
inline ::std::string* lightExtra::mutable_segmentdimming() {
  
  // @@protoc_insertion_point(field_mutable:pb.lightExtra.SegmentDimming)
  return segmentdimming_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* lightExtra::release_segmentdimming() {
  // @@protoc_insertion_point(field_release:pb.lightExtra.SegmentDimming)
  
  return segmentdimming_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void lightExtra::set_allocated_segmentdimming(::std::string* segmentdimming) {
  if (segmentdimming != NULL) {
    
  } else {
    
  }
  segmentdimming_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), segmentdimming);
  // @@protoc_insertion_point(field_set_allocated:pb.lightExtra.SegmentDimming)
}

// bool SwitchNightLight = 5;
inline void lightExtra::clear_switchnightlight() {
  switchnightlight_ = false;
}
inline bool lightExtra::switchnightlight() const {
  // @@protoc_insertion_point(field_get:pb.lightExtra.SwitchNightLight)
  return switchnightlight_;
}
inline void lightExtra::set_switchnightlight(bool value) {
  
  switchnightlight_ = value;
  // @@protoc_insertion_point(field_set:pb.lightExtra.SwitchNightLight)
}

// string CycleTiming = 6;
inline void lightExtra::clear_cycletiming() {
  cycletiming_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& lightExtra::cycletiming() const {
  // @@protoc_insertion_point(field_get:pb.lightExtra.CycleTiming)
  return cycletiming_.GetNoArena();
}
inline void lightExtra::set_cycletiming(const ::std::string& value) {
  
  cycletiming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.lightExtra.CycleTiming)
}
#if LANG_CXX11
inline void lightExtra::set_cycletiming(::std::string&& value) {
  
  cycletiming_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.lightExtra.CycleTiming)
}
#endif
inline void lightExtra::set_cycletiming(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cycletiming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.lightExtra.CycleTiming)
}
inline void lightExtra::set_cycletiming(const char* value, size_t size) {
  
  cycletiming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.lightExtra.CycleTiming)
}
inline ::std::string* lightExtra::mutable_cycletiming() {
  
  // @@protoc_insertion_point(field_mutable:pb.lightExtra.CycleTiming)
  return cycletiming_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* lightExtra::release_cycletiming() {
  // @@protoc_insertion_point(field_release:pb.lightExtra.CycleTiming)
  
  return cycletiming_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void lightExtra::set_allocated_cycletiming(::std::string* cycletiming) {
  if (cycletiming != NULL) {
    
  } else {
    
  }
  cycletiming_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cycletiming);
  // @@protoc_insertion_point(field_set_allocated:pb.lightExtra.CycleTiming)
}

// string RandomTiming = 7;
inline void lightExtra::clear_randomtiming() {
  randomtiming_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& lightExtra::randomtiming() const {
  // @@protoc_insertion_point(field_get:pb.lightExtra.RandomTiming)
  return randomtiming_.GetNoArena();
}
inline void lightExtra::set_randomtiming(const ::std::string& value) {
  
  randomtiming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.lightExtra.RandomTiming)
}
#if LANG_CXX11
inline void lightExtra::set_randomtiming(::std::string&& value) {
  
  randomtiming_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.lightExtra.RandomTiming)
}
#endif
inline void lightExtra::set_randomtiming(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  randomtiming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.lightExtra.RandomTiming)
}
inline void lightExtra::set_randomtiming(const char* value, size_t size) {
  
  randomtiming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.lightExtra.RandomTiming)
}
inline ::std::string* lightExtra::mutable_randomtiming() {
  
  // @@protoc_insertion_point(field_mutable:pb.lightExtra.RandomTiming)
  return randomtiming_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* lightExtra::release_randomtiming() {
  // @@protoc_insertion_point(field_release:pb.lightExtra.RandomTiming)
  
  return randomtiming_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void lightExtra::set_allocated_randomtiming(::std::string* randomtiming) {
  if (randomtiming != NULL) {
    
  } else {
    
  }
  randomtiming_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), randomtiming);
  // @@protoc_insertion_point(field_set_allocated:pb.lightExtra.RandomTiming)
}

// -------------------------------------------------------------------

// lightState

// -------------------------------------------------------------------

// airConditioning

// -------------------------------------------------------------------

// airConditioningList

// bool Switch = 1;
inline void airConditioningList::clear_switch_() {
  switch__ = false;
}
inline bool airConditioningList::switch_() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningList.Switch)
  return switch__;
}
inline void airConditioningList::set_switch_(bool value) {
  
  switch__ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningList.Switch)
}

// .pb.airConditioningMode AirConditioningMode = 2;
inline void airConditioningList::clear_airconditioningmode() {
  airconditioningmode_ = 0;
}
inline ::pb::airConditioningMode airConditioningList::airconditioningmode() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningList.AirConditioningMode)
  return static_cast< ::pb::airConditioningMode >(airconditioningmode_);
}
inline void airConditioningList::set_airconditioningmode(::pb::airConditioningMode value) {
  
  airconditioningmode_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningList.AirConditioningMode)
}

// .pb.airConditioningFlowSpeed AirConditioningFlowSpeed = 3;
inline void airConditioningList::clear_airconditioningflowspeed() {
  airconditioningflowspeed_ = 0;
}
inline ::pb::airConditioningFlowSpeed airConditioningList::airconditioningflowspeed() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningList.AirConditioningFlowSpeed)
  return static_cast< ::pb::airConditioningFlowSpeed >(airconditioningflowspeed_);
}
inline void airConditioningList::set_airconditioningflowspeed(::pb::airConditioningFlowSpeed value) {
  
  airconditioningflowspeed_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningList.AirConditioningFlowSpeed)
}

// bool Anion = 4;
inline void airConditioningList::clear_anion() {
  anion_ = false;
}
inline bool airConditioningList::anion() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningList.Anion)
  return anion_;
}
inline void airConditioningList::set_anion(bool value) {
  
  anion_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningList.Anion)
}

// bool ChildLock = 5;
inline void airConditioningList::clear_childlock() {
  childlock_ = false;
}
inline bool airConditioningList::childlock() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningList.ChildLock)
  return childlock_;
}
inline void airConditioningList::set_childlock(bool value) {
  
  childlock_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningList.ChildLock)
}

// bool Light = 6;
inline void airConditioningList::clear_light() {
  light_ = false;
}
inline bool airConditioningList::light() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningList.Light)
  return light_;
}
inline void airConditioningList::set_light(bool value) {
  
  light_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningList.Light)
}

// bool Uv = 7;
inline void airConditioningList::clear_uv() {
  uv_ = false;
}
inline bool airConditioningList::uv() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningList.Uv)
  return uv_;
}
inline void airConditioningList::set_uv(bool value) {
  
  uv_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningList.Uv)
}

// bool Wet = 8;
inline void airConditioningList::clear_wet() {
  wet_ = false;
}
inline bool airConditioningList::wet() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningList.Wet)
  return wet_;
}
inline void airConditioningList::set_wet(bool value) {
  
  wet_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningList.Wet)
}

// bool FliterReset = 9;
inline void airConditioningList::clear_fliterreset() {
  fliterreset_ = false;
}
inline bool airConditioningList::fliterreset() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningList.FliterReset)
  return fliterreset_;
}
inline void airConditioningList::set_fliterreset(bool value) {
  
  fliterreset_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningList.FliterReset)
}

// uint32 SetTemp = 10;
inline void airConditioningList::clear_settemp() {
  settemp_ = 0u;
}
inline ::google::protobuf::uint32 airConditioningList::settemp() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningList.SetTemp)
  return settemp_;
}
inline void airConditioningList::set_settemp(::google::protobuf::uint32 value) {
  
  settemp_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningList.SetTemp)
}

// uint32 SetHumi = 11;
inline void airConditioningList::clear_sethumi() {
  sethumi_ = 0u;
}
inline ::google::protobuf::uint32 airConditioningList::sethumi() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningList.SetHumi)
  return sethumi_;
}
inline void airConditioningList::set_sethumi(::google::protobuf::uint32 value) {
  
  sethumi_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningList.SetHumi)
}

// bool SleepMode = 12;
inline void airConditioningList::clear_sleepmode() {
  sleepmode_ = false;
}
inline bool airConditioningList::sleepmode() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningList.SleepMode)
  return sleepmode_;
}
inline void airConditioningList::set_sleepmode(bool value) {
  
  sleepmode_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningList.SleepMode)
}

// bool ConstantTemp = 13;
inline void airConditioningList::clear_constanttemp() {
  constanttemp_ = false;
}
inline bool airConditioningList::constanttemp() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningList.ConstantTemp)
  return constanttemp_;
}
inline void airConditioningList::set_constanttemp(bool value) {
  
  constanttemp_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningList.ConstantTemp)
}

// bool ConstantHume = 14;
inline void airConditioningList::clear_constanthume() {
  constanthume_ = false;
}
inline bool airConditioningList::constanthume() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningList.ConstantHume)
  return constanthume_;
}
inline void airConditioningList::set_constanthume(bool value) {
  
  constanthume_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningList.ConstantHume)
}

// bool ConstantFresh = 15;
inline void airConditioningList::clear_constantfresh() {
  constantfresh_ = false;
}
inline bool airConditioningList::constantfresh() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningList.ConstantFresh)
  return constantfresh_;
}
inline void airConditioningList::set_constantfresh(bool value) {
  
  constantfresh_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningList.ConstantFresh)
}

// uint32 FreshFanSpeed = 16;
inline void airConditioningList::clear_freshfanspeed() {
  freshfanspeed_ = 0u;
}
inline ::google::protobuf::uint32 airConditioningList::freshfanspeed() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningList.FreshFanSpeed)
  return freshfanspeed_;
}
inline void airConditioningList::set_freshfanspeed(::google::protobuf::uint32 value) {
  
  freshfanspeed_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningList.FreshFanSpeed)
}

// -------------------------------------------------------------------

// airConditioningState

// bool Switch = 1;
inline void airConditioningState::clear_switch_() {
  switch__ = false;
}
inline bool airConditioningState::switch_() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningState.Switch)
  return switch__;
}
inline void airConditioningState::set_switch_(bool value) {
  
  switch__ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningState.Switch)
}

// uint32 PM25 = 2;
inline void airConditioningState::clear_pm25() {
  pm25_ = 0u;
}
inline ::google::protobuf::uint32 airConditioningState::pm25() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningState.PM25)
  return pm25_;
}
inline void airConditioningState::set_pm25(::google::protobuf::uint32 value) {
  
  pm25_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningState.PM25)
}

// .pb.airConditioningMode AirConditioningMode = 3;
inline void airConditioningState::clear_airconditioningmode() {
  airconditioningmode_ = 0;
}
inline ::pb::airConditioningMode airConditioningState::airconditioningmode() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningState.AirConditioningMode)
  return static_cast< ::pb::airConditioningMode >(airconditioningmode_);
}
inline void airConditioningState::set_airconditioningmode(::pb::airConditioningMode value) {
  
  airconditioningmode_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningState.AirConditioningMode)
}

// .pb.airConditioningFlowSpeed AirConditioningFlowSpeed = 4;
inline void airConditioningState::clear_airconditioningflowspeed() {
  airconditioningflowspeed_ = 0;
}
inline ::pb::airConditioningFlowSpeed airConditioningState::airconditioningflowspeed() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningState.AirConditioningFlowSpeed)
  return static_cast< ::pb::airConditioningFlowSpeed >(airconditioningflowspeed_);
}
inline void airConditioningState::set_airconditioningflowspeed(::pb::airConditioningFlowSpeed value) {
  
  airconditioningflowspeed_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningState.AirConditioningFlowSpeed)
}

// uint32 FilterLife = 5;
inline void airConditioningState::clear_filterlife() {
  filterlife_ = 0u;
}
inline ::google::protobuf::uint32 airConditioningState::filterlife() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningState.FilterLife)
  return filterlife_;
}
inline void airConditioningState::set_filterlife(::google::protobuf::uint32 value) {
  
  filterlife_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningState.FilterLife)
}

// bool Anion = 6;
inline void airConditioningState::clear_anion() {
  anion_ = false;
}
inline bool airConditioningState::anion() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningState.Anion)
  return anion_;
}
inline void airConditioningState::set_anion(bool value) {
  
  anion_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningState.Anion)
}

// bool ChildLock = 7;
inline void airConditioningState::clear_childlock() {
  childlock_ = false;
}
inline bool airConditioningState::childlock() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningState.ChildLock)
  return childlock_;
}
inline void airConditioningState::set_childlock(bool value) {
  
  childlock_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningState.ChildLock)
}

// bool Light = 8;
inline void airConditioningState::clear_light() {
  light_ = false;
}
inline bool airConditioningState::light() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningState.Light)
  return light_;
}
inline void airConditioningState::set_light(bool value) {
  
  light_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningState.Light)
}

// bool Uv = 9;
inline void airConditioningState::clear_uv() {
  uv_ = false;
}
inline bool airConditioningState::uv() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningState.Uv)
  return uv_;
}
inline void airConditioningState::set_uv(bool value) {
  
  uv_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningState.Uv)
}

// bool Wet = 10;
inline void airConditioningState::clear_wet() {
  wet_ = false;
}
inline bool airConditioningState::wet() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningState.Wet)
  return wet_;
}
inline void airConditioningState::set_wet(bool value) {
  
  wet_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningState.Wet)
}

// bool FliterReset = 11;
inline void airConditioningState::clear_fliterreset() {
  fliterreset_ = false;
}
inline bool airConditioningState::fliterreset() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningState.FliterReset)
  return fliterreset_;
}
inline void airConditioningState::set_fliterreset(bool value) {
  
  fliterreset_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningState.FliterReset)
}

// uint32 IndoorTemp = 12;
inline void airConditioningState::clear_indoortemp() {
  indoortemp_ = 0u;
}
inline ::google::protobuf::uint32 airConditioningState::indoortemp() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningState.IndoorTemp)
  return indoortemp_;
}
inline void airConditioningState::set_indoortemp(::google::protobuf::uint32 value) {
  
  indoortemp_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningState.IndoorTemp)
}

// uint32 OutdoorTemp = 13;
inline void airConditioningState::clear_outdoortemp() {
  outdoortemp_ = 0u;
}
inline ::google::protobuf::uint32 airConditioningState::outdoortemp() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningState.OutdoorTemp)
  return outdoortemp_;
}
inline void airConditioningState::set_outdoortemp(::google::protobuf::uint32 value) {
  
  outdoortemp_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningState.OutdoorTemp)
}

// uint32 IndoorHumidity = 14;
inline void airConditioningState::clear_indoorhumidity() {
  indoorhumidity_ = 0u;
}
inline ::google::protobuf::uint32 airConditioningState::indoorhumidity() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningState.IndoorHumidity)
  return indoorhumidity_;
}
inline void airConditioningState::set_indoorhumidity(::google::protobuf::uint32 value) {
  
  indoorhumidity_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningState.IndoorHumidity)
}

// uint32 OutdoorHumidity = 15;
inline void airConditioningState::clear_outdoorhumidity() {
  outdoorhumidity_ = 0u;
}
inline ::google::protobuf::uint32 airConditioningState::outdoorhumidity() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningState.OutdoorHumidity)
  return outdoorhumidity_;
}
inline void airConditioningState::set_outdoorhumidity(::google::protobuf::uint32 value) {
  
  outdoorhumidity_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningState.OutdoorHumidity)
}

// uint32 CO2 = 16;
inline void airConditioningState::clear_co2() {
  co2_ = 0u;
}
inline ::google::protobuf::uint32 airConditioningState::co2() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningState.CO2)
  return co2_;
}
inline void airConditioningState::set_co2(::google::protobuf::uint32 value) {
  
  co2_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningState.CO2)
}

// uint32 Ch2oValue = 17;
inline void airConditioningState::clear_ch2ovalue() {
  ch2ovalue_ = 0u;
}
inline ::google::protobuf::uint32 airConditioningState::ch2ovalue() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningState.Ch2oValue)
  return ch2ovalue_;
}
inline void airConditioningState::set_ch2ovalue(::google::protobuf::uint32 value) {
  
  ch2ovalue_ = value;
  // @@protoc_insertion_point(field_set:pb.airConditioningState.Ch2oValue)
}

// string Fault = 18;
inline void airConditioningState::clear_fault() {
  fault_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& airConditioningState::fault() const {
  // @@protoc_insertion_point(field_get:pb.airConditioningState.Fault)
  return fault_.GetNoArena();
}
inline void airConditioningState::set_fault(const ::std::string& value) {
  
  fault_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.airConditioningState.Fault)
}
#if LANG_CXX11
inline void airConditioningState::set_fault(::std::string&& value) {
  
  fault_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.airConditioningState.Fault)
}
#endif
inline void airConditioningState::set_fault(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fault_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.airConditioningState.Fault)
}
inline void airConditioningState::set_fault(const char* value, size_t size) {
  
  fault_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.airConditioningState.Fault)
}
inline ::std::string* airConditioningState::mutable_fault() {
  
  // @@protoc_insertion_point(field_mutable:pb.airConditioningState.Fault)
  return fault_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* airConditioningState::release_fault() {
  // @@protoc_insertion_point(field_release:pb.airConditioningState.Fault)
  
  return fault_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void airConditioningState::set_allocated_fault(::std::string* fault) {
  if (fault != NULL) {
    
  } else {
    
  }
  fault_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fault);
  // @@protoc_insertion_point(field_set_allocated:pb.airConditioningState.Fault)
}

// -------------------------------------------------------------------

// DevicedisconnReq

// uint32 DeviceType = 1;
inline void DevicedisconnReq::clear_devicetype() {
  devicetype_ = 0u;
}
inline ::google::protobuf::uint32 DevicedisconnReq::devicetype() const {
  // @@protoc_insertion_point(field_get:pb.DevicedisconnReq.DeviceType)
  return devicetype_;
}
inline void DevicedisconnReq::set_devicetype(::google::protobuf::uint32 value) {
  
  devicetype_ = value;
  // @@protoc_insertion_point(field_set:pb.DevicedisconnReq.DeviceType)
}

// string DeviceId = 2;
inline void DevicedisconnReq::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DevicedisconnReq::deviceid() const {
  // @@protoc_insertion_point(field_get:pb.DevicedisconnReq.DeviceId)
  return deviceid_.GetNoArena();
}
inline void DevicedisconnReq::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.DevicedisconnReq.DeviceId)
}
#if LANG_CXX11
inline void DevicedisconnReq::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.DevicedisconnReq.DeviceId)
}
#endif
inline void DevicedisconnReq::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DevicedisconnReq.DeviceId)
}
inline void DevicedisconnReq::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DevicedisconnReq.DeviceId)
}
inline ::std::string* DevicedisconnReq::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:pb.DevicedisconnReq.DeviceId)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DevicedisconnReq::release_deviceid() {
  // @@protoc_insertion_point(field_release:pb.DevicedisconnReq.DeviceId)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DevicedisconnReq::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:pb.DevicedisconnReq.DeviceId)
}

// string MsgSeq = 3;
inline void DevicedisconnReq::clear_msgseq() {
  msgseq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DevicedisconnReq::msgseq() const {
  // @@protoc_insertion_point(field_get:pb.DevicedisconnReq.MsgSeq)
  return msgseq_.GetNoArena();
}
inline void DevicedisconnReq::set_msgseq(const ::std::string& value) {
  
  msgseq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.DevicedisconnReq.MsgSeq)
}
#if LANG_CXX11
inline void DevicedisconnReq::set_msgseq(::std::string&& value) {
  
  msgseq_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.DevicedisconnReq.MsgSeq)
}
#endif
inline void DevicedisconnReq::set_msgseq(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgseq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DevicedisconnReq.MsgSeq)
}
inline void DevicedisconnReq::set_msgseq(const char* value, size_t size) {
  
  msgseq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DevicedisconnReq.MsgSeq)
}
inline ::std::string* DevicedisconnReq::mutable_msgseq() {
  
  // @@protoc_insertion_point(field_mutable:pb.DevicedisconnReq.MsgSeq)
  return msgseq_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DevicedisconnReq::release_msgseq() {
  // @@protoc_insertion_point(field_release:pb.DevicedisconnReq.MsgSeq)
  
  return msgseq_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DevicedisconnReq::set_allocated_msgseq(::std::string* msgseq) {
  if (msgseq != NULL) {
    
  } else {
    
  }
  msgseq_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgseq);
  // @@protoc_insertion_point(field_set_allocated:pb.DevicedisconnReq.MsgSeq)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::airConditioningMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::airConditioningMode>() {
  return ::pb::airConditioningMode_descriptor();
}
template <> struct is_proto_enum< ::pb::airConditioningFlowSpeed> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::airConditioningFlowSpeed>() {
  return ::pb::airConditioningFlowSpeed_descriptor();
}
template <> struct is_proto_enum< ::pb::sceneMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::sceneMode>() {
  return ::pb::sceneMode_descriptor();
}
template <> struct is_proto_enum< ::pb::workMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::workMode>() {
  return ::pb::workMode_descriptor();
}
template <> struct is_proto_enum< ::pb::digitalCtl> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::digitalCtl>() {
  return ::pb::digitalCtl_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_iot_2eproto__INCLUDED
