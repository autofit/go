// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iot.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	iot.proto

It has these top-level messages:
	DeviceregReq
	DeviceregResp
	BaseCmd
	GateData
	CmdSetList
	DeviceList
	GeneralList
	GeneralState
	MultimediaList
	DataParm
	MultimediaState
	VolumeState
	OutputState
	ChannelValue
	AlarmList
	FarmState
	FarmList
	LightList
	LightExtra
	LightState
	AirConditioning
	AirConditioningList
	AirConditioningState
	DevicedisconnReq
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AirConditioningMode int32

const (
	AirConditioningMode_manual      AirConditioningMode = 0
	AirConditioningMode_auto        AirConditioningMode = 1
	AirConditioningMode_comfortable AirConditioningMode = 2
	AirConditioningMode_msleep      AirConditioningMode = 3
)

var AirConditioningMode_name = map[int32]string{
	0: "manual",
	1: "auto",
	2: "comfortable",
	3: "msleep",
}
var AirConditioningMode_value = map[string]int32{
	"manual":      0,
	"auto":        1,
	"comfortable": 2,
	"msleep":      3,
}

func (x AirConditioningMode) String() string {
	return proto.EnumName(AirConditioningMode_name, int32(x))
}
func (AirConditioningMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AirConditioningFlowSpeed int32

const (
	AirConditioningFlowSpeed_fsleep AirConditioningFlowSpeed = 0
	AirConditioningFlowSpeed_low    AirConditioningFlowSpeed = 1
	AirConditioningFlowSpeed_mid    AirConditioningFlowSpeed = 2
	AirConditioningFlowSpeed_high   AirConditioningFlowSpeed = 3
)

var AirConditioningFlowSpeed_name = map[int32]string{
	0: "fsleep",
	1: "low",
	2: "mid",
	3: "high",
}
var AirConditioningFlowSpeed_value = map[string]int32{
	"fsleep": 0,
	"low":    1,
	"mid":    2,
	"high":   3,
}

func (x AirConditioningFlowSpeed) String() string {
	return proto.EnumName(AirConditioningFlowSpeed_name, int32(x))
}
func (AirConditioningFlowSpeed) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SceneMode int32

const (
	SceneMode_scene_1 SceneMode = 0
	SceneMode_scene_2 SceneMode = 1
	SceneMode_scene_3 SceneMode = 2
	SceneMode_scene_4 SceneMode = 3
	SceneMode_scene_5 SceneMode = 4
)

var SceneMode_name = map[int32]string{
	0: "scene_1",
	1: "scene_2",
	2: "scene_3",
	3: "scene_4",
	4: "scene_5",
}
var SceneMode_value = map[string]int32{
	"scene_1": 0,
	"scene_2": 1,
	"scene_3": 2,
	"scene_4": 3,
	"scene_5": 4,
}

func (x SceneMode) String() string {
	return proto.EnumName(SceneMode_name, int32(x))
}
func (SceneMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type WorkMode int32

const (
	WorkMode_white  WorkMode = 0
	WorkMode_colour WorkMode = 1
	WorkMode_scene  WorkMode = 2
	WorkMode_music  WorkMode = 3
)

var WorkMode_name = map[int32]string{
	0: "white",
	1: "colour",
	2: "scene",
	3: "music",
}
var WorkMode_value = map[string]int32{
	"white":  0,
	"colour": 1,
	"scene":  2,
	"music":  3,
}

func (x WorkMode) String() string {
	return proto.EnumName(WorkMode_name, int32(x))
}
func (WorkMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type DigitalCtl int32

const (
	DigitalCtl_GeneralCtl         DigitalCtl = 0
	DigitalCtl_LightCtl           DigitalCtl = 1
	DigitalCtl_AirConditioningCtl DigitalCtl = 2
	DigitalCtl_FarmCtl            DigitalCtl = 3
	DigitalCtl_MultimediaCtl      DigitalCtl = 4
)

var DigitalCtl_name = map[int32]string{
	0: "GeneralCtl",
	1: "LightCtl",
	2: "AirConditioningCtl",
	3: "FarmCtl",
	4: "MultimediaCtl",
}
var DigitalCtl_value = map[string]int32{
	"GeneralCtl":         0,
	"LightCtl":           1,
	"AirConditioningCtl": 2,
	"FarmCtl":            3,
	"MultimediaCtl":      4,
}

func (x DigitalCtl) String() string {
	return proto.EnumName(DigitalCtl_name, int32(x))
}
func (DigitalCtl) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type DeviceregReq struct {
	DeviceType    uint32 `protobuf:"varint,1,opt,name=DeviceType" json:"DeviceType,omitempty"`
	DeviceRegCode string `protobuf:"bytes,2,opt,name=DeviceRegCode" json:"DeviceRegCode,omitempty"`
	DeviceId      string `protobuf:"bytes,3,opt,name=DeviceId" json:"DeviceId,omitempty"`
	MsgSeq        string `protobuf:"bytes,4,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
	TempId        string `protobuf:"bytes,5,opt,name=TempId" json:"TempId,omitempty"`
}

func (m *DeviceregReq) Reset()                    { *m = DeviceregReq{} }
func (m *DeviceregReq) String() string            { return proto.CompactTextString(m) }
func (*DeviceregReq) ProtoMessage()               {}
func (*DeviceregReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DeviceregReq) GetDeviceType() uint32 {
	if m != nil {
		return m.DeviceType
	}
	return 0
}

func (m *DeviceregReq) GetDeviceRegCode() string {
	if m != nil {
		return m.DeviceRegCode
	}
	return ""
}

func (m *DeviceregReq) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DeviceregReq) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func (m *DeviceregReq) GetTempId() string {
	if m != nil {
		return m.TempId
	}
	return ""
}

type DeviceregResp struct {
	DeviceType      uint32 `protobuf:"varint,1,opt,name=DeviceType" json:"DeviceType,omitempty"`
	DeviceId        string `protobuf:"bytes,2,opt,name=DeviceId" json:"DeviceId,omitempty"`
	BrokerAddr      string `protobuf:"bytes,3,opt,name=BrokerAddr" json:"BrokerAddr,omitempty"`
	MsgSeq          string `protobuf:"bytes,4,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
	ServerPublicKey string `protobuf:"bytes,5,opt,name=ServerPublicKey" json:"ServerPublicKey,omitempty"`
	PrivateKey      string `protobuf:"bytes,6,opt,name=PrivateKey" json:"PrivateKey,omitempty"`
	Error           string `protobuf:"bytes,7,opt,name=Error" json:"Error,omitempty"`
}

func (m *DeviceregResp) Reset()                    { *m = DeviceregResp{} }
func (m *DeviceregResp) String() string            { return proto.CompactTextString(m) }
func (*DeviceregResp) ProtoMessage()               {}
func (*DeviceregResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DeviceregResp) GetDeviceType() uint32 {
	if m != nil {
		return m.DeviceType
	}
	return 0
}

func (m *DeviceregResp) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DeviceregResp) GetBrokerAddr() string {
	if m != nil {
		return m.BrokerAddr
	}
	return ""
}

func (m *DeviceregResp) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func (m *DeviceregResp) GetServerPublicKey() string {
	if m != nil {
		return m.ServerPublicKey
	}
	return ""
}

func (m *DeviceregResp) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *DeviceregResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type BaseCmd struct {
	DeviceType uint32 `protobuf:"varint,1,opt,name=DeviceType" json:"DeviceType,omitempty"`
	DeviceId   string `protobuf:"bytes,2,opt,name=DeviceId" json:"DeviceId,omitempty"`
	Ip         string `protobuf:"bytes,3,opt,name=Ip" json:"Ip,omitempty"`
	MsgSeq     string `protobuf:"bytes,4,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
	Mark       uint32 `protobuf:"varint,5,opt,name=Mark" json:"Mark,omitempty"`
	Cmd        string `protobuf:"bytes,6,opt,name=Cmd" json:"Cmd,omitempty"`
	DeviceList string `protobuf:"bytes,7,opt,name=DeviceList" json:"DeviceList,omitempty"`
	Data       string `protobuf:"bytes,8,opt,name=Data" json:"Data,omitempty"`
	ServerId   string `protobuf:"bytes,9,opt,name=ServerId" json:"ServerId,omitempty"`
	UserName   string `protobuf:"bytes,10,opt,name=UserName" json:"UserName,omitempty"`
	Error      uint32 `protobuf:"varint,11,opt,name=Error" json:"Error,omitempty"`
	BrokerAddr string `protobuf:"bytes,12,opt,name=BrokerAddr" json:"BrokerAddr,omitempty"`
	GateId     string `protobuf:"bytes,13,opt,name=GateId" json:"GateId,omitempty"`
	Token      string `protobuf:"bytes,14,opt,name=Token" json:"Token,omitempty"`
}

func (m *BaseCmd) Reset()                    { *m = BaseCmd{} }
func (m *BaseCmd) String() string            { return proto.CompactTextString(m) }
func (*BaseCmd) ProtoMessage()               {}
func (*BaseCmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BaseCmd) GetDeviceType() uint32 {
	if m != nil {
		return m.DeviceType
	}
	return 0
}

func (m *BaseCmd) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *BaseCmd) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *BaseCmd) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func (m *BaseCmd) GetMark() uint32 {
	if m != nil {
		return m.Mark
	}
	return 0
}

func (m *BaseCmd) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *BaseCmd) GetDeviceList() string {
	if m != nil {
		return m.DeviceList
	}
	return ""
}

func (m *BaseCmd) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *BaseCmd) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *BaseCmd) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *BaseCmd) GetError() uint32 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *BaseCmd) GetBrokerAddr() string {
	if m != nil {
		return m.BrokerAddr
	}
	return ""
}

func (m *BaseCmd) GetGateId() string {
	if m != nil {
		return m.GateId
	}
	return ""
}

func (m *BaseCmd) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type GateData struct {
	GateId    string        `protobuf:"bytes,1,opt,name=GateId" json:"GateId,omitempty"`
	Token     string        `protobuf:"bytes,2,opt,name=Token" json:"Token,omitempty"`
	Server    string        `protobuf:"bytes,3,opt,name=Server" json:"Server,omitempty"`
	BakServer string        `protobuf:"bytes,4,opt,name=BakServer" json:"BakServer,omitempty"`
	CmdSet    []*CmdSetList `protobuf:"bytes,5,rep,name=CmdSet" json:"CmdSet,omitempty"`
	Device    []*DeviceList `protobuf:"bytes,6,rep,name=Device" json:"Device,omitempty"`
}

func (m *GateData) Reset()                    { *m = GateData{} }
func (m *GateData) String() string            { return proto.CompactTextString(m) }
func (*GateData) ProtoMessage()               {}
func (*GateData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GateData) GetGateId() string {
	if m != nil {
		return m.GateId
	}
	return ""
}

func (m *GateData) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GateData) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *GateData) GetBakServer() string {
	if m != nil {
		return m.BakServer
	}
	return ""
}

func (m *GateData) GetCmdSet() []*CmdSetList {
	if m != nil {
		return m.CmdSet
	}
	return nil
}

func (m *GateData) GetDevice() []*DeviceList {
	if m != nil {
		return m.Device
	}
	return nil
}

type CmdSetList struct {
	Cmd    string        `protobuf:"bytes,1,opt,name=Cmd" json:"Cmd,omitempty"`
	Device []*DeviceList `protobuf:"bytes,2,rep,name=Device" json:"Device,omitempty"`
}

func (m *CmdSetList) Reset()                    { *m = CmdSetList{} }
func (m *CmdSetList) String() string            { return proto.CompactTextString(m) }
func (*CmdSetList) ProtoMessage()               {}
func (*CmdSetList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CmdSetList) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *CmdSetList) GetDevice() []*DeviceList {
	if m != nil {
		return m.Device
	}
	return nil
}

type DeviceList struct {
	DeviceId             string                `protobuf:"bytes,1,opt,name=DeviceId" json:"DeviceId,omitempty"`
	Name                 string                `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Category             string                `protobuf:"bytes,3,opt,name=Category" json:"Category,omitempty"`
	Sleep                string                `protobuf:"bytes,4,opt,name=Sleep" json:"Sleep,omitempty"`
	MsgSeq               string                `protobuf:"bytes,5,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
	DigitalCtl           DigitalCtl            `protobuf:"varint,6,opt,name=DigitalCtl,enum=pb.DigitalCtl" json:"DigitalCtl,omitempty"`
	GeneralCtl           *GeneralList          `protobuf:"bytes,7,opt,name=GeneralCtl" json:"GeneralCtl,omitempty"`
	GeneralState         *GeneralState         `protobuf:"bytes,8,opt,name=GeneralState" json:"GeneralState,omitempty"`
	LightCtl             *LightList            `protobuf:"bytes,9,opt,name=LightCtl" json:"LightCtl,omitempty"`
	LightState           *LightState           `protobuf:"bytes,10,opt,name=LightState" json:"LightState,omitempty"`
	AirConditioningCtl   *AirConditioningList  `protobuf:"bytes,11,opt,name=AirConditioningCtl" json:"AirConditioningCtl,omitempty"`
	AirConditioningState *AirConditioningState `protobuf:"bytes,12,opt,name=AirConditioningState" json:"AirConditioningState,omitempty"`
	FarmCtl              *FarmList             `protobuf:"bytes,13,opt,name=FarmCtl" json:"FarmCtl,omitempty"`
	FarmState            *FarmState            `protobuf:"bytes,14,opt,name=FarmState" json:"FarmState,omitempty"`
	MultimediaCtl        *MultimediaList       `protobuf:"bytes,15,opt,name=MultimediaCtl" json:"MultimediaCtl,omitempty"`
	MultimediaState      *MultimediaState      `protobuf:"bytes,16,opt,name=MultimediaState" json:"MultimediaState,omitempty"`
}

func (m *DeviceList) Reset()                    { *m = DeviceList{} }
func (m *DeviceList) String() string            { return proto.CompactTextString(m) }
func (*DeviceList) ProtoMessage()               {}
func (*DeviceList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeviceList) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DeviceList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceList) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *DeviceList) GetSleep() string {
	if m != nil {
		return m.Sleep
	}
	return ""
}

func (m *DeviceList) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func (m *DeviceList) GetDigitalCtl() DigitalCtl {
	if m != nil {
		return m.DigitalCtl
	}
	return DigitalCtl_GeneralCtl
}

func (m *DeviceList) GetGeneralCtl() *GeneralList {
	if m != nil {
		return m.GeneralCtl
	}
	return nil
}

func (m *DeviceList) GetGeneralState() *GeneralState {
	if m != nil {
		return m.GeneralState
	}
	return nil
}

func (m *DeviceList) GetLightCtl() *LightList {
	if m != nil {
		return m.LightCtl
	}
	return nil
}

func (m *DeviceList) GetLightState() *LightState {
	if m != nil {
		return m.LightState
	}
	return nil
}

func (m *DeviceList) GetAirConditioningCtl() *AirConditioningList {
	if m != nil {
		return m.AirConditioningCtl
	}
	return nil
}

func (m *DeviceList) GetAirConditioningState() *AirConditioningState {
	if m != nil {
		return m.AirConditioningState
	}
	return nil
}

func (m *DeviceList) GetFarmCtl() *FarmList {
	if m != nil {
		return m.FarmCtl
	}
	return nil
}

func (m *DeviceList) GetFarmState() *FarmState {
	if m != nil {
		return m.FarmState
	}
	return nil
}

func (m *DeviceList) GetMultimediaCtl() *MultimediaList {
	if m != nil {
		return m.MultimediaCtl
	}
	return nil
}

func (m *DeviceList) GetMultimediaState() *MultimediaState {
	if m != nil {
		return m.MultimediaState
	}
	return nil
}

type GeneralList struct {
	Temperature   string `protobuf:"bytes,1,opt,name=temperature" json:"temperature,omitempty"`
	Volume        string `protobuf:"bytes,2,opt,name=Volume" json:"Volume,omitempty"`
	Poslition     string `protobuf:"bytes,3,opt,name=Poslition" json:"Poslition,omitempty"`
	Cmd           string `protobuf:"bytes,4,opt,name=Cmd" json:"Cmd,omitempty"`
	Switch        bool   `protobuf:"varint,5,opt,name=Switch" json:"Switch,omitempty"`
	WindDirection string `protobuf:"bytes,6,opt,name=WindDirection" json:"WindDirection,omitempty"`
	Mode          uint32 `protobuf:"varint,7,opt,name=Mode" json:"Mode,omitempty"`
	Sensitivity   uint32 `protobuf:"varint,8,opt,name=Sensitivity" json:"Sensitivity,omitempty"`
}

func (m *GeneralList) Reset()                    { *m = GeneralList{} }
func (m *GeneralList) String() string            { return proto.CompactTextString(m) }
func (*GeneralList) ProtoMessage()               {}
func (*GeneralList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GeneralList) GetTemperature() string {
	if m != nil {
		return m.Temperature
	}
	return ""
}

func (m *GeneralList) GetVolume() string {
	if m != nil {
		return m.Volume
	}
	return ""
}

func (m *GeneralList) GetPoslition() string {
	if m != nil {
		return m.Poslition
	}
	return ""
}

func (m *GeneralList) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *GeneralList) GetSwitch() bool {
	if m != nil {
		return m.Switch
	}
	return false
}

func (m *GeneralList) GetWindDirection() string {
	if m != nil {
		return m.WindDirection
	}
	return ""
}

func (m *GeneralList) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *GeneralList) GetSensitivity() uint32 {
	if m != nil {
		return m.Sensitivity
	}
	return 0
}

type GeneralState struct {
	Switch         bool       `protobuf:"varint,1,opt,name=Switch" json:"Switch,omitempty"`
	Temperature    string     `protobuf:"bytes,2,opt,name=Temperature" json:"Temperature,omitempty"`
	Volume         string     `protobuf:"bytes,3,opt,name=Volume" json:"Volume,omitempty"`
	Poslition      string     `protobuf:"bytes,4,opt,name=Poslition" json:"Poslition,omitempty"`
	O2             string     `protobuf:"bytes,5,opt,name=O2" json:"O2,omitempty"`
	CO2            string     `protobuf:"bytes,6,opt,name=CO2" json:"CO2,omitempty"`
	CO             string     `protobuf:"bytes,7,opt,name=CO" json:"CO,omitempty"`
	WindDirection  string     `protobuf:"bytes,8,opt,name=WindDirection" json:"WindDirection,omitempty"`
	Mode           uint32     `protobuf:"varint,9,opt,name=Mode" json:"Mode,omitempty"`
	Sensitivity    uint32     `protobuf:"varint,10,opt,name=Sensitivity" json:"Sensitivity,omitempty"`
	LockState      string     `protobuf:"bytes,11,opt,name=LockState" json:"LockState,omitempty"`
	Beatingofheart uint32     `protobuf:"varint,12,opt,name=Beatingofheart" json:"Beatingofheart,omitempty"`
	Brigness       string     `protobuf:"bytes,13,opt,name=Brigness" json:"Brigness,omitempty"`
	Alarm          *AlarmList `protobuf:"bytes,14,opt,name=Alarm" json:"Alarm,omitempty"`
}

func (m *GeneralState) Reset()                    { *m = GeneralState{} }
func (m *GeneralState) String() string            { return proto.CompactTextString(m) }
func (*GeneralState) ProtoMessage()               {}
func (*GeneralState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GeneralState) GetSwitch() bool {
	if m != nil {
		return m.Switch
	}
	return false
}

func (m *GeneralState) GetTemperature() string {
	if m != nil {
		return m.Temperature
	}
	return ""
}

func (m *GeneralState) GetVolume() string {
	if m != nil {
		return m.Volume
	}
	return ""
}

func (m *GeneralState) GetPoslition() string {
	if m != nil {
		return m.Poslition
	}
	return ""
}

func (m *GeneralState) GetO2() string {
	if m != nil {
		return m.O2
	}
	return ""
}

func (m *GeneralState) GetCO2() string {
	if m != nil {
		return m.CO2
	}
	return ""
}

func (m *GeneralState) GetCO() string {
	if m != nil {
		return m.CO
	}
	return ""
}

func (m *GeneralState) GetWindDirection() string {
	if m != nil {
		return m.WindDirection
	}
	return ""
}

func (m *GeneralState) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *GeneralState) GetSensitivity() uint32 {
	if m != nil {
		return m.Sensitivity
	}
	return 0
}

func (m *GeneralState) GetLockState() string {
	if m != nil {
		return m.LockState
	}
	return ""
}

func (m *GeneralState) GetBeatingofheart() uint32 {
	if m != nil {
		return m.Beatingofheart
	}
	return 0
}

func (m *GeneralState) GetBrigness() string {
	if m != nil {
		return m.Brigness
	}
	return ""
}

func (m *GeneralState) GetAlarm() *AlarmList {
	if m != nil {
		return m.Alarm
	}
	return nil
}

type MultimediaList struct {
	Path         uint32    `protobuf:"varint,1,opt,name=Path" json:"Path,omitempty"`
	Press        bool      `protobuf:"varint,2,opt,name=Press" json:"Press,omitempty"`
	Switch       bool      `protobuf:"varint,3,opt,name=Switch" json:"Switch,omitempty"`
	Sort         bool      `protobuf:"varint,4,opt,name=Sort" json:"Sort,omitempty"`
	Scenario     uint32    `protobuf:"varint,5,opt,name=Scenario" json:"Scenario,omitempty"`
	Channel      uint32    `protobuf:"varint,6,opt,name=Channel" json:"Channel,omitempty"`
	StartChannel uint32    `protobuf:"varint,7,opt,name=StartChannel" json:"StartChannel,omitempty"`
	EndChannel   uint32    `protobuf:"varint,8,opt,name=EndChannel" json:"EndChannel,omitempty"`
	Volume       uint32    `protobuf:"varint,9,opt,name=Volume" json:"Volume,omitempty"`
	Mute         bool      `protobuf:"varint,10,opt,name=Mute" json:"Mute,omitempty"`
	Mode         uint32    `protobuf:"varint,11,opt,name=Mode" json:"Mode,omitempty"`
	MeetingName  string    `protobuf:"bytes,12,opt,name=MeetingName" json:"MeetingName,omitempty"`
	State        uint32    `protobuf:"varint,13,opt,name=State" json:"State,omitempty"`
	Data         *DataParm `protobuf:"bytes,14,opt,name=Data" json:"Data,omitempty"`
}

func (m *MultimediaList) Reset()                    { *m = MultimediaList{} }
func (m *MultimediaList) String() string            { return proto.CompactTextString(m) }
func (*MultimediaList) ProtoMessage()               {}
func (*MultimediaList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MultimediaList) GetPath() uint32 {
	if m != nil {
		return m.Path
	}
	return 0
}

func (m *MultimediaList) GetPress() bool {
	if m != nil {
		return m.Press
	}
	return false
}

func (m *MultimediaList) GetSwitch() bool {
	if m != nil {
		return m.Switch
	}
	return false
}

func (m *MultimediaList) GetSort() bool {
	if m != nil {
		return m.Sort
	}
	return false
}

func (m *MultimediaList) GetScenario() uint32 {
	if m != nil {
		return m.Scenario
	}
	return 0
}

func (m *MultimediaList) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *MultimediaList) GetStartChannel() uint32 {
	if m != nil {
		return m.StartChannel
	}
	return 0
}

func (m *MultimediaList) GetEndChannel() uint32 {
	if m != nil {
		return m.EndChannel
	}
	return 0
}

func (m *MultimediaList) GetVolume() uint32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *MultimediaList) GetMute() bool {
	if m != nil {
		return m.Mute
	}
	return false
}

func (m *MultimediaList) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *MultimediaList) GetMeetingName() string {
	if m != nil {
		return m.MeetingName
	}
	return ""
}

func (m *MultimediaList) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *MultimediaList) GetData() *DataParm {
	if m != nil {
		return m.Data
	}
	return nil
}

type DataParm struct {
	DevType     uint32 `protobuf:"varint,1,opt,name=DevType" json:"DevType,omitempty"`
	DevIp       string `protobuf:"bytes,2,opt,name=DevIp" json:"DevIp,omitempty"`
	DevPort     string `protobuf:"bytes,3,opt,name=DevPort" json:"DevPort,omitempty"`
	DevUsername string `protobuf:"bytes,4,opt,name=DevUsername" json:"DevUsername,omitempty"`
	DevPassword string `protobuf:"bytes,5,opt,name=DevPassword" json:"DevPassword,omitempty"`
}

func (m *DataParm) Reset()                    { *m = DataParm{} }
func (m *DataParm) String() string            { return proto.CompactTextString(m) }
func (*DataParm) ProtoMessage()               {}
func (*DataParm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DataParm) GetDevType() uint32 {
	if m != nil {
		return m.DevType
	}
	return 0
}

func (m *DataParm) GetDevIp() string {
	if m != nil {
		return m.DevIp
	}
	return ""
}

func (m *DataParm) GetDevPort() string {
	if m != nil {
		return m.DevPort
	}
	return ""
}

func (m *DataParm) GetDevUsername() string {
	if m != nil {
		return m.DevUsername
	}
	return ""
}

func (m *DataParm) GetDevPassword() string {
	if m != nil {
		return m.DevPassword
	}
	return ""
}

type MultimediaState struct {
	Volume *VolumeState `protobuf:"bytes,1,opt,name=Volume" json:"Volume,omitempty"`
}

func (m *MultimediaState) Reset()                    { *m = MultimediaState{} }
func (m *MultimediaState) String() string            { return proto.CompactTextString(m) }
func (*MultimediaState) ProtoMessage()               {}
func (*MultimediaState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MultimediaState) GetVolume() *VolumeState {
	if m != nil {
		return m.Volume
	}
	return nil
}

type VolumeState struct {
	Output *OutputState `protobuf:"bytes,1,opt,name=Output" json:"Output,omitempty"`
	Input  *OutputState `protobuf:"bytes,2,opt,name=Input" json:"Input,omitempty"`
}

func (m *VolumeState) Reset()                    { *m = VolumeState{} }
func (m *VolumeState) String() string            { return proto.CompactTextString(m) }
func (*VolumeState) ProtoMessage()               {}
func (*VolumeState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *VolumeState) GetOutput() *OutputState {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *VolumeState) GetInput() *OutputState {
	if m != nil {
		return m.Input
	}
	return nil
}

type OutputState struct {
	ChannelValue []*ChannelValue `protobuf:"bytes,1,rep,name=ChannelValue" json:"ChannelValue,omitempty"`
}

func (m *OutputState) Reset()                    { *m = OutputState{} }
func (m *OutputState) String() string            { return proto.CompactTextString(m) }
func (*OutputState) ProtoMessage()               {}
func (*OutputState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *OutputState) GetChannelValue() []*ChannelValue {
	if m != nil {
		return m.ChannelValue
	}
	return nil
}

type ChannelValue struct {
	Channel uint32 `protobuf:"varint,1,opt,name=Channel" json:"Channel,omitempty"`
	Value   uint32 `protobuf:"varint,2,opt,name=Value" json:"Value,omitempty"`
}

func (m *ChannelValue) Reset()                    { *m = ChannelValue{} }
func (m *ChannelValue) String() string            { return proto.CompactTextString(m) }
func (*ChannelValue) ProtoMessage()               {}
func (*ChannelValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ChannelValue) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *ChannelValue) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type AlarmList struct {
	GasAlarm            uint32 `protobuf:"varint,1,opt,name=GasAlarm" json:"GasAlarm,omitempty"`
	SmokeAlarm          uint32 `protobuf:"varint,2,opt,name=SmokeAlarm" json:"SmokeAlarm,omitempty"`
	ShockAlarm          uint32 `protobuf:"varint,3,opt,name=ShockAlarm" json:"ShockAlarm,omitempty"`
	LeakAlarm           uint32 `protobuf:"varint,4,opt,name=LeakAlarm" json:"LeakAlarm,omitempty"`
	FallAlarm           uint32 `protobuf:"varint,5,opt,name=FallAlarm" json:"FallAlarm,omitempty"`
	HeartAlarm          uint32 `protobuf:"varint,6,opt,name=HeartAlarm" json:"HeartAlarm,omitempty"`
	PoslitionAlarm      uint32 `protobuf:"varint,7,opt,name=PoslitionAlarm" json:"PoslitionAlarm,omitempty"`
	LowTemperatureAlarm uint32 `protobuf:"varint,8,opt,name=LowTemperatureAlarm" json:"LowTemperatureAlarm,omitempty"`
	CoAlarm             uint32 `protobuf:"varint,9,opt,name=CoAlarm" json:"CoAlarm,omitempty"`
	EarmarkAlarm        uint32 `protobuf:"varint,10,opt,name=EarmarkAlarm" json:"EarmarkAlarm,omitempty"`
	CollarAlarm         uint32 `protobuf:"varint,11,opt,name=CollarAlarm" json:"CollarAlarm,omitempty"`
}

func (m *AlarmList) Reset()                    { *m = AlarmList{} }
func (m *AlarmList) String() string            { return proto.CompactTextString(m) }
func (*AlarmList) ProtoMessage()               {}
func (*AlarmList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *AlarmList) GetGasAlarm() uint32 {
	if m != nil {
		return m.GasAlarm
	}
	return 0
}

func (m *AlarmList) GetSmokeAlarm() uint32 {
	if m != nil {
		return m.SmokeAlarm
	}
	return 0
}

func (m *AlarmList) GetShockAlarm() uint32 {
	if m != nil {
		return m.ShockAlarm
	}
	return 0
}

func (m *AlarmList) GetLeakAlarm() uint32 {
	if m != nil {
		return m.LeakAlarm
	}
	return 0
}

func (m *AlarmList) GetFallAlarm() uint32 {
	if m != nil {
		return m.FallAlarm
	}
	return 0
}

func (m *AlarmList) GetHeartAlarm() uint32 {
	if m != nil {
		return m.HeartAlarm
	}
	return 0
}

func (m *AlarmList) GetPoslitionAlarm() uint32 {
	if m != nil {
		return m.PoslitionAlarm
	}
	return 0
}

func (m *AlarmList) GetLowTemperatureAlarm() uint32 {
	if m != nil {
		return m.LowTemperatureAlarm
	}
	return 0
}

func (m *AlarmList) GetCoAlarm() uint32 {
	if m != nil {
		return m.CoAlarm
	}
	return 0
}

func (m *AlarmList) GetEarmarkAlarm() uint32 {
	if m != nil {
		return m.EarmarkAlarm
	}
	return 0
}

func (m *AlarmList) GetCollarAlarm() uint32 {
	if m != nil {
		return m.CollarAlarm
	}
	return 0
}

type FarmState struct {
	N                  string `protobuf:"bytes,1,opt,name=N" json:"N,omitempty"`
	P                  string `protobuf:"bytes,2,opt,name=P" json:"P,omitempty"`
	K                  string `protobuf:"bytes,3,opt,name=K" json:"K,omitempty"`
	O2                 string `protobuf:"bytes,4,opt,name=O2" json:"O2,omitempty"`
	CO2                string `protobuf:"bytes,5,opt,name=CO2" json:"CO2,omitempty"`
	CO                 string `protobuf:"bytes,6,opt,name=CO" json:"CO,omitempty"`
	Illumination       string `protobuf:"bytes,7,opt,name=Illumination" json:"Illumination,omitempty"`
	WindDirection      string `protobuf:"bytes,8,opt,name=WindDirection" json:"WindDirection,omitempty"`
	PH                 string `protobuf:"bytes,9,opt,name=PH" json:"PH,omitempty"`
	AirPressure        string `protobuf:"bytes,10,opt,name=AirPressure" json:"AirPressure,omitempty"`
	Flow               string `protobuf:"bytes,11,opt,name=Flow" json:"Flow,omitempty"`
	Temperature        string `protobuf:"bytes,12,opt,name=Temperature" json:"Temperature,omitempty"`
	EarmarkTemperature string `protobuf:"bytes,13,opt,name=EarmarkTemperature" json:"EarmarkTemperature,omitempty"`
	Poslition          string `protobuf:"bytes,14,opt,name=Poslition" json:"Poslition,omitempty"`
	CollarPoslition    string `protobuf:"bytes,15,opt,name=CollarPoslition" json:"CollarPoslition,omitempty"`
}

func (m *FarmState) Reset()                    { *m = FarmState{} }
func (m *FarmState) String() string            { return proto.CompactTextString(m) }
func (*FarmState) ProtoMessage()               {}
func (*FarmState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *FarmState) GetN() string {
	if m != nil {
		return m.N
	}
	return ""
}

func (m *FarmState) GetP() string {
	if m != nil {
		return m.P
	}
	return ""
}

func (m *FarmState) GetK() string {
	if m != nil {
		return m.K
	}
	return ""
}

func (m *FarmState) GetO2() string {
	if m != nil {
		return m.O2
	}
	return ""
}

func (m *FarmState) GetCO2() string {
	if m != nil {
		return m.CO2
	}
	return ""
}

func (m *FarmState) GetCO() string {
	if m != nil {
		return m.CO
	}
	return ""
}

func (m *FarmState) GetIllumination() string {
	if m != nil {
		return m.Illumination
	}
	return ""
}

func (m *FarmState) GetWindDirection() string {
	if m != nil {
		return m.WindDirection
	}
	return ""
}

func (m *FarmState) GetPH() string {
	if m != nil {
		return m.PH
	}
	return ""
}

func (m *FarmState) GetAirPressure() string {
	if m != nil {
		return m.AirPressure
	}
	return ""
}

func (m *FarmState) GetFlow() string {
	if m != nil {
		return m.Flow
	}
	return ""
}

func (m *FarmState) GetTemperature() string {
	if m != nil {
		return m.Temperature
	}
	return ""
}

func (m *FarmState) GetEarmarkTemperature() string {
	if m != nil {
		return m.EarmarkTemperature
	}
	return ""
}

func (m *FarmState) GetPoslition() string {
	if m != nil {
		return m.Poslition
	}
	return ""
}

func (m *FarmState) GetCollarPoslition() string {
	if m != nil {
		return m.CollarPoslition
	}
	return ""
}

type FarmList struct {
	Switch            string `protobuf:"bytes,1,opt,name=Switch" json:"Switch,omitempty"`
	FlowSwitch        string `protobuf:"bytes,2,opt,name=FlowSwitch" json:"FlowSwitch,omitempty"`
	WarmUpSwitch      string `protobuf:"bytes,3,opt,name=WarmUpSwitch" json:"WarmUpSwitch,omitempty"`
	ShadeTheSunSwitch string `protobuf:"bytes,4,opt,name=ShadeTheSunSwitch" json:"ShadeTheSunSwitch,omitempty"`
	RainSwitch        string `protobuf:"bytes,5,opt,name=rainSwitch" json:"rainSwitch,omitempty"`
}

func (m *FarmList) Reset()                    { *m = FarmList{} }
func (m *FarmList) String() string            { return proto.CompactTextString(m) }
func (*FarmList) ProtoMessage()               {}
func (*FarmList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *FarmList) GetSwitch() string {
	if m != nil {
		return m.Switch
	}
	return ""
}

func (m *FarmList) GetFlowSwitch() string {
	if m != nil {
		return m.FlowSwitch
	}
	return ""
}

func (m *FarmList) GetWarmUpSwitch() string {
	if m != nil {
		return m.WarmUpSwitch
	}
	return ""
}

func (m *FarmList) GetShadeTheSunSwitch() string {
	if m != nil {
		return m.ShadeTheSunSwitch
	}
	return ""
}

func (m *FarmList) GetRainSwitch() string {
	if m != nil {
		return m.RainSwitch
	}
	return ""
}

type LightList struct {
	Switch       bool        `protobuf:"varint,1,opt,name=Switch" json:"Switch,omitempty"`
	WorkMode     []WorkMode  `protobuf:"varint,2,rep,packed,name=WorkMode,enum=pb.WorkMode" json:"WorkMode,omitempty"`
	Bright       uint32      `protobuf:"varint,3,opt,name=Bright" json:"Bright,omitempty"`
	Temp         uint32      `protobuf:"varint,4,opt,name=Temp" json:"Temp,omitempty"`
	Colour       string      `protobuf:"bytes,5,opt,name=Colour" json:"Colour,omitempty"`
	Scene        []SceneMode `protobuf:"varint,6,rep,packed,name=Scene,enum=pb.SceneMode" json:"Scene,omitempty"`
	CountClose   uint32      `protobuf:"varint,7,opt,name=CountClose" json:"CountClose,omitempty"`
	CountOpen    uint32      `protobuf:"varint,8,opt,name=CountOpen" json:"CountOpen,omitempty"`
	Control      string      `protobuf:"bytes,9,opt,name=Control" json:"Control,omitempty"`
	Sleep        uint32      `protobuf:"varint,10,opt,name=Sleep" json:"Sleep,omitempty"`
	WakeUp       uint32      `protobuf:"varint,11,opt,name=WakeUp" json:"WakeUp,omitempty"`
	PowerMemory  uint32      `protobuf:"varint,12,opt,name=PowerMemory" json:"PowerMemory,omitempty"`
	DoNotdisturb uint32      `protobuf:"varint,13,opt,name=DoNotdisturb" json:"DoNotdisturb,omitempty"`
	MicMusic     string      `protobuf:"bytes,14,opt,name=MicMusic" json:"MicMusic,omitempty"`
	Music        string      `protobuf:"bytes,15,opt,name=Music" json:"Music,omitempty"`
	LightExtra   *LightExtra `protobuf:"bytes,16,opt,name=lightExtra" json:"lightExtra,omitempty"`
}

func (m *LightList) Reset()                    { *m = LightList{} }
func (m *LightList) String() string            { return proto.CompactTextString(m) }
func (*LightList) ProtoMessage()               {}
func (*LightList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *LightList) GetSwitch() bool {
	if m != nil {
		return m.Switch
	}
	return false
}

func (m *LightList) GetWorkMode() []WorkMode {
	if m != nil {
		return m.WorkMode
	}
	return nil
}

func (m *LightList) GetBright() uint32 {
	if m != nil {
		return m.Bright
	}
	return 0
}

func (m *LightList) GetTemp() uint32 {
	if m != nil {
		return m.Temp
	}
	return 0
}

func (m *LightList) GetColour() string {
	if m != nil {
		return m.Colour
	}
	return ""
}

func (m *LightList) GetScene() []SceneMode {
	if m != nil {
		return m.Scene
	}
	return nil
}

func (m *LightList) GetCountClose() uint32 {
	if m != nil {
		return m.CountClose
	}
	return 0
}

func (m *LightList) GetCountOpen() uint32 {
	if m != nil {
		return m.CountOpen
	}
	return 0
}

func (m *LightList) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

func (m *LightList) GetSleep() uint32 {
	if m != nil {
		return m.Sleep
	}
	return 0
}

func (m *LightList) GetWakeUp() uint32 {
	if m != nil {
		return m.WakeUp
	}
	return 0
}

func (m *LightList) GetPowerMemory() uint32 {
	if m != nil {
		return m.PowerMemory
	}
	return 0
}

func (m *LightList) GetDoNotdisturb() uint32 {
	if m != nil {
		return m.DoNotdisturb
	}
	return 0
}

func (m *LightList) GetMicMusic() string {
	if m != nil {
		return m.MicMusic
	}
	return ""
}

func (m *LightList) GetMusic() string {
	if m != nil {
		return m.Music
	}
	return ""
}

func (m *LightList) GetLightExtra() *LightExtra {
	if m != nil {
		return m.LightExtra
	}
	return nil
}

type LightExtra struct {
	SwitchGradint    uint32 `protobuf:"varint,1,opt,name=SwitchGradint" json:"SwitchGradint,omitempty"`
	MixLightScene    uint32 `protobuf:"varint,2,opt,name=MixLightScene" json:"MixLightScene,omitempty"`
	MixRgbcw         string `protobuf:"bytes,3,opt,name=MixRgbcw" json:"MixRgbcw,omitempty"`
	SegmentDimming   string `protobuf:"bytes,4,opt,name=SegmentDimming" json:"SegmentDimming,omitempty"`
	SwitchNightLight bool   `protobuf:"varint,5,opt,name=SwitchNightLight" json:"SwitchNightLight,omitempty"`
	CycleTiming      string `protobuf:"bytes,6,opt,name=CycleTiming" json:"CycleTiming,omitempty"`
	RandomTiming     string `protobuf:"bytes,7,opt,name=RandomTiming" json:"RandomTiming,omitempty"`
}

func (m *LightExtra) Reset()                    { *m = LightExtra{} }
func (m *LightExtra) String() string            { return proto.CompactTextString(m) }
func (*LightExtra) ProtoMessage()               {}
func (*LightExtra) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *LightExtra) GetSwitchGradint() uint32 {
	if m != nil {
		return m.SwitchGradint
	}
	return 0
}

func (m *LightExtra) GetMixLightScene() uint32 {
	if m != nil {
		return m.MixLightScene
	}
	return 0
}

func (m *LightExtra) GetMixRgbcw() string {
	if m != nil {
		return m.MixRgbcw
	}
	return ""
}

func (m *LightExtra) GetSegmentDimming() string {
	if m != nil {
		return m.SegmentDimming
	}
	return ""
}

func (m *LightExtra) GetSwitchNightLight() bool {
	if m != nil {
		return m.SwitchNightLight
	}
	return false
}

func (m *LightExtra) GetCycleTiming() string {
	if m != nil {
		return m.CycleTiming
	}
	return ""
}

func (m *LightExtra) GetRandomTiming() string {
	if m != nil {
		return m.RandomTiming
	}
	return ""
}

type LightState struct {
}

func (m *LightState) Reset()                    { *m = LightState{} }
func (m *LightState) String() string            { return proto.CompactTextString(m) }
func (*LightState) ProtoMessage()               {}
func (*LightState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type AirConditioning struct {
}

func (m *AirConditioning) Reset()                    { *m = AirConditioning{} }
func (m *AirConditioning) String() string            { return proto.CompactTextString(m) }
func (*AirConditioning) ProtoMessage()               {}
func (*AirConditioning) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type AirConditioningList struct {
	Switch                   bool                     `protobuf:"varint,1,opt,name=Switch" json:"Switch,omitempty"`
	AirConditioningMode      AirConditioningMode      `protobuf:"varint,2,opt,name=AirConditioningMode,enum=pb.AirConditioningMode" json:"AirConditioningMode,omitempty"`
	AirConditioningFlowSpeed AirConditioningFlowSpeed `protobuf:"varint,3,opt,name=AirConditioningFlowSpeed,enum=pb.AirConditioningFlowSpeed" json:"AirConditioningFlowSpeed,omitempty"`
	Anion                    bool                     `protobuf:"varint,4,opt,name=Anion" json:"Anion,omitempty"`
	ChildLock                bool                     `protobuf:"varint,5,opt,name=ChildLock" json:"ChildLock,omitempty"`
	Light                    bool                     `protobuf:"varint,6,opt,name=Light" json:"Light,omitempty"`
	Uv                       bool                     `protobuf:"varint,7,opt,name=Uv" json:"Uv,omitempty"`
	Wet                      bool                     `protobuf:"varint,8,opt,name=Wet" json:"Wet,omitempty"`
	FliterReset              bool                     `protobuf:"varint,9,opt,name=FliterReset" json:"FliterReset,omitempty"`
	SetTemp                  uint32                   `protobuf:"varint,10,opt,name=SetTemp" json:"SetTemp,omitempty"`
	SetHumi                  uint32                   `protobuf:"varint,11,opt,name=SetHumi" json:"SetHumi,omitempty"`
	SleepMode                bool                     `protobuf:"varint,12,opt,name=SleepMode" json:"SleepMode,omitempty"`
	ConstantTemp             bool                     `protobuf:"varint,13,opt,name=ConstantTemp" json:"ConstantTemp,omitempty"`
	ConstantHume             bool                     `protobuf:"varint,14,opt,name=ConstantHume" json:"ConstantHume,omitempty"`
	ConstantFresh            bool                     `protobuf:"varint,15,opt,name=ConstantFresh" json:"ConstantFresh,omitempty"`
	FreshFanSpeed            uint32                   `protobuf:"varint,16,opt,name=FreshFanSpeed" json:"FreshFanSpeed,omitempty"`
}

func (m *AirConditioningList) Reset()                    { *m = AirConditioningList{} }
func (m *AirConditioningList) String() string            { return proto.CompactTextString(m) }
func (*AirConditioningList) ProtoMessage()               {}
func (*AirConditioningList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *AirConditioningList) GetSwitch() bool {
	if m != nil {
		return m.Switch
	}
	return false
}

func (m *AirConditioningList) GetAirConditioningMode() AirConditioningMode {
	if m != nil {
		return m.AirConditioningMode
	}
	return AirConditioningMode_manual
}

func (m *AirConditioningList) GetAirConditioningFlowSpeed() AirConditioningFlowSpeed {
	if m != nil {
		return m.AirConditioningFlowSpeed
	}
	return AirConditioningFlowSpeed_fsleep
}

func (m *AirConditioningList) GetAnion() bool {
	if m != nil {
		return m.Anion
	}
	return false
}

func (m *AirConditioningList) GetChildLock() bool {
	if m != nil {
		return m.ChildLock
	}
	return false
}

func (m *AirConditioningList) GetLight() bool {
	if m != nil {
		return m.Light
	}
	return false
}

func (m *AirConditioningList) GetUv() bool {
	if m != nil {
		return m.Uv
	}
	return false
}

func (m *AirConditioningList) GetWet() bool {
	if m != nil {
		return m.Wet
	}
	return false
}

func (m *AirConditioningList) GetFliterReset() bool {
	if m != nil {
		return m.FliterReset
	}
	return false
}

func (m *AirConditioningList) GetSetTemp() uint32 {
	if m != nil {
		return m.SetTemp
	}
	return 0
}

func (m *AirConditioningList) GetSetHumi() uint32 {
	if m != nil {
		return m.SetHumi
	}
	return 0
}

func (m *AirConditioningList) GetSleepMode() bool {
	if m != nil {
		return m.SleepMode
	}
	return false
}

func (m *AirConditioningList) GetConstantTemp() bool {
	if m != nil {
		return m.ConstantTemp
	}
	return false
}

func (m *AirConditioningList) GetConstantHume() bool {
	if m != nil {
		return m.ConstantHume
	}
	return false
}

func (m *AirConditioningList) GetConstantFresh() bool {
	if m != nil {
		return m.ConstantFresh
	}
	return false
}

func (m *AirConditioningList) GetFreshFanSpeed() uint32 {
	if m != nil {
		return m.FreshFanSpeed
	}
	return 0
}

type AirConditioningState struct {
	Switch                   bool                     `protobuf:"varint,1,opt,name=Switch" json:"Switch,omitempty"`
	PM25                     uint32                   `protobuf:"varint,2,opt,name=PM25" json:"PM25,omitempty"`
	AirConditioningMode      AirConditioningMode      `protobuf:"varint,3,opt,name=AirConditioningMode,enum=pb.AirConditioningMode" json:"AirConditioningMode,omitempty"`
	AirConditioningFlowSpeed AirConditioningFlowSpeed `protobuf:"varint,4,opt,name=AirConditioningFlowSpeed,enum=pb.AirConditioningFlowSpeed" json:"AirConditioningFlowSpeed,omitempty"`
	FilterLife               uint32                   `protobuf:"varint,5,opt,name=FilterLife" json:"FilterLife,omitempty"`
	Anion                    bool                     `protobuf:"varint,6,opt,name=Anion" json:"Anion,omitempty"`
	ChildLock                bool                     `protobuf:"varint,7,opt,name=ChildLock" json:"ChildLock,omitempty"`
	Light                    bool                     `protobuf:"varint,8,opt,name=Light" json:"Light,omitempty"`
	Uv                       bool                     `protobuf:"varint,9,opt,name=Uv" json:"Uv,omitempty"`
	Wet                      bool                     `protobuf:"varint,10,opt,name=Wet" json:"Wet,omitempty"`
	FliterReset              bool                     `protobuf:"varint,11,opt,name=FliterReset" json:"FliterReset,omitempty"`
	IndoorTemp               uint32                   `protobuf:"varint,12,opt,name=IndoorTemp" json:"IndoorTemp,omitempty"`
	OutdoorTemp              uint32                   `protobuf:"varint,13,opt,name=OutdoorTemp" json:"OutdoorTemp,omitempty"`
	IndoorHumidity           uint32                   `protobuf:"varint,14,opt,name=IndoorHumidity" json:"IndoorHumidity,omitempty"`
	OutdoorHumidity          uint32                   `protobuf:"varint,15,opt,name=OutdoorHumidity" json:"OutdoorHumidity,omitempty"`
	CO2                      uint32                   `protobuf:"varint,16,opt,name=CO2" json:"CO2,omitempty"`
	Ch2OValue                uint32                   `protobuf:"varint,17,opt,name=Ch2oValue" json:"Ch2oValue,omitempty"`
	Fault                    string                   `protobuf:"bytes,18,opt,name=Fault" json:"Fault,omitempty"`
}

func (m *AirConditioningState) Reset()                    { *m = AirConditioningState{} }
func (m *AirConditioningState) String() string            { return proto.CompactTextString(m) }
func (*AirConditioningState) ProtoMessage()               {}
func (*AirConditioningState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *AirConditioningState) GetSwitch() bool {
	if m != nil {
		return m.Switch
	}
	return false
}

func (m *AirConditioningState) GetPM25() uint32 {
	if m != nil {
		return m.PM25
	}
	return 0
}

func (m *AirConditioningState) GetAirConditioningMode() AirConditioningMode {
	if m != nil {
		return m.AirConditioningMode
	}
	return AirConditioningMode_manual
}

func (m *AirConditioningState) GetAirConditioningFlowSpeed() AirConditioningFlowSpeed {
	if m != nil {
		return m.AirConditioningFlowSpeed
	}
	return AirConditioningFlowSpeed_fsleep
}

func (m *AirConditioningState) GetFilterLife() uint32 {
	if m != nil {
		return m.FilterLife
	}
	return 0
}

func (m *AirConditioningState) GetAnion() bool {
	if m != nil {
		return m.Anion
	}
	return false
}

func (m *AirConditioningState) GetChildLock() bool {
	if m != nil {
		return m.ChildLock
	}
	return false
}

func (m *AirConditioningState) GetLight() bool {
	if m != nil {
		return m.Light
	}
	return false
}

func (m *AirConditioningState) GetUv() bool {
	if m != nil {
		return m.Uv
	}
	return false
}

func (m *AirConditioningState) GetWet() bool {
	if m != nil {
		return m.Wet
	}
	return false
}

func (m *AirConditioningState) GetFliterReset() bool {
	if m != nil {
		return m.FliterReset
	}
	return false
}

func (m *AirConditioningState) GetIndoorTemp() uint32 {
	if m != nil {
		return m.IndoorTemp
	}
	return 0
}

func (m *AirConditioningState) GetOutdoorTemp() uint32 {
	if m != nil {
		return m.OutdoorTemp
	}
	return 0
}

func (m *AirConditioningState) GetIndoorHumidity() uint32 {
	if m != nil {
		return m.IndoorHumidity
	}
	return 0
}

func (m *AirConditioningState) GetOutdoorHumidity() uint32 {
	if m != nil {
		return m.OutdoorHumidity
	}
	return 0
}

func (m *AirConditioningState) GetCO2() uint32 {
	if m != nil {
		return m.CO2
	}
	return 0
}

func (m *AirConditioningState) GetCh2OValue() uint32 {
	if m != nil {
		return m.Ch2OValue
	}
	return 0
}

func (m *AirConditioningState) GetFault() string {
	if m != nil {
		return m.Fault
	}
	return ""
}

type DevicedisconnReq struct {
	DeviceType uint32 `protobuf:"varint,1,opt,name=DeviceType" json:"DeviceType,omitempty"`
	DeviceId   string `protobuf:"bytes,2,opt,name=DeviceId" json:"DeviceId,omitempty"`
	MsgSeq     string `protobuf:"bytes,3,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
}

func (m *DevicedisconnReq) Reset()                    { *m = DevicedisconnReq{} }
func (m *DevicedisconnReq) String() string            { return proto.CompactTextString(m) }
func (*DevicedisconnReq) ProtoMessage()               {}
func (*DevicedisconnReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *DevicedisconnReq) GetDeviceType() uint32 {
	if m != nil {
		return m.DeviceType
	}
	return 0
}

func (m *DevicedisconnReq) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DevicedisconnReq) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func init() {
	proto.RegisterType((*DeviceregReq)(nil), "pb.DeviceregReq")
	proto.RegisterType((*DeviceregResp)(nil), "pb.DeviceregResp")
	proto.RegisterType((*BaseCmd)(nil), "pb.BaseCmd")
	proto.RegisterType((*GateData)(nil), "pb.GateData")
	proto.RegisterType((*CmdSetList)(nil), "pb.cmdSetList")
	proto.RegisterType((*DeviceList)(nil), "pb.deviceList")
	proto.RegisterType((*GeneralList)(nil), "pb.generalList")
	proto.RegisterType((*GeneralState)(nil), "pb.generalState")
	proto.RegisterType((*MultimediaList)(nil), "pb.multimediaList")
	proto.RegisterType((*DataParm)(nil), "pb.dataParm")
	proto.RegisterType((*MultimediaState)(nil), "pb.multimediaState")
	proto.RegisterType((*VolumeState)(nil), "pb.volumeState")
	proto.RegisterType((*OutputState)(nil), "pb.outputState")
	proto.RegisterType((*ChannelValue)(nil), "pb.channelValue")
	proto.RegisterType((*AlarmList)(nil), "pb.alarmList")
	proto.RegisterType((*FarmState)(nil), "pb.farmState")
	proto.RegisterType((*FarmList)(nil), "pb.farmList")
	proto.RegisterType((*LightList)(nil), "pb.lightList")
	proto.RegisterType((*LightExtra)(nil), "pb.lightExtra")
	proto.RegisterType((*LightState)(nil), "pb.lightState")
	proto.RegisterType((*AirConditioning)(nil), "pb.airConditioning")
	proto.RegisterType((*AirConditioningList)(nil), "pb.airConditioningList")
	proto.RegisterType((*AirConditioningState)(nil), "pb.airConditioningState")
	proto.RegisterType((*DevicedisconnReq)(nil), "pb.DevicedisconnReq")
	proto.RegisterEnum("pb.AirConditioningMode", AirConditioningMode_name, AirConditioningMode_value)
	proto.RegisterEnum("pb.AirConditioningFlowSpeed", AirConditioningFlowSpeed_name, AirConditioningFlowSpeed_value)
	proto.RegisterEnum("pb.SceneMode", SceneMode_name, SceneMode_value)
	proto.RegisterEnum("pb.WorkMode", WorkMode_name, WorkMode_value)
	proto.RegisterEnum("pb.DigitalCtl", DigitalCtl_name, DigitalCtl_value)
}

func init() { proto.RegisterFile("iot.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0xcf, 0x6f, 0x23, 0x49,
	0xf5, 0x9f, 0x6e, 0x3b, 0x89, 0xfd, 0xfc, 0x23, 0x3d, 0x35, 0xa3, 0xfd, 0x5a, 0x5f, 0xad, 0x46,
	0x51, 0x03, 0x4b, 0x08, 0x68, 0x00, 0xef, 0xae, 0x40, 0x48, 0x20, 0x4d, 0x9c, 0xc9, 0x24, 0xda,
	0x78, 0x62, 0xb5, 0x33, 0x3b, 0x5c, 0x10, 0xaa, 0xb8, 0x2b, 0x76, 0x2b, 0xfd, 0xc3, 0x5b, 0x2e,
	0x27, 0x33, 0xff, 0x04, 0x12, 0xe2, 0xc2, 0x91, 0x3f, 0x82, 0x33, 0x47, 0xfe, 0x0b, 0x4e, 0xcb,
	0x8d, 0x03, 0x77, 0x24, 0x24, 0xf4, 0xea, 0x55, 0x77, 0x57, 0x77, 0xec, 0x61, 0xa5, 0xe5, 0x56,
	0xef, 0xf3, 0x5e, 0x55, 0xbd, 0x7a, 0x3f, 0xab, 0xba, 0xa1, 0x1d, 0x65, 0xea, 0xf9, 0x52, 0x66,
	0x2a, 0x63, 0xee, 0xf2, 0xda, 0xff, 0x93, 0x03, 0xdd, 0x13, 0x71, 0x17, 0xcd, 0x84, 0x14, 0xf3,
	0x40, 0x7c, 0xc5, 0x9e, 0x01, 0x10, 0x7d, 0xf5, 0x7e, 0x29, 0x06, 0xce, 0x81, 0x73, 0xd8, 0x0b,
	0x2c, 0x84, 0x7d, 0x17, 0x7a, 0x44, 0x05, 0x62, 0x3e, 0xca, 0x42, 0x31, 0x70, 0x0f, 0x9c, 0xc3,
	0x76, 0x50, 0x05, 0xd9, 0xff, 0x43, 0x8b, 0x80, 0xf3, 0x70, 0xd0, 0xd0, 0x02, 0x05, 0xcd, 0x3e,
	0x82, 0xdd, 0xf1, 0x6a, 0x3e, 0x15, 0x5f, 0x0d, 0x9a, 0x9a, 0x63, 0x28, 0xc4, 0xaf, 0x44, 0xb2,
	0x3c, 0x0f, 0x07, 0x3b, 0x84, 0x13, 0xe5, 0x7f, 0xed, 0xe4, 0x5b, 0x6a, 0x15, 0x57, 0xcb, 0xff,
	0xaa, 0xa3, 0xbd, 0xbb, 0x5b, 0xdb, 0xfd, 0x19, 0xc0, 0xb1, 0xcc, 0x6e, 0x85, 0x7c, 0x11, 0x86,
	0xd2, 0xe8, 0x66, 0x21, 0x5b, 0xb5, 0x3b, 0x84, 0xfd, 0xa9, 0x90, 0x77, 0x42, 0x4e, 0xd6, 0xd7,
	0x71, 0x34, 0xfb, 0x42, 0xbc, 0x37, 0x6a, 0xd6, 0x61, 0xdc, 0x61, 0x22, 0xa3, 0x3b, 0xae, 0x04,
	0x0a, 0xed, 0xd2, 0x0e, 0x25, 0xc2, 0x9e, 0xc2, 0xce, 0x4b, 0x29, 0x33, 0x39, 0xd8, 0xd3, 0x2c,
	0x22, 0xfc, 0xaf, 0x5d, 0xd8, 0x3b, 0xe6, 0x2b, 0x31, 0x4a, 0xc2, 0x6f, 0x75, 0xbe, 0x3e, 0xb8,
	0xe7, 0x4b, 0x73, 0x2e, 0xf7, 0x7c, 0xb9, 0xf5, 0x3c, 0x0c, 0x9a, 0x63, 0x2e, 0x6f, 0xf5, 0x21,
	0x7a, 0x81, 0x1e, 0x33, 0x0f, 0x1a, 0xa3, 0x24, 0x34, 0x2a, 0x37, 0x2a, 0x9a, 0x5c, 0x44, 0x2b,
	0x65, 0x14, 0xb6, 0x10, 0x5c, 0xe5, 0x84, 0x2b, 0x3e, 0x68, 0x69, 0x8e, 0x1e, 0xa3, 0x76, 0x64,
	0x92, 0xf3, 0x70, 0xd0, 0x26, 0xed, 0x72, 0x1a, 0x79, 0x6f, 0x56, 0x42, 0xbe, 0xe6, 0x89, 0x18,
	0x00, 0xf1, 0x72, 0xba, 0xb4, 0x4b, 0x47, 0xab, 0x44, 0x44, 0xcd, 0x5f, 0xdd, 0x4d, 0xfe, 0x7a,
	0xc5, 0x15, 0x5a, 0xa2, 0x47, 0xe7, 0x23, 0x0a, 0x57, 0xbb, 0xca, 0x6e, 0x45, 0x3a, 0xe8, 0x93,
	0x95, 0x35, 0xe1, 0xff, 0xc5, 0x81, 0x16, 0x0a, 0x68, 0x45, 0xcb, 0xa9, 0xce, 0xe6, 0xa9, 0xae,
	0x35, 0x15, 0xa5, 0xe9, 0x18, 0xc6, 0xb8, 0x86, 0x62, 0x1f, 0x43, 0xfb, 0x98, 0xdf, 0x1a, 0x16,
	0xd9, 0xb8, 0x04, 0xd8, 0x27, 0xb0, 0x3b, 0x4a, 0xc2, 0xa9, 0x50, 0x83, 0x9d, 0x83, 0xc6, 0x61,
	0x67, 0xd8, 0x7f, 0xbe, 0xbc, 0x7e, 0x3e, 0xd3, 0x08, 0x1a, 0x30, 0x30, 0x5c, 0x94, 0x23, 0xb3,
	0x0e, 0x76, 0x4b, 0xb9, 0xb0, 0x30, 0x74, 0x60, 0xb8, 0xfe, 0x29, 0x40, 0x39, 0x3b, 0x77, 0x98,
	0x53, 0x3a, 0xac, 0x5c, 0xc7, 0xfd, 0xe0, 0x3a, 0x7f, 0xdb, 0x01, 0x28, 0xe1, 0x4a, 0x44, 0x39,
	0xb5, 0x88, 0x62, 0xd0, 0xd4, 0xfe, 0x22, 0x6b, 0xe8, 0x31, 0xca, 0x8f, 0xb8, 0x12, 0xf3, 0x4c,
	0xbe, 0xcf, 0xf3, 0x3b, 0xa7, 0xd1, 0x7c, 0xd3, 0x58, 0x88, 0xa5, 0x31, 0x06, 0x11, 0x56, 0x1c,
	0xee, 0x54, 0xe2, 0xf0, 0x39, 0xc0, 0x49, 0x34, 0x8f, 0x14, 0x8f, 0x47, 0x2a, 0xd6, 0xa1, 0xd7,
	0x37, 0x4a, 0x17, 0x68, 0x60, 0x49, 0xb0, 0x1f, 0x03, 0xbc, 0x12, 0xa9, 0x90, 0x24, 0x8f, 0x11,
	0xd9, 0x19, 0xee, 0xa3, 0xfc, 0x9c, 0x50, 0x7d, 0x4a, 0x4b, 0x84, 0x7d, 0x06, 0x5d, 0x43, 0x4d,
	0x15, 0x57, 0x42, 0x87, 0x6a, 0x67, 0xe8, 0x59, 0x53, 0x34, 0x1e, 0x54, 0xa4, 0xd8, 0x0f, 0xa0,
	0x75, 0x11, 0xcd, 0x17, 0x0a, 0x37, 0x69, 0xeb, 0x19, 0x3d, 0x9c, 0x11, 0x23, 0xa6, 0xb7, 0x28,
	0xd8, 0x78, 0x02, 0x3d, 0xa6, 0xe5, 0x41, 0x0b, 0xf7, 0x0b, 0x61, 0x5a, 0xdc, 0x92, 0x60, 0xaf,
	0x80, 0xbd, 0x88, 0xe4, 0x28, 0x4b, 0xc3, 0x48, 0x45, 0x59, 0x1a, 0xa5, 0x73, 0xdc, 0xa4, 0xa3,
	0xe7, 0xfd, 0x1f, 0xce, 0xe3, 0x55, 0xae, 0xde, 0x6e, 0xc3, 0x14, 0x76, 0x01, 0x4f, 0x6b, 0x28,
	0xa9, 0xd0, 0xd5, 0x4b, 0x0d, 0x36, 0x2c, 0x45, 0xca, 0x6c, 0x9c, 0xc5, 0x3e, 0x81, 0xbd, 0x53,
	0x2e, 0x13, 0xd4, 0xa5, 0xa7, 0x17, 0xe8, 0xe2, 0x02, 0x37, 0x5c, 0x26, 0x5a, 0x81, 0x9c, 0xc9,
	0x7e, 0x08, 0x6d, 0x1c, 0xd2, 0x56, 0xfd, 0xd2, 0x34, 0x37, 0x39, 0x18, 0x94, 0x7c, 0xf6, 0x73,
	0xe8, 0x8d, 0xd7, 0xb1, 0x8a, 0x12, 0x11, 0x46, 0x1c, 0x97, 0xde, 0xd7, 0x13, 0x18, 0x4e, 0x48,
	0x0a, 0x86, 0xde, 0xa0, 0x2a, 0xc8, 0x7e, 0x09, 0xfb, 0x25, 0x40, 0x9b, 0x79, 0x7a, 0xee, 0x93,
	0xea, 0x5c, 0xda, 0xb2, 0x2e, 0xeb, 0xff, 0xc3, 0x81, 0x8e, 0x15, 0x11, 0xec, 0x00, 0x3a, 0x4a,
	0x24, 0x4b, 0x21, 0xb9, 0x5a, 0x4b, 0x61, 0x62, 0xdc, 0x86, 0x30, 0x40, 0xbf, 0xcc, 0xe2, 0x75,
	0x11, 0xe8, 0x86, 0xc2, 0xfc, 0x9e, 0x64, 0xab, 0x58, 0x1b, 0xcb, 0xc4, 0x7a, 0x09, 0xe4, 0x19,
	0xd8, 0x2c, 0x33, 0x10, 0xeb, 0xc4, 0x7d, 0xa4, 0x66, 0x0b, 0x1d, 0xe8, 0xad, 0xc0, 0x50, 0xd8,
	0x38, 0xdf, 0x46, 0x69, 0x78, 0x12, 0x49, 0x31, 0xd3, 0x6b, 0x51, 0x99, 0xad, 0x82, 0xba, 0x2c,
	0x63, 0x57, 0xdd, 0x33, 0x65, 0x19, 0x9b, 0xe9, 0x01, 0x74, 0xa6, 0x22, 0x5d, 0x45, 0x2a, 0xba,
	0x8b, 0xd4, 0x7b, 0x1d, 0xc0, 0xbd, 0xc0, 0x86, 0xfc, 0x3f, 0x34, 0xa0, 0x6b, 0x07, 0xb3, 0xa5,
	0x84, 0x53, 0x51, 0xe2, 0x00, 0x3a, 0x57, 0x96, 0x19, 0xe8, 0xa4, 0x36, 0x64, 0x99, 0xa1, 0xb1,
	0xdd, 0x0c, 0xcd, 0xba, 0x19, 0xfa, 0xe0, 0x5e, 0x0e, 0x4d, 0x66, 0xbb, 0x97, 0x43, 0x6d, 0x96,
	0xcb, 0x61, 0xd1, 0x49, 0x2e, 0x87, 0x28, 0x31, 0xba, 0x34, 0x1d, 0xc4, 0x1d, 0x5d, 0x3e, 0x34,
	0x47, 0xeb, 0x43, 0xe6, 0x68, 0x6f, 0x37, 0x07, 0x3c, 0x30, 0x07, 0xea, 0x7a, 0x91, 0xcd, 0x6e,
	0x29, 0x6a, 0x3a, 0xa4, 0x6b, 0x01, 0xb0, 0x4f, 0xa0, 0x7f, 0x2c, 0xb8, 0x8a, 0xd2, 0x79, 0x76,
	0xb3, 0x10, 0x5c, 0x2a, 0x9d, 0x30, 0xbd, 0xa0, 0x86, 0x62, 0x8d, 0x3b, 0x96, 0xd1, 0x3c, 0x15,
	0xab, 0x95, 0xe9, 0x2d, 0x05, 0xcd, 0xbe, 0x03, 0x3b, 0x2f, 0x62, 0x2e, 0x13, 0x3b, 0x01, 0x78,
	0x9c, 0xe7, 0x0a, 0xf1, 0xfc, 0x7f, 0xb9, 0xd0, 0xaf, 0x06, 0x39, 0x9e, 0x67, 0xc2, 0xd5, 0xc2,
	0xf4, 0x74, 0x3d, 0xc6, 0x7a, 0x39, 0x91, 0xb8, 0x89, 0xab, 0x5d, 0x45, 0x84, 0xe5, 0xc1, 0x46,
	0xc5, 0x83, 0x0c, 0x9a, 0xd3, 0x4c, 0x2a, 0xed, 0x82, 0x56, 0xa0, 0xc7, 0xba, 0xe3, 0xce, 0x44,
	0xca, 0x65, 0x94, 0x99, 0x7e, 0x5e, 0xd0, 0x6c, 0x00, 0x7b, 0xa3, 0x05, 0x4f, 0x53, 0x41, 0xc5,
	0xb5, 0x17, 0xe4, 0x24, 0xf3, 0xa1, 0x3b, 0x55, 0x5c, 0xaa, 0x9c, 0x4d, 0x21, 0x57, 0xc1, 0xb0,
	0xfb, 0xbe, 0x4c, 0xc3, 0x5c, 0x82, 0x22, 0xcf, 0x42, 0xac, 0x68, 0x21, 0x0f, 0xe5, 0xd1, 0x82,
	0x7e, 0x5b, 0x9b, 0x6a, 0xd8, 0x0a, 0xf4, 0xb8, 0xf0, 0x65, 0xa7, 0xea, 0xcb, 0xb1, 0x10, 0x68,
	0x75, 0xdd, 0x62, 0xa8, 0xbd, 0xdb, 0x90, 0xee, 0x26, 0xda, 0x8f, 0x3d, 0xba, 0x15, 0x90, 0x0f,
	0x0f, 0xcc, 0xbd, 0xa3, 0x5f, 0x56, 0xaa, 0x90, 0x2b, 0x3e, 0xe1, 0x32, 0xa1, 0x5b, 0x88, 0xff,
	0x47, 0x07, 0x5a, 0x39, 0x84, 0x46, 0x38, 0x11, 0x77, 0xd6, 0x6d, 0x2a, 0x27, 0x71, 0xf9, 0x13,
	0x71, 0x77, 0xbe, 0xcc, 0x7b, 0xbd, 0x26, 0x8c, 0xfc, 0x04, 0xed, 0x4c, 0x59, 0x90, 0x93, 0xa8,
	0xf0, 0x89, 0xb8, 0xc3, 0x3b, 0x4b, 0x8a, 0x0a, 0x53, 0x22, 0xd8, 0x90, 0x91, 0x98, 0xf0, 0xd5,
	0xea, 0x3e, 0x93, 0xf9, 0x5d, 0xd6, 0x86, 0xfc, 0x5f, 0xc0, 0x7e, 0xad, 0x7e, 0xb1, 0xef, 0x17,
	0x76, 0x74, 0xca, 0x8e, 0x76, 0xa7, 0x11, 0x2a, 0x70, 0x86, 0xed, 0xff, 0x06, 0x3a, 0x16, 0x8c,
	0xf3, 0x2e, 0xd7, 0x6a, 0xb9, 0x56, 0xf6, 0xbc, 0x4c, 0x23, 0x66, 0x1e, 0xb1, 0xd9, 0xf7, 0x60,
	0xe7, 0x3c, 0x45, 0x39, 0x77, 0xb3, 0x1c, 0x71, 0xfd, 0x11, 0x74, 0x2c, 0x14, 0x7b, 0xa7, 0xf1,
	0xf4, 0x97, 0x3c, 0x5e, 0xa3, 0x72, 0x8d, 0xbc, 0x77, 0xce, 0x2c, 0x3c, 0xa8, 0x48, 0xf9, 0xbf,
	0x82, 0xae, 0xcd, 0xb5, 0x43, 0xd0, 0xa9, 0x86, 0xe0, 0x53, 0xd8, 0xa1, 0x85, 0x5d, 0x72, 0x2e,
	0xcd, 0xff, 0xb7, 0x0b, 0xed, 0x22, 0x99, 0x30, 0xb8, 0x5f, 0xf1, 0x15, 0x65, 0x1b, 0x4d, 0x2f,
	0x68, 0x0c, 0xcf, 0x69, 0x92, 0xdd, 0x0a, 0xe2, 0xd2, 0x22, 0x16, 0xa2, 0xf9, 0x8b, 0x6c, 0x76,
	0x4b, 0xfc, 0x86, 0xe1, 0x17, 0x88, 0x2e, 0x14, 0x82, 0x1b, 0x76, 0x53, 0xb3, 0x4b, 0x00, 0xb9,
	0xa7, 0x3c, 0x8e, 0x89, 0x4b, 0x79, 0x55, 0x02, 0xb8, 0xf6, 0x19, 0xd6, 0x09, 0x62, 0x53, 0x6e,
	0x59, 0x08, 0x96, 0x99, 0xa2, 0x3e, 0x92, 0x0c, 0x25, 0x58, 0x0d, 0x65, 0x3f, 0x81, 0x27, 0x17,
	0xd9, 0xbd, 0x55, 0x82, 0x49, 0x98, 0x72, 0x6d, 0x13, 0x4b, 0xdb, 0x33, 0x23, 0xa9, 0xb6, 0xb1,
	0x27, 0x91, 0x98, 0xd2, 0x2f, 0xb9, 0x4c, 0xb8, 0x34, 0x47, 0xa2, 0xda, 0x58, 0xc1, 0x30, 0x3e,
	0x47, 0x59, 0x1c, 0x73, 0x49, 0x22, 0x94, 0x8d, 0x36, 0xe4, 0xff, 0xbe, 0x01, 0xed, 0xa2, 0x9b,
	0xb3, 0x2e, 0x38, 0xaf, 0x4d, 0xbf, 0x74, 0x5e, 0x23, 0x35, 0x31, 0xb9, 0xe2, 0x4c, 0x90, 0xfa,
	0xc2, 0x64, 0x88, 0xf3, 0x85, 0x69, 0x02, 0xcd, 0x7a, 0x13, 0xd8, 0xa9, 0x37, 0x81, 0xdd, 0xa2,
	0x09, 0xf8, 0xd0, 0x3d, 0x8f, 0xe3, 0x75, 0x12, 0xa5, 0x5c, 0xf7, 0x00, 0x6a, 0x0f, 0x15, 0xec,
	0x1b, 0x36, 0x8a, 0x3e, 0xb8, 0x93, 0x33, 0xf3, 0xdc, 0x70, 0x27, 0x67, 0x78, 0xca, 0x17, 0x91,
	0xd4, 0xa5, 0x14, 0x1b, 0x1d, 0xbd, 0x35, 0x6c, 0x08, 0xcb, 0xd1, 0x69, 0x9c, 0xdd, 0x9b, 0xfe,
	0xa0, 0xc7, 0xf5, 0xf6, 0xd8, 0x7d, 0xd8, 0x1e, 0x9f, 0x03, 0x33, 0xd6, 0xb4, 0x05, 0xa9, 0x3d,
	0x6c, 0xe0, 0x54, 0xdb, 0x66, 0xbf, 0xde, 0x36, 0x0f, 0x61, 0x9f, 0x0c, 0x5f, 0xca, 0xec, 0xd3,
	0xa3, 0xb2, 0x06, 0xfb, 0x7f, 0x76, 0xa0, 0x95, 0xdf, 0xc5, 0x6a, 0xdd, 0xbd, 0x5d, 0xf4, 0x86,
	0x67, 0x00, 0x78, 0x0c, 0xc3, 0x23, 0x2f, 0x59, 0x08, 0x9a, 0xfb, 0x2d, 0x97, 0xc9, 0x9b, 0xa5,
	0xd5, 0x59, 0xda, 0x41, 0x05, 0x63, 0x3f, 0x82, 0xc7, 0xd3, 0x05, 0x0f, 0xc5, 0xd5, 0x42, 0x4c,
	0xd7, 0xa9, 0x11, 0x24, 0x9f, 0x3e, 0x64, 0xe0, 0x8e, 0x92, 0x47, 0xa9, 0x75, 0xe1, 0x69, 0x07,
	0x16, 0xe2, 0xff, 0xbd, 0x01, 0xed, 0xe2, 0xce, 0xbc, 0xf5, 0x56, 0x72, 0x08, 0xad, 0xb7, 0x99,
	0xbc, 0x1d, 0xd3, 0xe7, 0x84, 0xc6, 0x61, 0x9f, 0x2a, 0xfa, 0xbd, 0xc1, 0x82, 0x82, 0x8b, 0x2b,
	0x60, 0x0f, 0x5e, 0x28, 0x93, 0xcc, 0x86, 0x42, 0x67, 0xa2, 0xd5, 0x4d, 0x0e, 0xeb, 0x31, 0xca,
	0x8e, 0xb2, 0x38, 0x5b, 0xcb, 0xfc, 0xc5, 0x41, 0x14, 0xf6, 0x6e, 0xec, 0x8e, 0xf4, 0xd2, 0xea,
	0x53, 0xef, 0x5e, 0x21, 0xa0, 0xf7, 0x22, 0x1e, 0x1e, 0x6c, 0x94, 0xad, 0x53, 0x35, 0x8a, 0xb3,
	0x55, 0x7e, 0x1b, 0xb3, 0x10, 0xf4, 0xab, 0xa6, 0x2e, 0x97, 0x22, 0x35, 0xb9, 0x5a, 0x02, 0x94,
	0xa1, 0xa9, 0x92, 0x59, 0x6c, 0x42, 0x32, 0x27, 0xcb, 0xc7, 0x11, 0x98, 0x76, 0x96, 0x3f, 0x8e,
	0xde, 0xf2, 0x5b, 0xf1, 0x66, 0x69, 0xd2, 0xd1, 0x50, 0x18, 0x8f, 0x93, 0xec, 0x5e, 0xc8, 0xb1,
	0x48, 0xf0, 0xa5, 0x45, 0xf7, 0x14, 0x1b, 0x42, 0x97, 0x9e, 0x64, 0xaf, 0x33, 0x15, 0x46, 0x2b,
	0xb5, 0x96, 0xd7, 0xa6, 0x4b, 0x56, 0x30, 0xac, 0xa0, 0xe3, 0x68, 0x36, 0x5e, 0xaf, 0xa2, 0x99,
	0x09, 0xc1, 0x82, 0x46, 0x7d, 0x88, 0x41, 0x71, 0x47, 0x04, 0x3e, 0x69, 0xb4, 0xd7, 0x5e, 0xbe,
	0x53, 0x92, 0x9b, 0x7b, 0x77, 0xf9, 0xa4, 0xd1, 0x68, 0x60, 0x49, 0xf8, 0xbf, 0x73, 0xed, 0x09,
	0x98, 0xb2, 0xe4, 0xd9, 0x57, 0x92, 0x87, 0x51, 0xaa, 0x4c, 0xdd, 0xae, 0x82, 0x28, 0x35, 0x8e,
	0xde, 0xd1, 0xc3, 0x48, 0xfb, 0x83, 0xea, 0x77, 0x15, 0x24, 0xe5, 0xdf, 0x05, 0xf3, 0xeb, 0xd9,
	0x7d, 0xfe, 0xd2, 0xcc, 0x69, 0x2c, 0xb1, 0x53, 0x31, 0x4f, 0x44, 0xaa, 0x4e, 0xa2, 0x24, 0x89,
	0xd2, 0xb9, 0x09, 0xd4, 0x1a, 0xca, 0x8e, 0xc0, 0xa3, 0xad, 0x5f, 0x53, 0x28, 0x62, 0xfc, 0xd0,
	0xe5, 0xfc, 0x01, 0xae, 0xcb, 0xe3, 0xfb, 0x59, 0x2c, 0xae, 0x22, 0xbd, 0x20, 0xd5, 0x2a, 0x1b,
	0x42, 0x93, 0x07, 0x3c, 0x0d, 0xb3, 0xc4, 0x88, 0x98, 0xa2, 0x65, 0x63, 0x7e, 0xd7, 0xd8, 0x83,
	0x1e, 0x23, 0x8f, 0x61, 0xbf, 0xf6, 0x10, 0xf3, 0xff, 0xda, 0x84, 0x27, 0x1b, 0xde, 0x79, 0x5b,
	0x53, 0xe4, 0x1c, 0x9e, 0xd4, 0x5e, 0x6d, 0xe3, 0xfc, 0xe3, 0x5b, 0x7f, 0xe3, 0xab, 0x51, 0x07,
	0xf3, 0xa6, 0x39, 0xec, 0xd7, 0x30, 0xa8, 0xc1, 0xba, 0x44, 0x2c, 0x85, 0xa0, 0x6f, 0x75, 0xfd,
	0xe1, 0xc7, 0x1b, 0xd6, 0x2b, 0x64, 0x82, 0xad, 0xb3, 0x31, 0x98, 0x5e, 0xa4, 0xf9, 0xfb, 0xa0,
	0x15, 0x10, 0xa1, 0x53, 0x65, 0x11, 0xc5, 0x21, 0xde, 0xc0, 0x8d, 0xd9, 0x4b, 0x00, 0xe7, 0x90,
	0x43, 0x76, 0x69, 0x0e, 0x79, 0xa1, 0x0f, 0xee, 0x9b, 0x3b, 0x6d, 0xd9, 0x56, 0xe0, 0xbe, 0xb9,
	0xc3, 0x56, 0xf2, 0x56, 0x28, 0x9d, 0x68, 0xad, 0x00, 0x87, 0xe8, 0xa7, 0xd3, 0x38, 0x52, 0x42,
	0x06, 0x62, 0x25, 0x94, 0x4e, 0xb3, 0x56, 0x60, 0x43, 0x98, 0x84, 0x53, 0xa1, 0x74, 0x59, 0xa0,
	0x64, 0xcb, 0x49, 0xc3, 0x39, 0x5b, 0x27, 0x91, 0xc9, 0xb7, 0x9c, 0x44, 0x5d, 0x75, 0x46, 0x6a,
	0xe3, 0x76, 0x49, 0xd7, 0x02, 0x40, 0xcf, 0x8f, 0xb2, 0x74, 0xa5, 0x78, 0x4a, 0xcb, 0xf6, 0xb4,
	0x40, 0x05, 0xb3, 0x65, 0xce, 0xf0, 0x3e, 0xd7, 0xaf, 0xca, 0x20, 0x86, 0x91, 0x9f, 0xd3, 0xa7,
	0x52, 0xac, 0x16, 0x3a, 0xf9, 0x5a, 0x41, 0x15, 0x44, 0x29, 0x3d, 0x38, 0xe5, 0x29, 0x39, 0xc7,
	0xa3, 0xfc, 0xa8, 0x80, 0xfe, 0x3f, 0x9b, 0xf0, 0x74, 0xd3, 0x2b, 0x7f, 0x6b, 0x24, 0xe1, 0x13,
	0x64, 0x3c, 0xfc, 0xdc, 0x64, 0x9b, 0x1e, 0x6f, 0x8b, 0xae, 0xc6, 0xff, 0x38, 0xba, 0x9a, 0xdf,
	0x2a, 0xba, 0xb0, 0xbb, 0x45, 0xb1, 0x12, 0xf2, 0x22, 0xba, 0x11, 0xe6, 0x3e, 0x66, 0x21, 0x65,
	0xf4, 0xed, 0x6e, 0x8d, 0xbe, 0xbd, 0xad, 0xd1, 0xd7, 0x7a, 0x18, 0x7d, 0xed, 0x7a, 0xf4, 0xc1,
	0xd6, 0xe8, 0xeb, 0x3c, 0x8c, 0xbe, 0x67, 0x00, 0xe7, 0x69, 0x98, 0x65, 0x52, 0x47, 0x0a, 0x55,
	0x6e, 0x0b, 0xc1, 0x15, 0x2e, 0xd7, 0xaa, 0x10, 0xa0, 0xba, 0x6d, 0x43, 0x58, 0xdd, 0x48, 0x1e,
	0x23, 0x33, 0xc4, 0xa7, 0x6e, 0x9f, 0x2e, 0x90, 0x55, 0x14, 0x2f, 0x11, 0x66, 0x5a, 0x21, 0xb8,
	0xaf, 0x05, 0xeb, 0x70, 0x7e, 0x21, 0xa3, 0x38, 0xd2, 0x17, 0x32, 0x6d, 0x9d, 0x61, 0x46, 0x97,
	0xf0, 0xc7, 0xa6, 0x8d, 0xe5, 0x00, 0x5a, 0xe7, 0x94, 0xaf, 0x63, 0x35, 0x60, 0xd4, 0x1c, 0x34,
	0xe1, 0xdf, 0x80, 0x47, 0xdf, 0x06, 0xc3, 0x68, 0x35, 0xcb, 0xd2, 0xf4, 0x9b, 0xfc, 0x35, 0xf8,
	0xd0, 0x17, 0xeb, 0xf2, 0xcb, 0x60, 0xc3, 0xfe, 0x32, 0x78, 0x74, 0xf6, 0xa0, 0x42, 0xea, 0x00,
	0x03, 0xd8, 0x4d, 0x78, 0xba, 0xe6, 0xb1, 0xf7, 0x88, 0xb5, 0xa0, 0xc9, 0xd7, 0x2a, 0xf3, 0x1c,
	0xb6, 0x0f, 0x9d, 0x59, 0x96, 0xdc, 0x64, 0x52, 0xf1, 0xeb, 0x58, 0x78, 0xae, 0x16, 0x5b, 0x61,
	0xe6, 0x7a, 0x8d, 0xa3, 0x63, 0x18, 0x6c, 0x8b, 0x37, 0x94, 0xbb, 0x21, 0xb9, 0x47, 0x6c, 0x0f,
	0x1a, 0x71, 0x76, 0xef, 0x39, 0x38, 0x48, 0xa2, 0xd0, 0x73, 0x71, 0x83, 0x45, 0x34, 0x5f, 0x78,
	0x8d, 0xa3, 0x0b, 0x68, 0x17, 0x97, 0x04, 0xd6, 0x81, 0x3d, 0x4d, 0xfc, 0xf6, 0xa7, 0xde, 0xa3,
	0x92, 0x18, 0x7a, 0x4e, 0x49, 0x7c, 0xea, 0xb9, 0x25, 0xf1, 0x99, 0xd7, 0x28, 0x89, 0xcf, 0xbd,
	0xe6, 0xd1, 0xcf, 0xa0, 0x95, 0xdf, 0x6e, 0x58, 0x1b, 0x76, 0xee, 0x17, 0x91, 0x12, 0xde, 0x23,
	0x54, 0x66, 0xa6, 0x2f, 0x29, 0x9e, 0x83, 0xb0, 0x96, 0xf7, 0x5c, 0x1c, 0x26, 0xd8, 0x97, 0xbd,
	0xc6, 0xd1, 0x35, 0x40, 0xf9, 0x61, 0x94, 0xf5, 0xed, 0x8f, 0xa1, 0xde, 0x23, 0xd6, 0x2d, 0xbf,
	0x5a, 0x7a, 0x0e, 0xfb, 0x68, 0xd3, 0x87, 0x46, 0x52, 0xcb, 0x7c, 0xcc, 0xf3, 0x1a, 0xec, 0x71,
	0xed, 0x0b, 0x9d, 0xd7, 0xbc, 0xde, 0xd5, 0xbf, 0x87, 0x3e, 0xfd, 0x4f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xb7, 0x3f, 0x2e, 0xfe, 0x2b, 0x1a, 0x00, 0x00,
}
