// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lite.proto

/*
Package lite is a generated protocol buffer package.

It is generated from these files:
	lite.proto

It has these top-level messages:
	DeviceregReq
	DeviceregResp
	BaseCmd
	GateData
	CmdSetList
	CmdDef
	DevState
	DeviceList
	DevicedisconnReq
*/
package lite

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeviceregReq struct {
	DeviceType    string `protobuf:"bytes,1,opt,name=DeviceType" json:"DeviceType,omitempty"`
	DeviceRegCode string `protobuf:"bytes,2,opt,name=DeviceRegCode" json:"DeviceRegCode,omitempty"`
	DeviceId      string `protobuf:"bytes,3,opt,name=DeviceId" json:"DeviceId,omitempty"`
	MsgSeq        string `protobuf:"bytes,4,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
	TempId        string `protobuf:"bytes,5,opt,name=TempId" json:"TempId,omitempty"`
}

func (m *DeviceregReq) Reset()                    { *m = DeviceregReq{} }
func (m *DeviceregReq) String() string            { return proto.CompactTextString(m) }
func (*DeviceregReq) ProtoMessage()               {}
func (*DeviceregReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DeviceregReq) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *DeviceregReq) GetDeviceRegCode() string {
	if m != nil {
		return m.DeviceRegCode
	}
	return ""
}

func (m *DeviceregReq) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DeviceregReq) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func (m *DeviceregReq) GetTempId() string {
	if m != nil {
		return m.TempId
	}
	return ""
}

type DeviceregResp struct {
	DeviceType      string `protobuf:"bytes,1,opt,name=DeviceType" json:"DeviceType,omitempty"`
	DeviceId        string `protobuf:"bytes,2,opt,name=DeviceId" json:"DeviceId,omitempty"`
	BrokerAddr      string `protobuf:"bytes,3,opt,name=BrokerAddr" json:"BrokerAddr,omitempty"`
	MsgSeq          string `protobuf:"bytes,4,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
	ServerPublicKey string `protobuf:"bytes,5,opt,name=ServerPublicKey" json:"ServerPublicKey,omitempty"`
	PrivateKey      string `protobuf:"bytes,6,opt,name=PrivateKey" json:"PrivateKey,omitempty"`
	Error           string `protobuf:"bytes,7,opt,name=Error" json:"Error,omitempty"`
}

func (m *DeviceregResp) Reset()                    { *m = DeviceregResp{} }
func (m *DeviceregResp) String() string            { return proto.CompactTextString(m) }
func (*DeviceregResp) ProtoMessage()               {}
func (*DeviceregResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DeviceregResp) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *DeviceregResp) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DeviceregResp) GetBrokerAddr() string {
	if m != nil {
		return m.BrokerAddr
	}
	return ""
}

func (m *DeviceregResp) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func (m *DeviceregResp) GetServerPublicKey() string {
	if m != nil {
		return m.ServerPublicKey
	}
	return ""
}

func (m *DeviceregResp) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *DeviceregResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type BaseCmd struct {
	DeviceType string `protobuf:"bytes,1,opt,name=DeviceType" json:"DeviceType,omitempty"`
	DeviceId   string `protobuf:"bytes,2,opt,name=DeviceId" json:"DeviceId,omitempty"`
	Ip         string `protobuf:"bytes,3,opt,name=Ip" json:"Ip,omitempty"`
	MsgSeq     string `protobuf:"bytes,4,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
	Mark       string `protobuf:"bytes,5,opt,name=Mark" json:"Mark,omitempty"`
	Cmd        string `protobuf:"bytes,6,opt,name=Cmd" json:"Cmd,omitempty"`
	DeviceList string `protobuf:"bytes,7,opt,name=DeviceList" json:"DeviceList,omitempty"`
	Data       string `protobuf:"bytes,8,opt,name=Data" json:"Data,omitempty"`
	ServerId   string `protobuf:"bytes,9,opt,name=ServerId" json:"ServerId,omitempty"`
	UserName   string `protobuf:"bytes,10,opt,name=UserName" json:"UserName,omitempty"`
	Error      string `protobuf:"bytes,11,opt,name=Error" json:"Error,omitempty"`
	BrokerAddr string `protobuf:"bytes,12,opt,name=BrokerAddr" json:"BrokerAddr,omitempty"`
	GateId     string `protobuf:"bytes,13,opt,name=GateId" json:"GateId,omitempty"`
	Token      string `protobuf:"bytes,14,opt,name=Token" json:"Token,omitempty"`
}

func (m *BaseCmd) Reset()                    { *m = BaseCmd{} }
func (m *BaseCmd) String() string            { return proto.CompactTextString(m) }
func (*BaseCmd) ProtoMessage()               {}
func (*BaseCmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BaseCmd) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *BaseCmd) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *BaseCmd) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *BaseCmd) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func (m *BaseCmd) GetMark() string {
	if m != nil {
		return m.Mark
	}
	return ""
}

func (m *BaseCmd) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *BaseCmd) GetDeviceList() string {
	if m != nil {
		return m.DeviceList
	}
	return ""
}

func (m *BaseCmd) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *BaseCmd) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *BaseCmd) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *BaseCmd) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *BaseCmd) GetBrokerAddr() string {
	if m != nil {
		return m.BrokerAddr
	}
	return ""
}

func (m *BaseCmd) GetGateId() string {
	if m != nil {
		return m.GateId
	}
	return ""
}

func (m *BaseCmd) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type GateData struct {
	GateId          string        `protobuf:"bytes,1,opt,name=GateId" json:"GateId,omitempty"`
	Name            string        `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	UserDefName     string        `protobuf:"bytes,3,opt,name=UserDefName" json:"UserDefName,omitempty"`
	UserDefGateName string        `protobuf:"bytes,4,opt,name=UserDefGateName" json:"UserDefGateName,omitempty"`
	Token           string        `protobuf:"bytes,5,opt,name=Token" json:"Token,omitempty"`
	Server          string        `protobuf:"bytes,6,opt,name=Server" json:"Server,omitempty"`
	BakServer       string        `protobuf:"bytes,7,opt,name=BakServer" json:"BakServer,omitempty"`
	MsgSeq          string        `protobuf:"bytes,8,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
	CmdSet          []*CmdSetList `protobuf:"bytes,9,rep,name=CmdSet" json:"CmdSet,omitempty"`
	Device          []*DeviceList `protobuf:"bytes,10,rep,name=Device" json:"Device,omitempty"`
}

func (m *GateData) Reset()                    { *m = GateData{} }
func (m *GateData) String() string            { return proto.CompactTextString(m) }
func (*GateData) ProtoMessage()               {}
func (*GateData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GateData) GetGateId() string {
	if m != nil {
		return m.GateId
	}
	return ""
}

func (m *GateData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GateData) GetUserDefName() string {
	if m != nil {
		return m.UserDefName
	}
	return ""
}

func (m *GateData) GetUserDefGateName() string {
	if m != nil {
		return m.UserDefGateName
	}
	return ""
}

func (m *GateData) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GateData) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *GateData) GetBakServer() string {
	if m != nil {
		return m.BakServer
	}
	return ""
}

func (m *GateData) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func (m *GateData) GetCmdSet() []*CmdSetList {
	if m != nil {
		return m.CmdSet
	}
	return nil
}

func (m *GateData) GetDevice() []*DeviceList {
	if m != nil {
		return m.Device
	}
	return nil
}

type CmdSetList struct {
	Cmd    string        `protobuf:"bytes,1,opt,name=Cmd" json:"Cmd,omitempty"`
	Device []*DeviceList `protobuf:"bytes,2,rep,name=Device" json:"Device,omitempty"`
}

func (m *CmdSetList) Reset()                    { *m = CmdSetList{} }
func (m *CmdSetList) String() string            { return proto.CompactTextString(m) }
func (*CmdSetList) ProtoMessage()               {}
func (*CmdSetList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CmdSetList) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *CmdSetList) GetDevice() []*DeviceList {
	if m != nil {
		return m.Device
	}
	return nil
}

type CmdDef struct {
	ParmName    string `protobuf:"bytes,1,opt,name=ParmName" json:"ParmName,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	UserDefName string `protobuf:"bytes,3,opt,name=UserDefName" json:"UserDefName,omitempty"`
	Value       string `protobuf:"bytes,4,opt,name=Value" json:"Value,omitempty"`
	EnumValue   string `protobuf:"bytes,5,opt,name=EnumValue" json:"EnumValue,omitempty"`
	Range       string `protobuf:"bytes,6,opt,name=Range" json:"Range,omitempty"`
}

func (m *CmdDef) Reset()                    { *m = CmdDef{} }
func (m *CmdDef) String() string            { return proto.CompactTextString(m) }
func (*CmdDef) ProtoMessage()               {}
func (*CmdDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CmdDef) GetParmName() string {
	if m != nil {
		return m.ParmName
	}
	return ""
}

func (m *CmdDef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CmdDef) GetUserDefName() string {
	if m != nil {
		return m.UserDefName
	}
	return ""
}

func (m *CmdDef) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *CmdDef) GetEnumValue() string {
	if m != nil {
		return m.EnumValue
	}
	return ""
}

func (m *CmdDef) GetRange() string {
	if m != nil {
		return m.Range
	}
	return ""
}

type DevState struct {
	ParmName    string `protobuf:"bytes,1,opt,name=ParmName" json:"ParmName,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	UserDefName string `protobuf:"bytes,3,opt,name=UserDefName" json:"UserDefName,omitempty"`
	Value       string `protobuf:"bytes,4,opt,name=Value" json:"Value,omitempty"`
	DevType     string `protobuf:"bytes,5,opt,name=DevType" json:"DevType,omitempty"`
	DevIp       string `protobuf:"bytes,6,opt,name=DevIp" json:"DevIp,omitempty"`
	DevPort     string `protobuf:"bytes,7,opt,name=DevPort" json:"DevPort,omitempty"`
	DevUserName string `protobuf:"bytes,8,opt,name=DevUserName" json:"DevUserName,omitempty"`
	DevPassWord string `protobuf:"bytes,9,opt,name=DevPassWord" json:"DevPassWord,omitempty"`
}

func (m *DevState) Reset()                    { *m = DevState{} }
func (m *DevState) String() string            { return proto.CompactTextString(m) }
func (*DevState) ProtoMessage()               {}
func (*DevState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DevState) GetParmName() string {
	if m != nil {
		return m.ParmName
	}
	return ""
}

func (m *DevState) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DevState) GetUserDefName() string {
	if m != nil {
		return m.UserDefName
	}
	return ""
}

func (m *DevState) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *DevState) GetDevType() string {
	if m != nil {
		return m.DevType
	}
	return ""
}

func (m *DevState) GetDevIp() string {
	if m != nil {
		return m.DevIp
	}
	return ""
}

func (m *DevState) GetDevPort() string {
	if m != nil {
		return m.DevPort
	}
	return ""
}

func (m *DevState) GetDevUserName() string {
	if m != nil {
		return m.DevUserName
	}
	return ""
}

func (m *DevState) GetDevPassWord() string {
	if m != nil {
		return m.DevPassWord
	}
	return ""
}

type DeviceList struct {
	DeviceId    string    `protobuf:"bytes,1,opt,name=DeviceId" json:"DeviceId,omitempty"`
	Name        string    `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	UserDefName string    `protobuf:"bytes,3,opt,name=UserDefName" json:"UserDefName,omitempty"`
	Category    string    `protobuf:"bytes,4,opt,name=Category" json:"Category,omitempty"`
	Sleep       string    `protobuf:"bytes,5,opt,name=Sleep" json:"Sleep,omitempty"`
	Touch       string    `protobuf:"bytes,6,opt,name=Touch" json:"Touch,omitempty"`
	MsgSeq      string    `protobuf:"bytes,7,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
	Command     *CmdDef   `protobuf:"bytes,8,opt,name=Command" json:"Command,omitempty"`
	State       *DevState `protobuf:"bytes,9,opt,name=State" json:"State,omitempty"`
}

func (m *DeviceList) Reset()                    { *m = DeviceList{} }
func (m *DeviceList) String() string            { return proto.CompactTextString(m) }
func (*DeviceList) ProtoMessage()               {}
func (*DeviceList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DeviceList) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DeviceList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceList) GetUserDefName() string {
	if m != nil {
		return m.UserDefName
	}
	return ""
}

func (m *DeviceList) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *DeviceList) GetSleep() string {
	if m != nil {
		return m.Sleep
	}
	return ""
}

func (m *DeviceList) GetTouch() string {
	if m != nil {
		return m.Touch
	}
	return ""
}

func (m *DeviceList) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func (m *DeviceList) GetCommand() *CmdDef {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *DeviceList) GetState() *DevState {
	if m != nil {
		return m.State
	}
	return nil
}

type DevicedisconnReq struct {
	DeviceType string `protobuf:"bytes,1,opt,name=DeviceType" json:"DeviceType,omitempty"`
	DeviceId   string `protobuf:"bytes,2,opt,name=DeviceId" json:"DeviceId,omitempty"`
	MsgSeq     string `protobuf:"bytes,3,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
}

func (m *DevicedisconnReq) Reset()                    { *m = DevicedisconnReq{} }
func (m *DevicedisconnReq) String() string            { return proto.CompactTextString(m) }
func (*DevicedisconnReq) ProtoMessage()               {}
func (*DevicedisconnReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DevicedisconnReq) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *DevicedisconnReq) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DevicedisconnReq) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func init() {
	proto.RegisterType((*DeviceregReq)(nil), "lite.DeviceregReq")
	proto.RegisterType((*DeviceregResp)(nil), "lite.DeviceregResp")
	proto.RegisterType((*BaseCmd)(nil), "lite.BaseCmd")
	proto.RegisterType((*GateData)(nil), "lite.GateData")
	proto.RegisterType((*CmdSetList)(nil), "lite.cmdSetList")
	proto.RegisterType((*CmdDef)(nil), "lite.CmdDef")
	proto.RegisterType((*DevState)(nil), "lite.DevState")
	proto.RegisterType((*DeviceList)(nil), "lite.deviceList")
	proto.RegisterType((*DevicedisconnReq)(nil), "lite.DevicedisconnReq")
}

func init() { proto.RegisterFile("lite.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 691 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x5d, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0x9d, 0xff, 0x49, 0x5b, 0x2a, 0xab, 0x42, 0xab, 0x0a, 0x55, 0x95, 0x55, 0xa1, 0x3e,
	0xf5, 0xa1, 0x9c, 0x80, 0xc6, 0x15, 0x44, 0x50, 0x14, 0x39, 0x05, 0x9e, 0xb7, 0xf1, 0x34, 0x44,
	0x89, 0x63, 0x77, 0xed, 0x44, 0xca, 0x1b, 0x07, 0xe0, 0x10, 0x3c, 0x70, 0x0a, 0xae, 0xd3, 0x8b,
	0xa0, 0x9d, 0xd9, 0x8d, 0x37, 0x11, 0xa5, 0xa8, 0x48, 0xbc, 0xf9, 0xfb, 0x66, 0x3c, 0xfb, 0xed,
	0x37, 0x33, 0x36, 0xc0, 0x6c, 0x52, 0xe2, 0x59, 0xae, 0xb2, 0x32, 0x0b, 0xea, 0xfa, 0x39, 0xfc,
	0xee, 0xc1, 0x4e, 0x84, 0xcb, 0xc9, 0x08, 0x15, 0x8e, 0x63, 0xbc, 0x0b, 0x8e, 0x00, 0x18, 0x5f,
	0xaf, 0x72, 0x14, 0xde, 0xb1, 0x77, 0xda, 0x89, 0x1d, 0x26, 0x38, 0x81, 0x5d, 0x46, 0x31, 0x8e,
	0x7b, 0x59, 0x82, 0xc2, 0xa7, 0x94, 0x4d, 0x32, 0x38, 0x84, 0x36, 0x13, 0xfd, 0x44, 0xd4, 0x28,
	0x61, 0x8d, 0x83, 0xe7, 0xd0, 0xbc, 0x2a, 0xc6, 0x43, 0xbc, 0x13, 0x75, 0x8a, 0x18, 0xa4, 0xf9,
	0x6b, 0x4c, 0xf3, 0x7e, 0x22, 0x1a, 0xcc, 0x33, 0x0a, 0xef, 0x3d, 0x7b, 0x24, 0x49, 0x2c, 0xf2,
	0x47, 0x35, 0xba, 0xa7, 0xfb, 0x5b, 0xa7, 0x1f, 0x01, 0x5c, 0xa8, 0x6c, 0x8a, 0xea, 0x75, 0x92,
	0x28, 0xa3, 0xcd, 0x61, 0x1e, 0x54, 0x77, 0x0a, 0xcf, 0x86, 0xa8, 0x96, 0xa8, 0x06, 0x8b, 0x9b,
	0xd9, 0x64, 0xf4, 0x0e, 0x57, 0x46, 0xe6, 0x36, 0xad, 0x4f, 0x18, 0xa8, 0xc9, 0x52, 0x96, 0xa8,
	0x93, 0x9a, 0x7c, 0x42, 0xc5, 0x04, 0x07, 0xd0, 0xb8, 0x54, 0x2a, 0x53, 0xa2, 0x45, 0x21, 0x06,
	0xe1, 0xbd, 0x0f, 0xad, 0x0b, 0x59, 0x60, 0x2f, 0x4d, 0xfe, 0xe9, 0x7e, 0x7b, 0xe0, 0xf7, 0x73,
	0x73, 0x2f, 0xbf, 0x9f, 0x3f, 0x78, 0x9f, 0x00, 0xea, 0x57, 0x52, 0x4d, 0xcd, 0x25, 0xe8, 0x39,
	0xd8, 0x87, 0x5a, 0x2f, 0x4d, 0x8c, 0xe4, 0xda, 0x86, 0x92, 0xf7, 0x93, 0xa2, 0x34, 0x82, 0x1d,
	0x46, 0x57, 0x89, 0x64, 0x29, 0x45, 0x9b, 0xab, 0xe8, 0x67, 0xad, 0x8e, 0x2d, 0xe9, 0x27, 0xa2,
	0xc3, 0xea, 0x2c, 0xd6, 0xb1, 0x8f, 0x05, 0xaa, 0x0f, 0x32, 0x45, 0x01, 0x1c, 0xb3, 0xb8, 0xf2,
	0xa5, 0xeb, 0xf8, 0xb2, 0xd5, 0xaf, 0x9d, 0xdf, 0xf5, 0xeb, 0x8d, 0x2c, 0xb5, 0x13, 0xbb, 0x7c,
	0x3f, 0x46, 0xba, 0xda, 0x75, 0x36, 0xc5, 0xb9, 0xd8, 0xe3, 0x6a, 0x04, 0xc2, 0x9f, 0x3e, 0xb4,
	0x75, 0x02, 0x09, 0xad, 0x5e, 0xf5, 0x36, 0x5e, 0x0d, 0xa0, 0x4e, 0x02, 0xd9, 0x5a, 0x7a, 0x0e,
	0x8e, 0xa1, 0xab, 0x85, 0x46, 0x78, 0x4b, 0x21, 0xf6, 0xd7, 0xa5, 0xf4, 0x80, 0x18, 0xa8, 0xcb,
	0x50, 0x16, 0x3b, 0xbe, 0x4d, 0x57, 0xd2, 0x1a, 0x8e, 0x34, 0xad, 0x86, 0x6d, 0x32, 0xfe, 0x1b,
	0x14, 0xbc, 0x80, 0xce, 0x85, 0x9c, 0x9a, 0x10, 0x77, 0xa0, 0x22, 0x9c, 0xf6, 0xb6, 0xb7, 0xc6,
	0xb5, 0xd9, 0x4b, 0x93, 0x21, 0x96, 0xa2, 0x73, 0x5c, 0x3b, 0xed, 0x9e, 0xef, 0x9f, 0xd1, 0xea,
	0x8f, 0x88, 0xd3, 0xad, 0x8b, 0x4d, 0x5c, 0x67, 0x72, 0x43, 0x05, 0xb8, 0x99, 0xc9, 0xba, 0xc9,
	0xb1, 0x89, 0x87, 0x6f, 0x01, 0xaa, 0xf7, 0xed, 0xb0, 0x78, 0xd5, 0xb0, 0x54, 0x95, 0xfc, 0x47,
	0x2a, 0xfd, 0xf0, 0x48, 0x5e, 0x84, 0xb7, 0x7a, 0x22, 0x06, 0x52, 0xa5, 0xe4, 0x17, 0xd7, 0x5a,
	0xe3, 0x27, 0x36, 0xe2, 0x00, 0x1a, 0x9f, 0xe4, 0x6c, 0x61, 0xed, 0x67, 0xa0, 0x6d, 0xbc, 0x9c,
	0x2f, 0x52, 0x8e, 0xb0, 0xf1, 0x15, 0xa1, 0xdf, 0x89, 0xe5, 0x7c, 0x8c, 0xc6, 0x7b, 0x06, 0xe1,
	0x57, 0x9f, 0x16, 0x6d, 0x58, 0xca, 0x12, 0xff, 0x9b, 0x50, 0x01, 0xad, 0x08, 0x97, 0xb4, 0xf9,
	0x2c, 0xd3, 0x42, 0x9d, 0x1f, 0xe1, 0xb2, 0x9f, 0x5b, 0x91, 0x04, 0x4c, 0xfe, 0x20, 0x53, 0x76,
	0x3f, 0x2d, 0xd4, 0x0a, 0x22, 0x5c, 0xae, 0xf7, 0x8d, 0x07, 0xc4, 0xa5, 0x4c, 0xc6, 0x40, 0x16,
	0xc5, 0xe7, 0x4c, 0xd9, 0x6d, 0x75, 0xa9, 0xf0, 0x9b, 0x0f, 0x50, 0x35, 0x70, 0xe3, 0xcb, 0xe3,
	0x6d, 0x7d, 0x79, 0x9e, 0x66, 0xc2, 0x21, 0xb4, 0x7b, 0xb2, 0xc4, 0x71, 0xa6, 0x56, 0xc6, 0x87,
	0x35, 0xd6, 0x17, 0x1e, 0xce, 0x10, 0x73, 0xbb, 0x28, 0x04, 0x78, 0x7d, 0x16, 0xa3, 0x2f, 0xd6,
	0x06, 0x02, 0xce, 0x22, 0xb4, 0x36, 0x16, 0xe1, 0x25, 0xb4, 0x7a, 0x59, 0x9a, 0xca, 0x79, 0x42,
	0x06, 0x74, 0xcf, 0x77, 0x78, 0x2a, 0x79, 0xfc, 0x62, 0x1b, 0x0c, 0x4e, 0xa0, 0x41, 0x7d, 0x26,
	0x13, 0xba, 0xe7, 0x7b, 0x9c, 0x65, 0xbb, 0x1f, 0x73, 0x30, 0xbc, 0x85, 0x7d, 0xbe, 0x6f, 0x32,
	0x29, 0x46, 0xd9, 0x7c, 0xfe, 0x37, 0x7f, 0xcc, 0x3f, 0x7d, 0xad, 0x2b, 0xd5, 0x35, 0x57, 0xf5,
	0x4d, 0x93, 0xfe, 0xd1, 0xaf, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x71, 0x26, 0xe9, 0xb1,
	0x07, 0x00, 0x00,
}
