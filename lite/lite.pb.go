// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lite.proto

/*
Package lite is a generated protocol buffer package.

It is generated from these files:
	lite.proto

It has these top-level messages:
	DeviceregReq
	DeviceregResp
	Pj
	BaseCmd
	GateData
	CmdSetList
	CmdDef
	DevState
	DeviceList
	AudioController
	InOut
	CmdParm
	CentralController
	Power
	RecordDevice
	DevicedisconnReq
*/
package lite

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeviceregReq struct {
	DeviceType    string `protobuf:"bytes,1,opt,name=DeviceType" json:"DeviceType,omitempty"`
	DeviceRegCode string `protobuf:"bytes,2,opt,name=DeviceRegCode" json:"DeviceRegCode,omitempty"`
	DeviceId      string `protobuf:"bytes,3,opt,name=DeviceId" json:"DeviceId,omitempty"`
	MsgSeq        string `protobuf:"bytes,4,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
	TempId        string `protobuf:"bytes,5,opt,name=TempId" json:"TempId,omitempty"`
}

func (m *DeviceregReq) Reset()                    { *m = DeviceregReq{} }
func (m *DeviceregReq) String() string            { return proto.CompactTextString(m) }
func (*DeviceregReq) ProtoMessage()               {}
func (*DeviceregReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DeviceregReq) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *DeviceregReq) GetDeviceRegCode() string {
	if m != nil {
		return m.DeviceRegCode
	}
	return ""
}

func (m *DeviceregReq) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DeviceregReq) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func (m *DeviceregReq) GetTempId() string {
	if m != nil {
		return m.TempId
	}
	return ""
}

type DeviceregResp struct {
	DeviceType      string `protobuf:"bytes,1,opt,name=DeviceType" json:"DeviceType,omitempty"`
	DeviceId        string `protobuf:"bytes,2,opt,name=DeviceId" json:"DeviceId,omitempty"`
	BrokerAddr      string `protobuf:"bytes,3,opt,name=BrokerAddr" json:"BrokerAddr,omitempty"`
	MsgSeq          string `protobuf:"bytes,4,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
	ServerPublicKey string `protobuf:"bytes,5,opt,name=ServerPublicKey" json:"ServerPublicKey,omitempty"`
	PrivateKey      string `protobuf:"bytes,6,opt,name=PrivateKey" json:"PrivateKey,omitempty"`
	Error           string `protobuf:"bytes,7,opt,name=Error" json:"Error,omitempty"`
}

func (m *DeviceregResp) Reset()                    { *m = DeviceregResp{} }
func (m *DeviceregResp) String() string            { return proto.CompactTextString(m) }
func (*DeviceregResp) ProtoMessage()               {}
func (*DeviceregResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DeviceregResp) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *DeviceregResp) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DeviceregResp) GetBrokerAddr() string {
	if m != nil {
		return m.BrokerAddr
	}
	return ""
}

func (m *DeviceregResp) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func (m *DeviceregResp) GetServerPublicKey() string {
	if m != nil {
		return m.ServerPublicKey
	}
	return ""
}

func (m *DeviceregResp) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *DeviceregResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// ----------------------------------登录----------------------------
// Gateway->Server
// pub: s/v1/login
// sub: s/v1/login
// topic data:椭圆加密的数据，数据内容如下：
type Pj struct {
	Topic        string `protobuf:"bytes,1,opt,name=Topic" json:"Topic,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=Token" json:"Token,omitempty"`
	Project      string `protobuf:"bytes,3,opt,name=Project" json:"Project,omitempty"`
	Table        string `protobuf:"bytes,4,opt,name=Table" json:"Table,omitempty"`
	Source       string `protobuf:"bytes,5,opt,name=Source" json:"Source,omitempty"`
	PayLoad      string `protobuf:"bytes,6,opt,name=PayLoad" json:"PayLoad,omitempty"`
	Error        string `protobuf:"bytes,7,opt,name=Error" json:"Error,omitempty"`
	Msg          string `protobuf:"bytes,8,opt,name=Msg" json:"Msg,omitempty"`
	ShadowMode   string `protobuf:"bytes,9,opt,name=ShadowMode" json:"ShadowMode,omitempty"`
	SourceShadow string `protobuf:"bytes,10,opt,name=SourceShadow" json:"SourceShadow,omitempty"`
	FormatShadow string `protobuf:"bytes,11,opt,name=FormatShadow" json:"FormatShadow,omitempty"`
	Admin        string `protobuf:"bytes,12,opt,name=Admin" json:"Admin,omitempty"`
	MsgSeq       string `protobuf:"bytes,13,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
	RequestPath  string `protobuf:"bytes,14,opt,name=RequestPath" json:"RequestPath,omitempty"`
	Cmd          string `protobuf:"bytes,15,opt,name=Cmd" json:"Cmd,omitempty"`
	GateId       string `protobuf:"bytes,16,opt,name=GateId" json:"GateId,omitempty"`
	DeviceId     string `protobuf:"bytes,17,opt,name=DeviceId" json:"DeviceId,omitempty"`
	Parameter    string `protobuf:"bytes,18,opt,name=Parameter" json:"Parameter,omitempty"`
	ErrorMsg     string `protobuf:"bytes,19,opt,name=ErrorMsg" json:"ErrorMsg,omitempty"`
	RoomId       string `protobuf:"bytes,20,opt,name=RoomId" json:"RoomId,omitempty"`
	RoomName     string `protobuf:"bytes,21,opt,name=RoomName" json:"RoomName,omitempty"`
	RoomAddr     string `protobuf:"bytes,22,opt,name=RoomAddr" json:"RoomAddr,omitempty"`
	SubTopic     string `protobuf:"bytes,23,opt,name=SubTopic" json:"SubTopic,omitempty"`
	Language     string `protobuf:"bytes,24,opt,name=Language" json:"Language,omitempty"`
	Iot          uint32 `protobuf:"varint,25,opt,name=Iot" json:"Iot,omitempty"`
	Data         string `protobuf:"bytes,26,opt,name=Data" json:"Data,omitempty"`
	Ver          uint32 `protobuf:"varint,27,opt,name=Ver" json:"Ver,omitempty"`
}

func (m *Pj) Reset()                    { *m = Pj{} }
func (m *Pj) String() string            { return proto.CompactTextString(m) }
func (*Pj) ProtoMessage()               {}
func (*Pj) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Pj) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Pj) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Pj) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *Pj) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *Pj) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Pj) GetPayLoad() string {
	if m != nil {
		return m.PayLoad
	}
	return ""
}

func (m *Pj) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Pj) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Pj) GetShadowMode() string {
	if m != nil {
		return m.ShadowMode
	}
	return ""
}

func (m *Pj) GetSourceShadow() string {
	if m != nil {
		return m.SourceShadow
	}
	return ""
}

func (m *Pj) GetFormatShadow() string {
	if m != nil {
		return m.FormatShadow
	}
	return ""
}

func (m *Pj) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *Pj) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func (m *Pj) GetRequestPath() string {
	if m != nil {
		return m.RequestPath
	}
	return ""
}

func (m *Pj) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *Pj) GetGateId() string {
	if m != nil {
		return m.GateId
	}
	return ""
}

func (m *Pj) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *Pj) GetParameter() string {
	if m != nil {
		return m.Parameter
	}
	return ""
}

func (m *Pj) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *Pj) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *Pj) GetRoomName() string {
	if m != nil {
		return m.RoomName
	}
	return ""
}

func (m *Pj) GetRoomAddr() string {
	if m != nil {
		return m.RoomAddr
	}
	return ""
}

func (m *Pj) GetSubTopic() string {
	if m != nil {
		return m.SubTopic
	}
	return ""
}

func (m *Pj) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Pj) GetIot() uint32 {
	if m != nil {
		return m.Iot
	}
	return 0
}

func (m *Pj) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *Pj) GetVer() uint32 {
	if m != nil {
		return m.Ver
	}
	return 0
}

type BaseCmd struct {
	DeviceType string `protobuf:"bytes,1,opt,name=DeviceType" json:"DeviceType,omitempty"`
	DeviceId   string `protobuf:"bytes,2,opt,name=DeviceId" json:"DeviceId,omitempty"`
	Ip         string `protobuf:"bytes,3,opt,name=Ip" json:"Ip,omitempty"`
	MsgSeq     string `protobuf:"bytes,4,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
	Mark       string `protobuf:"bytes,5,opt,name=Mark" json:"Mark,omitempty"`
	Cmd        string `protobuf:"bytes,6,opt,name=Cmd" json:"Cmd,omitempty"`
	DeviceList string `protobuf:"bytes,7,opt,name=DeviceList" json:"DeviceList,omitempty"`
	Data       string `protobuf:"bytes,8,opt,name=Data" json:"Data,omitempty"`
	ServerId   string `protobuf:"bytes,9,opt,name=ServerId" json:"ServerId,omitempty"`
	UserName   string `protobuf:"bytes,10,opt,name=UserName" json:"UserName,omitempty"`
	Error      string `protobuf:"bytes,11,opt,name=Error" json:"Error,omitempty"`
	BrokerAddr string `protobuf:"bytes,12,opt,name=BrokerAddr" json:"BrokerAddr,omitempty"`
	GateId     string `protobuf:"bytes,13,opt,name=GateId" json:"GateId,omitempty"`
	Token      string `protobuf:"bytes,14,opt,name=Token" json:"Token,omitempty"`
}

func (m *BaseCmd) Reset()                    { *m = BaseCmd{} }
func (m *BaseCmd) String() string            { return proto.CompactTextString(m) }
func (*BaseCmd) ProtoMessage()               {}
func (*BaseCmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BaseCmd) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *BaseCmd) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *BaseCmd) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *BaseCmd) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func (m *BaseCmd) GetMark() string {
	if m != nil {
		return m.Mark
	}
	return ""
}

func (m *BaseCmd) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *BaseCmd) GetDeviceList() string {
	if m != nil {
		return m.DeviceList
	}
	return ""
}

func (m *BaseCmd) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *BaseCmd) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *BaseCmd) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *BaseCmd) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *BaseCmd) GetBrokerAddr() string {
	if m != nil {
		return m.BrokerAddr
	}
	return ""
}

func (m *BaseCmd) GetGateId() string {
	if m != nil {
		return m.GateId
	}
	return ""
}

func (m *BaseCmd) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type GateData struct {
	GateId    string        `protobuf:"bytes,1,opt,name=GateId" json:"GateId,omitempty"`
	Name      string        `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	DefName   string        `protobuf:"bytes,3,opt,name=DefName" json:"DefName,omitempty"`
	DefKey    string        `protobuf:"bytes,4,opt,name=DefKey" json:"DefKey,omitempty"`
	DefValue  string        `protobuf:"bytes,5,opt,name=DefValue" json:"DefValue,omitempty"`
	Token     string        `protobuf:"bytes,6,opt,name=Token" json:"Token,omitempty"`
	Server    string        `protobuf:"bytes,7,opt,name=Server" json:"Server,omitempty"`
	BakServer string        `protobuf:"bytes,8,opt,name=BakServer" json:"BakServer,omitempty"`
	MsgSeq    string        `protobuf:"bytes,9,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
	CmdSet    []*CmdSetList `protobuf:"bytes,10,rep,name=CmdSet" json:"CmdSet,omitempty"`
	Device    []*DeviceList `protobuf:"bytes,11,rep,name=Device" json:"Device,omitempty"`
}

func (m *GateData) Reset()                    { *m = GateData{} }
func (m *GateData) String() string            { return proto.CompactTextString(m) }
func (*GateData) ProtoMessage()               {}
func (*GateData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GateData) GetGateId() string {
	if m != nil {
		return m.GateId
	}
	return ""
}

func (m *GateData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GateData) GetDefName() string {
	if m != nil {
		return m.DefName
	}
	return ""
}

func (m *GateData) GetDefKey() string {
	if m != nil {
		return m.DefKey
	}
	return ""
}

func (m *GateData) GetDefValue() string {
	if m != nil {
		return m.DefValue
	}
	return ""
}

func (m *GateData) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GateData) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *GateData) GetBakServer() string {
	if m != nil {
		return m.BakServer
	}
	return ""
}

func (m *GateData) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func (m *GateData) GetCmdSet() []*CmdSetList {
	if m != nil {
		return m.CmdSet
	}
	return nil
}

func (m *GateData) GetDevice() []*DeviceList {
	if m != nil {
		return m.Device
	}
	return nil
}

type CmdSetList struct {
	Cmd    string        `protobuf:"bytes,1,opt,name=Cmd" json:"Cmd,omitempty"`
	Device []*DeviceList `protobuf:"bytes,2,rep,name=Device" json:"Device,omitempty"`
}

func (m *CmdSetList) Reset()                    { *m = CmdSetList{} }
func (m *CmdSetList) String() string            { return proto.CompactTextString(m) }
func (*CmdSetList) ProtoMessage()               {}
func (*CmdSetList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CmdSetList) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *CmdSetList) GetDevice() []*DeviceList {
	if m != nil {
		return m.Device
	}
	return nil
}

type CmdDef struct {
	ParmName  string `protobuf:"bytes,1,opt,name=ParmName" json:"ParmName,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	DefName   string `protobuf:"bytes,3,opt,name=DefName" json:"DefName,omitempty"`
	DefKey    string `protobuf:"bytes,4,opt,name=DefKey" json:"DefKey,omitempty"`
	DefValue  string `protobuf:"bytes,5,opt,name=DefValue" json:"DefValue,omitempty"`
	Value     string `protobuf:"bytes,6,opt,name=Value" json:"Value,omitempty"`
	EnumValue string `protobuf:"bytes,7,opt,name=EnumValue" json:"EnumValue,omitempty"`
	Range     string `protobuf:"bytes,8,opt,name=Range" json:"Range,omitempty"`
}

func (m *CmdDef) Reset()                    { *m = CmdDef{} }
func (m *CmdDef) String() string            { return proto.CompactTextString(m) }
func (*CmdDef) ProtoMessage()               {}
func (*CmdDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CmdDef) GetParmName() string {
	if m != nil {
		return m.ParmName
	}
	return ""
}

func (m *CmdDef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CmdDef) GetDefName() string {
	if m != nil {
		return m.DefName
	}
	return ""
}

func (m *CmdDef) GetDefKey() string {
	if m != nil {
		return m.DefKey
	}
	return ""
}

func (m *CmdDef) GetDefValue() string {
	if m != nil {
		return m.DefValue
	}
	return ""
}

func (m *CmdDef) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *CmdDef) GetEnumValue() string {
	if m != nil {
		return m.EnumValue
	}
	return ""
}

func (m *CmdDef) GetRange() string {
	if m != nil {
		return m.Range
	}
	return ""
}

type DevState struct {
	ParmName    string `protobuf:"bytes,1,opt,name=ParmName" json:"ParmName,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	DefName     string `protobuf:"bytes,3,opt,name=DefName" json:"DefName,omitempty"`
	DefKey      string `protobuf:"bytes,4,opt,name=DefKey" json:"DefKey,omitempty"`
	DefValue    string `protobuf:"bytes,5,opt,name=DefValue" json:"DefValue,omitempty"`
	Value       string `protobuf:"bytes,6,opt,name=Value" json:"Value,omitempty"`
	DevType     string `protobuf:"bytes,7,opt,name=DevType" json:"DevType,omitempty"`
	DevIp       string `protobuf:"bytes,8,opt,name=DevIp" json:"DevIp,omitempty"`
	DevPort     string `protobuf:"bytes,9,opt,name=DevPort" json:"DevPort,omitempty"`
	DevUserName string `protobuf:"bytes,10,opt,name=DevUserName" json:"DevUserName,omitempty"`
	DevPassWord string `protobuf:"bytes,11,opt,name=DevPassWord" json:"DevPassWord,omitempty"`
}

func (m *DevState) Reset()                    { *m = DevState{} }
func (m *DevState) String() string            { return proto.CompactTextString(m) }
func (*DevState) ProtoMessage()               {}
func (*DevState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DevState) GetParmName() string {
	if m != nil {
		return m.ParmName
	}
	return ""
}

func (m *DevState) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DevState) GetDefName() string {
	if m != nil {
		return m.DefName
	}
	return ""
}

func (m *DevState) GetDefKey() string {
	if m != nil {
		return m.DefKey
	}
	return ""
}

func (m *DevState) GetDefValue() string {
	if m != nil {
		return m.DefValue
	}
	return ""
}

func (m *DevState) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *DevState) GetDevType() string {
	if m != nil {
		return m.DevType
	}
	return ""
}

func (m *DevState) GetDevIp() string {
	if m != nil {
		return m.DevIp
	}
	return ""
}

func (m *DevState) GetDevPort() string {
	if m != nil {
		return m.DevPort
	}
	return ""
}

func (m *DevState) GetDevUserName() string {
	if m != nil {
		return m.DevUserName
	}
	return ""
}

func (m *DevState) GetDevPassWord() string {
	if m != nil {
		return m.DevPassWord
	}
	return ""
}

type DeviceList struct {
	DeviceId    string    `protobuf:"bytes,1,opt,name=DeviceId" json:"DeviceId,omitempty"`
	Name        string    `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	UserDefName string    `protobuf:"bytes,3,opt,name=UserDefName" json:"UserDefName,omitempty"`
	DefKey      string    `protobuf:"bytes,4,opt,name=DefKey" json:"DefKey,omitempty"`
	DefValue    string    `protobuf:"bytes,5,opt,name=DefValue" json:"DefValue,omitempty"`
	Category    string    `protobuf:"bytes,6,opt,name=Category" json:"Category,omitempty"`
	Sleep       string    `protobuf:"bytes,7,opt,name=Sleep" json:"Sleep,omitempty"`
	Touch       string    `protobuf:"bytes,8,opt,name=Touch" json:"Touch,omitempty"`
	MsgSeq      string    `protobuf:"bytes,9,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
	Command     *CmdDef   `protobuf:"bytes,10,opt,name=Command" json:"Command,omitempty"`
	State       *DevState `protobuf:"bytes,11,opt,name=State" json:"State,omitempty"`
}

func (m *DeviceList) Reset()                    { *m = DeviceList{} }
func (m *DeviceList) String() string            { return proto.CompactTextString(m) }
func (*DeviceList) ProtoMessage()               {}
func (*DeviceList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeviceList) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DeviceList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceList) GetUserDefName() string {
	if m != nil {
		return m.UserDefName
	}
	return ""
}

func (m *DeviceList) GetDefKey() string {
	if m != nil {
		return m.DefKey
	}
	return ""
}

func (m *DeviceList) GetDefValue() string {
	if m != nil {
		return m.DefValue
	}
	return ""
}

func (m *DeviceList) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *DeviceList) GetSleep() string {
	if m != nil {
		return m.Sleep
	}
	return ""
}

func (m *DeviceList) GetTouch() string {
	if m != nil {
		return m.Touch
	}
	return ""
}

func (m *DeviceList) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func (m *DeviceList) GetCommand() *CmdDef {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *DeviceList) GetState() *DevState {
	if m != nil {
		return m.State
	}
	return nil
}

type AudioController struct {
	Name    string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	DefName string `protobuf:"bytes,2,opt,name=DefName" json:"DefName,omitempty"`
	Volume  *InOut `protobuf:"bytes,3,opt,name=Volume" json:"Volume,omitempty"`
	Mute    *InOut `protobuf:"bytes,4,opt,name=Mute" json:"Mute,omitempty"`
	Level   *InOut `protobuf:"bytes,5,opt,name=Level" json:"Level,omitempty"`
}

func (m *AudioController) Reset()                    { *m = AudioController{} }
func (m *AudioController) String() string            { return proto.CompactTextString(m) }
func (*AudioController) ProtoMessage()               {}
func (*AudioController) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AudioController) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AudioController) GetDefName() string {
	if m != nil {
		return m.DefName
	}
	return ""
}

func (m *AudioController) GetVolume() *InOut {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *AudioController) GetMute() *InOut {
	if m != nil {
		return m.Mute
	}
	return nil
}

func (m *AudioController) GetLevel() *InOut {
	if m != nil {
		return m.Level
	}
	return nil
}

type InOut struct {
	Name   string     `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	OutPut []*CmdParm `protobuf:"bytes,2,rep,name=OutPut" json:"OutPut,omitempty"`
	InPut  []*CmdParm `protobuf:"bytes,3,rep,name=InPut" json:"InPut,omitempty"`
}

func (m *InOut) Reset()                    { *m = InOut{} }
func (m *InOut) String() string            { return proto.CompactTextString(m) }
func (*InOut) ProtoMessage()               {}
func (*InOut) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *InOut) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InOut) GetOutPut() []*CmdParm {
	if m != nil {
		return m.OutPut
	}
	return nil
}

func (m *InOut) GetInPut() []*CmdParm {
	if m != nil {
		return m.InPut
	}
	return nil
}

type CmdParm struct {
	Name            string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	DefName         string `protobuf:"bytes,2,opt,name=DefName" json:"DefName,omitempty"`
	DefKey          string `protobuf:"bytes,3,opt,name=DefKey" json:"DefKey,omitempty"`
	DefValue        string `protobuf:"bytes,4,opt,name=DefValue" json:"DefValue,omitempty"`
	Chanel          string `protobuf:"bytes,5,opt,name=Chanel" json:"Chanel,omitempty"`
	Value           string `protobuf:"bytes,6,opt,name=Value" json:"Value,omitempty"`
	Id              string `protobuf:"bytes,7,opt,name=Id" json:"Id,omitempty"`
	DefId           string `protobuf:"bytes,8,opt,name=DefId" json:"DefId,omitempty"`
	Join            string `protobuf:"bytes,9,opt,name=Join" json:"Join,omitempty"`
	DefJoin         string `protobuf:"bytes,10,opt,name=DefJoin" json:"DefJoin,omitempty"`
	Press           string `protobuf:"bytes,11,opt,name=Press" json:"Press,omitempty"`
	Switch          string `protobuf:"bytes,12,opt,name=Switch" json:"Switch,omitempty"`
	PressSwitchMode string `protobuf:"bytes,13,opt,name=PressSwitchMode" json:"PressSwitchMode,omitempty"`
	Sort            string `protobuf:"bytes,14,opt,name=Sort" json:"Sort,omitempty"`
}

func (m *CmdParm) Reset()                    { *m = CmdParm{} }
func (m *CmdParm) String() string            { return proto.CompactTextString(m) }
func (*CmdParm) ProtoMessage()               {}
func (*CmdParm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CmdParm) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CmdParm) GetDefName() string {
	if m != nil {
		return m.DefName
	}
	return ""
}

func (m *CmdParm) GetDefKey() string {
	if m != nil {
		return m.DefKey
	}
	return ""
}

func (m *CmdParm) GetDefValue() string {
	if m != nil {
		return m.DefValue
	}
	return ""
}

func (m *CmdParm) GetChanel() string {
	if m != nil {
		return m.Chanel
	}
	return ""
}

func (m *CmdParm) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *CmdParm) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CmdParm) GetDefId() string {
	if m != nil {
		return m.DefId
	}
	return ""
}

func (m *CmdParm) GetJoin() string {
	if m != nil {
		return m.Join
	}
	return ""
}

func (m *CmdParm) GetDefJoin() string {
	if m != nil {
		return m.DefJoin
	}
	return ""
}

func (m *CmdParm) GetPress() string {
	if m != nil {
		return m.Press
	}
	return ""
}

func (m *CmdParm) GetSwitch() string {
	if m != nil {
		return m.Switch
	}
	return ""
}

func (m *CmdParm) GetPressSwitchMode() string {
	if m != nil {
		return m.PressSwitchMode
	}
	return ""
}

func (m *CmdParm) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

type CentralController struct {
	Name    string     `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	DefName string     `protobuf:"bytes,2,opt,name=DefName" json:"DefName,omitempty"`
	Parm    []*CmdParm `protobuf:"bytes,3,rep,name=Parm" json:"Parm,omitempty"`
}

func (m *CentralController) Reset()                    { *m = CentralController{} }
func (m *CentralController) String() string            { return proto.CompactTextString(m) }
func (*CentralController) ProtoMessage()               {}
func (*CentralController) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CentralController) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CentralController) GetDefName() string {
	if m != nil {
		return m.DefName
	}
	return ""
}

func (m *CentralController) GetParm() []*CmdParm {
	if m != nil {
		return m.Parm
	}
	return nil
}

type Power struct {
	Name    string     `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	DefName string     `protobuf:"bytes,2,opt,name=DefName" json:"DefName,omitempty"`
	Parm    []*CmdParm `protobuf:"bytes,3,rep,name=Parm" json:"Parm,omitempty"`
}

func (m *Power) Reset()                    { *m = Power{} }
func (m *Power) String() string            { return proto.CompactTextString(m) }
func (*Power) ProtoMessage()               {}
func (*Power) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Power) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Power) GetDefName() string {
	if m != nil {
		return m.DefName
	}
	return ""
}

func (m *Power) GetParm() []*CmdParm {
	if m != nil {
		return m.Parm
	}
	return nil
}

type RecordDevice struct {
	Name       string     `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	DefName    string     `protobuf:"bytes,2,opt,name=DefName" json:"DefName,omitempty"`
	ChanelParm []*CmdParm `protobuf:"bytes,3,rep,name=ChanelParm" json:"ChanelParm,omitempty"`
	ActiveParm []*CmdParm `protobuf:"bytes,4,rep,name=ActiveParm" json:"ActiveParm,omitempty"`
}

func (m *RecordDevice) Reset()                    { *m = RecordDevice{} }
func (m *RecordDevice) String() string            { return proto.CompactTextString(m) }
func (*RecordDevice) ProtoMessage()               {}
func (*RecordDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *RecordDevice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RecordDevice) GetDefName() string {
	if m != nil {
		return m.DefName
	}
	return ""
}

func (m *RecordDevice) GetChanelParm() []*CmdParm {
	if m != nil {
		return m.ChanelParm
	}
	return nil
}

func (m *RecordDevice) GetActiveParm() []*CmdParm {
	if m != nil {
		return m.ActiveParm
	}
	return nil
}

type DevicedisconnReq struct {
	DeviceType string `protobuf:"bytes,1,opt,name=DeviceType" json:"DeviceType,omitempty"`
	DeviceId   string `protobuf:"bytes,2,opt,name=DeviceId" json:"DeviceId,omitempty"`
	MsgSeq     string `protobuf:"bytes,3,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
}

func (m *DevicedisconnReq) Reset()                    { *m = DevicedisconnReq{} }
func (m *DevicedisconnReq) String() string            { return proto.CompactTextString(m) }
func (*DevicedisconnReq) ProtoMessage()               {}
func (*DevicedisconnReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *DevicedisconnReq) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *DevicedisconnReq) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DevicedisconnReq) GetMsgSeq() string {
	if m != nil {
		return m.MsgSeq
	}
	return ""
}

func init() {
	proto.RegisterType((*DeviceregReq)(nil), "lite.DeviceregReq")
	proto.RegisterType((*DeviceregResp)(nil), "lite.DeviceregResp")
	proto.RegisterType((*Pj)(nil), "lite.Pj")
	proto.RegisterType((*BaseCmd)(nil), "lite.BaseCmd")
	proto.RegisterType((*GateData)(nil), "lite.GateData")
	proto.RegisterType((*CmdSetList)(nil), "lite.cmdSetList")
	proto.RegisterType((*CmdDef)(nil), "lite.CmdDef")
	proto.RegisterType((*DevState)(nil), "lite.DevState")
	proto.RegisterType((*DeviceList)(nil), "lite.deviceList")
	proto.RegisterType((*AudioController)(nil), "lite.AudioController")
	proto.RegisterType((*InOut)(nil), "lite.InOut")
	proto.RegisterType((*CmdParm)(nil), "lite.CmdParm")
	proto.RegisterType((*CentralController)(nil), "lite.CentralController")
	proto.RegisterType((*Power)(nil), "lite.Power")
	proto.RegisterType((*RecordDevice)(nil), "lite.RecordDevice")
	proto.RegisterType((*DevicedisconnReq)(nil), "lite.DevicedisconnReq")
}

func init() { proto.RegisterFile("lite.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcd, 0x72, 0x1b, 0xc5,
	0x13, 0x2f, 0xad, 0x25, 0xd9, 0x6e, 0xd9, 0x8e, 0xb3, 0xff, 0xfc, 0xc3, 0x62, 0x52, 0xc1, 0xd9,
	0x04, 0xca, 0x17, 0x72, 0x30, 0x4f, 0xe0, 0x48, 0x01, 0x04, 0x36, 0x51, 0xad, 0x82, 0xe1, 0x3a,
	0xd6, 0xb6, 0x64, 0xc5, 0xda, 0x1d, 0x65, 0x76, 0x56, 0x29, 0xbf, 0x0a, 0x27, 0x8e, 0x1c, 0x38,
	0x71, 0xe6, 0xc0, 0x23, 0x70, 0xe5, 0x9c, 0x17, 0xa1, 0xba, 0x7b, 0xf6, 0x43, 0x2a, 0x99, 0x90,
	0x50, 0x50, 0xdc, 0xe6, 0xd7, 0xdd, 0x33, 0xd3, 0x1f, 0xbf, 0xee, 0xd9, 0x05, 0x98, 0x4d, 0x2d,
	0x3e, 0x9e, 0x1b, 0x6d, 0xb5, 0xdf, 0xa4, 0x75, 0xf8, 0x43, 0x03, 0x76, 0x7a, 0xb8, 0x98, 0x8e,
	0xd0, 0xe0, 0x24, 0xc2, 0x97, 0xfe, 0x7d, 0x00, 0xc1, 0xcf, 0xaf, 0xe7, 0x18, 0x34, 0x0e, 0x1b,
	0x47, 0xdb, 0x51, 0x4d, 0xe2, 0x3f, 0x82, 0x5d, 0x41, 0x11, 0x4e, 0xba, 0x3a, 0xc6, 0xc0, 0x63,
	0x93, 0x65, 0xa1, 0x7f, 0x00, 0x5b, 0x22, 0xe8, 0xc7, 0xc1, 0x06, 0x1b, 0x94, 0xd8, 0xbf, 0x0b,
	0xed, 0xb3, 0x6c, 0x32, 0xc4, 0x97, 0x41, 0x93, 0x35, 0x0e, 0x91, 0xfc, 0x39, 0x26, 0xf3, 0x7e,
	0x1c, 0xb4, 0x44, 0x2e, 0x28, 0x7c, 0xdd, 0x28, 0xae, 0x64, 0x17, 0xb3, 0xf9, 0x1b, 0x7d, 0xac,
	0xdf, 0xee, 0xad, 0xdc, 0x7e, 0x1f, 0xe0, 0x89, 0xd1, 0x57, 0x68, 0x4e, 0xe2, 0xd8, 0x38, 0xdf,
	0x6a, 0x92, 0x1b, 0xbd, 0x3b, 0x82, 0x5b, 0x43, 0x34, 0x0b, 0x34, 0x83, 0xfc, 0x62, 0x36, 0x1d,
	0x7d, 0x85, 0xd7, 0xce, 0xcd, 0x55, 0x31, 0xdd, 0x30, 0x30, 0xd3, 0x85, 0xb2, 0x48, 0x46, 0x6d,
	0xb9, 0xa1, 0x92, 0xf8, 0x77, 0xa0, 0xf5, 0xd4, 0x18, 0x6d, 0x82, 0x4d, 0x56, 0x09, 0x08, 0x7f,
	0x6e, 0x81, 0x37, 0x78, 0x41, 0xca, 0xe7, 0x7a, 0x3e, 0x1d, 0xb9, 0xa8, 0x04, 0x88, 0xf4, 0x0a,
	0x53, 0x17, 0x8d, 0x00, 0x3f, 0x80, 0xcd, 0x81, 0xd1, 0x2f, 0x70, 0x64, 0x5d, 0x1c, 0x05, 0x64,
	0x7b, 0x75, 0x31, 0x43, 0x17, 0x83, 0x00, 0x0a, 0x6d, 0xa8, 0x73, 0x33, 0xc2, 0x22, 0xc1, 0x82,
	0xf8, 0x1c, 0x75, 0x7d, 0xaa, 0x55, 0xec, 0xbc, 0x2d, 0xe0, 0x7a, 0x57, 0xfd, 0x7d, 0xd8, 0x38,
	0xcb, 0x26, 0xc1, 0x16, 0xcb, 0x68, 0x49, 0x21, 0x0f, 0x2f, 0x55, 0xac, 0x5f, 0x9d, 0x11, 0x23,
	0xb6, 0x25, 0xe4, 0x4a, 0xe2, 0x87, 0xb0, 0x23, 0x77, 0x89, 0x2c, 0x00, 0xb6, 0x58, 0x92, 0x91,
	0xcd, 0x67, 0xda, 0x24, 0xca, 0x3a, 0x9b, 0x8e, 0xd8, 0xd4, 0x65, 0xe4, 0xcf, 0x49, 0x9c, 0x4c,
	0xd3, 0x60, 0x47, 0xfc, 0x61, 0x50, 0x2b, 0xd9, 0xee, 0x52, 0xc9, 0x0e, 0xa1, 0x13, 0xe1, 0xcb,
	0x1c, 0x33, 0x3b, 0x50, 0xf6, 0x32, 0xd8, 0x63, 0x65, 0x5d, 0x44, 0x91, 0x74, 0x93, 0x38, 0xb8,
	0x25, 0x91, 0x74, 0x13, 0x26, 0xe7, 0xe7, 0xca, 0x12, 0x71, 0xf6, 0xe5, 0x2c, 0x41, 0x4b, 0x94,
	0xba, 0xbd, 0x42, 0xa9, 0x7b, 0xb0, 0x3d, 0x50, 0x46, 0x25, 0x68, 0xd1, 0x04, 0x3e, 0x2b, 0x2b,
	0x01, 0xed, 0xe4, 0xb4, 0x51, 0xca, 0xfe, 0x27, 0x3b, 0x0b, 0x4c, 0xb7, 0x45, 0x5a, 0x27, 0xfd,
	0x38, 0xb8, 0x23, 0xb7, 0x09, 0xa2, 0x3d, 0xb4, 0xfa, 0x5a, 0x25, 0x18, 0xfc, 0x5f, 0xf6, 0x14,
	0xb8, 0xd0, 0x31, 0x7d, 0xef, 0x56, 0x3a, 0x26, 0xef, 0x01, 0x6c, 0x0d, 0xf3, 0x0b, 0x21, 0xd0,
	0x7b, 0xa2, 0x2b, 0x30, 0xe9, 0x4e, 0x55, 0x3a, 0xc9, 0xd5, 0x04, 0x83, 0x40, 0x74, 0x05, 0xa6,
	0x3c, 0xf4, 0xb5, 0x0d, 0xde, 0x3f, 0x6c, 0x1c, 0xed, 0x46, 0xb4, 0xf4, 0x7d, 0x68, 0xf6, 0x94,
	0x55, 0xc1, 0x01, 0x5b, 0xf2, 0x9a, 0xac, 0xce, 0xd1, 0x04, 0x1f, 0x88, 0xd5, 0x39, 0x9a, 0xf0,
	0xb5, 0x07, 0x9b, 0x4f, 0x54, 0x86, 0x94, 0xb9, 0xbf, 0xd3, 0x94, 0x7b, 0xe0, 0xf5, 0xe7, 0x8e,
	0xc4, 0x5e, 0x7f, 0x7e, 0x63, 0x13, 0xfa, 0xd0, 0x3c, 0x53, 0xe6, 0xca, 0xf1, 0x97, 0xd7, 0x45,
	0x0d, 0xdb, 0x55, 0x0d, 0x4b, 0x4f, 0x4e, 0xa7, 0x99, 0x75, 0xd4, 0xad, 0x49, 0xca, 0xd8, 0xb6,
	0x6a, 0xb1, 0x51, 0xe6, 0xb8, 0x8f, 0xfb, 0xb1, 0xe3, 0x6f, 0x89, 0x49, 0xf7, 0x4d, 0x86, 0x86,
	0xab, 0x21, 0xcc, 0x2d, 0x71, 0xd5, 0x21, 0x9d, 0x7a, 0x87, 0x2c, 0x0f, 0x99, 0x9d, 0x75, 0x43,
	0xc6, 0xb1, 0x6c, 0x77, 0x89, 0x65, 0x65, 0x9f, 0xef, 0xd5, 0xfa, 0x3c, 0xfc, 0xc5, 0x83, 0x2d,
	0x32, 0x60, 0x47, 0xab, 0xad, 0x8d, 0xa5, 0xad, 0x3e, 0x34, 0xd9, 0x41, 0x49, 0x2d, 0xaf, 0xa9,
	0xb1, 0x7b, 0x38, 0x66, 0xb1, 0x1b, 0x10, 0x0e, 0xd2, 0x29, 0x3d, 0x1c, 0xd3, 0x7c, 0x72, 0x09,
	0x16, 0x24, 0x45, 0x1a, 0x9f, 0xab, 0x59, 0x5e, 0x0c, 0x89, 0x12, 0x57, 0xce, 0xb5, 0xeb, 0x43,
	0x88, 0x86, 0x0a, 0x27, 0xca, 0x25, 0xda, 0x21, 0x6a, 0x8a, 0x27, 0xea, 0xca, 0xa9, 0x24, 0xd3,
	0x95, 0xa0, 0x56, 0xe0, 0xed, 0x95, 0x29, 0xdb, 0xee, 0x26, 0xf1, 0x10, 0x6d, 0x00, 0x87, 0x1b,
	0x47, 0x9d, 0xe3, 0xfd, 0xc7, 0xfc, 0x62, 0x8d, 0x58, 0x46, 0xc5, 0x8b, 0x9c, 0x9e, 0x2c, 0xa5,
	0xa4, 0x41, 0xa7, 0x6e, 0x19, 0x97, 0x65, 0x8e, 0x9c, 0x3e, 0xfc, 0x02, 0xa0, 0xda, 0x5f, 0xd0,
	0xa5, 0x51, 0xd1, 0xa5, 0x3a, 0xc9, 0x7b, 0xc3, 0x49, 0xbf, 0x35, 0xd8, 0xbd, 0x1e, 0x8e, 0x29,
	0x51, 0x03, 0x65, 0xa4, 0x43, 0xe5, 0xac, 0x12, 0xff, 0x3b, 0xa5, 0x10, 0x85, 0x2b, 0x85, 0x48,
	0xef, 0xc1, 0xf6, 0xd3, 0x34, 0x4f, 0x44, 0x23, 0xd5, 0xa8, 0x04, 0xb4, 0x27, 0x52, 0xe9, 0x04,
	0x5d, 0x31, 0x04, 0x84, 0x3f, 0x79, 0xdc, 0x96, 0x43, 0xab, 0x2c, 0xfe, 0x27, 0x83, 0xe2, 0x3b,
	0x16, 0x3c, 0x53, 0x36, 0x8b, 0x3b, 0x18, 0x92, 0x7d, 0x0f, 0x17, 0xfd, 0x79, 0x11, 0x10, 0x03,
	0x67, 0x3f, 0xd0, 0xc6, 0x3a, 0x6a, 0x15, 0x90, 0x9e, 0x83, 0x1e, 0x2e, 0x56, 0x3a, 0xb9, 0x2e,
	0x72, 0x16, 0x03, 0x95, 0x65, 0xdf, 0x6a, 0x13, 0xbb, 0x96, 0xae, 0x8b, 0xc2, 0x5f, 0x3d, 0x80,
	0x8a, 0x18, 0x4b, 0x33, 0xad, 0xb1, 0x32, 0xd3, 0xd6, 0x25, 0xec, 0x10, 0x3a, 0x74, 0xd9, 0x72,
	0xd2, 0xea, 0xa2, 0x77, 0x4a, 0xdc, 0x01, 0x6c, 0x75, 0x95, 0xc5, 0x89, 0x36, 0xc5, 0xe7, 0x46,
	0x89, 0x29, 0x49, 0xc3, 0x19, 0xe2, 0xbc, 0x78, 0xc1, 0x19, 0x48, 0x2b, 0xe7, 0xa3, 0xcb, 0x22,
	0x75, 0x0c, 0x6e, 0x6c, 0xca, 0x8f, 0x61, 0xb3, 0xab, 0x93, 0x44, 0xa5, 0x31, 0x27, 0xad, 0x73,
	0xbc, 0x23, 0x1d, 0x22, 0xad, 0x10, 0x15, 0x4a, 0xff, 0x11, 0xb4, 0x98, 0x47, 0x9c, 0xb8, 0xce,
	0xf1, 0x9e, 0x58, 0x15, 0xec, 0x8a, 0x44, 0x19, 0xfe, 0xd8, 0x80, 0x5b, 0x27, 0x79, 0x3c, 0xd5,
	0x5d, 0x9d, 0x5a, 0xa3, 0x67, 0x33, 0x34, 0x65, 0xae, 0x1a, 0xeb, 0xc9, 0xe5, 0x2d, 0x93, 0xeb,
	0x21, 0xb4, 0xcf, 0xf5, 0x2c, 0x77, 0x09, 0xec, 0x1c, 0x77, 0xe4, 0xa2, 0x7e, 0xfa, 0x2c, 0xb7,
	0x91, 0x53, 0xf9, 0x1f, 0x42, 0xf3, 0x2c, 0xb7, 0xf2, 0x05, 0xb4, 0x62, 0xc2, 0x0a, 0xff, 0x01,
	0xb4, 0x4e, 0x71, 0x81, 0x33, 0x4e, 0xe7, 0x8a, 0x85, 0x68, 0xc2, 0x09, 0xb4, 0x18, 0xaf, 0xf5,
	0xef, 0x23, 0x68, 0x3f, 0xcb, 0xed, 0x20, 0xb7, 0x6e, 0x6c, 0xec, 0x96, 0x49, 0xa1, 0x9e, 0x89,
	0x9c, 0xd2, 0x7f, 0x48, 0x67, 0x90, 0xd5, 0xc6, 0x3a, 0x2b, 0xd1, 0x85, 0xbf, 0x7b, 0xb0, 0xe9,
	0x44, 0x6f, 0x99, 0x8b, 0x8a, 0x2f, 0x1b, 0x37, 0xf2, 0xa5, 0xb9, 0xc2, 0x97, 0xbb, 0xd0, 0xee,
	0x5e, 0xaa, 0xd4, 0x85, 0xbe, 0x1d, 0x39, 0x74, 0x43, 0x03, 0xd2, 0xdb, 0x1c, 0x3b, 0xfa, 0x78,
	0xf2, 0x46, 0xf5, 0x70, 0xdc, 0x8f, 0xab, 0xb6, 0x1b, 0x0b, 0xdb, 0xbf, 0xd4, 0xd3, 0xd4, 0x31,
	0x87, 0xd7, 0xce, 0x6b, 0x16, 0x43, 0xe9, 0x35, 0x6b, 0xee, 0x40, 0x6b, 0x60, 0x30, 0xcb, 0x8a,
	0x57, 0x93, 0x01, 0x3f, 0x25, 0xaf, 0xa6, 0x76, 0x74, 0xe9, 0x5e, 0x4c, 0x87, 0xe8, 0xd3, 0x9b,
	0x0d, 0x04, 0xf2, 0x27, 0xa6, 0x3c, 0x9b, 0xab, 0x62, 0xf2, 0x62, 0x48, 0x9d, 0x2f, 0xcf, 0x27,
	0xaf, 0xc3, 0x18, 0x6e, 0x77, 0x31, 0xb5, 0x46, 0xcd, 0xde, 0x99, 0x70, 0x0f, 0xa0, 0x49, 0xa5,
	0x59, 0x5f, 0x42, 0x56, 0x85, 0xdf, 0x41, 0x6b, 0xa0, 0x5f, 0xfd, 0x13, 0x27, 0x7f, 0xdf, 0x80,
	0x9d, 0x08, 0x47, 0xda, 0xc4, 0x32, 0x5a, 0xde, 0xf2, 0x86, 0x4f, 0x00, 0xa4, 0xbc, 0x37, 0xdf,
	0x53, 0x33, 0x20, 0xf3, 0x93, 0x91, 0x9d, 0x2e, 0x90, 0xcd, 0x9b, 0x6b, 0xcd, 0x2b, 0x83, 0x70,
	0x0c, 0xfb, 0xe2, 0x55, 0x3c, 0xcd, 0x46, 0x3a, 0x4d, 0xff, 0xca, 0x1f, 0xe4, 0x9f, 0x7d, 0x08,
	0x56, 0x23, 0x68, 0xa3, 0x3e, 0x82, 0x2e, 0xda, 0xfc, 0xcf, 0xfa, 0xe9, 0x1f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x03, 0xb8, 0xbc, 0x10, 0xc1, 0x0e, 0x00, 0x00,
}
